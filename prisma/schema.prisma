// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 用户
model User {
  id       Int    @id @default(autoincrement())
  username String @unique

  bio      String @default("")
  email    String @default("")
  avatar   String @default("")
  nickname String @default("")

  password String

  joinedAt DateTime @default(now())

  role SystemUserRole @default(User)

  // ==== relations ====

  sessions UserSession[]

  createdFiles       File[]
  createdProblems    Problem[]
  createdProblemSets ProblemSet[]
  createdContests    Contest[]
  createdComments    Comment[]
  createdReplies     Reply[]
  createdRecords     Record[]

  // TODO: reference?
  attendedContests Contest[] @relation("attendee", references: [id])
  moddedContests   Contest[] @relation("mod", references: [id])
  juriedContests   Contest[] @relation("jury", references: [id])

  attendedTeams TeamMember[]
}

enum SystemUserRole {
  Su
  Admin
  User
  Guest
}

model UserSession {
  session    String   @id @default(uuid())
  lastActive DateTime @default(now())

  // ==== relations ====

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

/// 所有文件
model File {
  id String @id @default(uuid())

  filename  String
  filesize  Int
  mimetype  String   @default("application/octet-stream")
  createdAt DateTime @default(now())

  // ==== relations ====

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  dataProblem   Problem? @relation("data", fields: [dataProblemId], references: [id])
  dataProblemId Int?

  fileProblem   Problem? @relation("file", fields: [fileProblemId], references: [id])
  fileProblemId Int?
}

model Problem {
  id Int @id @default(autoincrement())

  title       String
  description String

  private Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags ProblemTag[] @relation(references: [id])

  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int

  data                File[]       @relation("data")
  files               File[]       @relation("file")
  includedContests    Contest[]    @relation(references: [id])
  includedProblemSets ProblemSet[] @relation(references: [id])
  relatedRecords      Record[]

  team   Team? @relation(fields: [teamId], references: [id])
  teamId Int?
}

model ProblemTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  problems Problem[] @relation(references: [id])
}

model ProblemSet {
  id Int @id @default(autoincrement())

  title       String
  description String

  private Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags     ProblemSetTag[] @relation(references: [id])
  problems Problem[]       @relation(references: [id])

  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int
}

model ProblemSetTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  problemSets ProblemSet[] @relation(references: [id])
}

model Contest {
  id Int @id @default(autoincrement())

  title       String
  description String

  system ContestSystem

  beginTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags ContestTag[] @relation(references: [id])

  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int

  problems Problem[] @relation(references: [id])

  mods      User[] @relation("mod", references: [id])
  juries    User[] @relation("jury", references: [id])
  attendees User[] @relation("attendee", references: [id])

  relatedRecords Record[]

  team   Team? @relation(fields: [teamId], references: [id])
  teamId Int?
}

model ContestTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  contests Contest[] @relation(references: [id])
}

enum ContestSystem {
  /// ACM 赛制，每次错误提交都有罚时，榜单实时显示，最后一小时封榜，最后成绩以过题数、过题时间为准
  ACM
  /// OI 赛制，比赛结束前都无法查看提交结果和榜单，最后成绩以最后一次提交为准
  OI
  /// IOI 赛制，提交结果和榜单实时显示，最后成绩以最后一次提交为准
  IOI
  /// 作业赛制，我不知道具体是什么操作，反正就是比赛
  Homework
}

model Team {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt   DateTime @default(now())
  description String?

  members  TeamMember[]
  contests Contest[]
  problems Problem[]
}

model TeamMember {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId Int

  role TeamMemberRole @default(Member)

  @@unique([userId, teamId])
}

enum TeamMemberRole {
  Owner
  Admin
  Member
}

model Record {
  id Int @id @default(autoincrement())

  /// 评测状态（结果）
  status   String @default("Pending")
  /// 得分
  score    Float  @default(0)
  /// 评测信息（错误信息）
  message  String @default("")
  /// 评测总时间 (ms)
  time     Int    @default(0)
  /// 评测最大内存 (byte)
  memory   Int    @default(0)
  /// 具体每一个测试点的评测结果，由于结构过于复杂，这里直接用 JSON 保存
  subtasks String @default("[]")

  /// 提交语言，一般就是源文件的后缀名
  language    String
  submittedAt DateTime @default(now())

  // ==== relations ====

  submitter   User @relation(fields: [submitterId], references: [id])
  submitterId Int

  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int

  contest   Contest? @relation(fields: [contestId], references: [id])
  contestId Int?
}

model CommentTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  comments Comment[] @relation(references: [id])
}

model Comment {
  id Int @id @default(autoincrement())

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // === relations ===

  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int

  tags CommentTag[] @relation(references: [id])

  replies Reply[]
}

model Reply {
  id Int @id @default(autoincrement())

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  creatorId Int
  creator   User @relation(fields: [creatorId], references: [id])
}

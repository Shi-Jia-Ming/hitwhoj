// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid Int @id @default(autoincrement())

  bio      String @default("")
  email    String @default("")
  avatar   String @default("")
  nickname String @default("")
  username String @unique

  password String

  joinedAt DateTime @default(now())

  role SystemUserRole @default(User)

  // ==== relations ====

  sessions UserSession[]

  createdFiles       File[]
  createdProblems    Problem[]
  createdProblemSets ProblemSet[]
  createdContests    Contest[]

  attendedContests Contest[] @relation("attendee", references: [cid])
  moddedContests   Contest[] @relation("mod", references: [cid])
  juriedContests   Contest[] @relation("jury", references: [cid])

  records Record[]
  Comment Comment[]
  Reply   Reply[]
}

enum SystemUserRole {
  Su
  Admin
  User
  Guest
}

model UserSession {
  session String @id @default(uuid())

  // ==== relations ====

  uid  Int
  user User @relation(fields: [uid], references: [uid])
}

/// 所有文件，包括：
///
/// - 用户上传文件
/// - 题目数据文件
/// - 题目附加文件（pdf 之类的）
model File {
  fid String @id @default(uuid())

  filename  String
  filesize  Int
  mimetype  String   @default("application/octet-stream")
  createdAt DateTime @default(now())

  /// 是否允许公开下载
  ///
  /// - 对于题目数据文件，如果设置为公开，则可以在题目页面下载
  /// - 对于用户上传文件，如果设置为私密，则只有用户自己可以下载
  ///
  /// 注意即使用户设置某文件为公开，其他用户也无法查看到该用户上传的所有公开文件
  private Boolean @default(true)

  // ==== relations ====

  uid  Int?
  user User? @relation(fields: [uid], references: [uid])

  pid     Int?
  problem Problem? @relation(fields: [pid], references: [pid])
}

model Problem {
  pid Int @id @default(autoincrement())

  title       String
  description String

  private Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  tags ProblemTag[] @relation(references: [id])

  uid  Int
  user User @relation(fields: [uid], references: [uid])

  cid     Int?
  contest Contest? @relation("belong", fields: [cid], references: [cid])

  files               File[]
  includedContests    Contest[]    @relation("contain", references: [cid])
  includedProblemSets ProblemSet[] @relation(references: [sid])

  records Record[]
}

model ProblemTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  problems Problem[] @relation(references: [pid])
}

model ProblemSet {
  sid Int @id @default(autoincrement())

  title       String
  description String

  private Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  tags ProblemSetTag[] @relation(references: [id])

  problems Problem[] @relation(references: [pid])

  uid  Int
  user User @relation(fields: [uid], references: [uid])
}

model ProblemSetTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  problemSets ProblemSet[] @relation(references: [sid])
}

model Contest {
  cid Int @id @default(autoincrement())

  title       String
  description String

  system ContestSystem

  beginTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  tags ContestTag[] @relation(references: [id])

  uid  Int
  user User @relation(fields: [uid], references: [uid])

  problems Problem[] @relation("contain", references: [pid])

  mods      User[] @relation("mod", references: [uid])
  juries    User[] @relation("jury", references: [uid])
  attendees User[] @relation("attendee", references: [uid])

  records           Record[]
  exclusiveProblems Problem[] @relation("belong")
}

model ContestTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  contests Contest[] @relation(references: [cid])
}

enum ContestSystem {
  /// ACM 赛制，每次错误提交都有罚时，榜单实时显示，最后一小时封榜，最后成绩以过题数、过题时间为准
  ACM
  /// OI 赛制，比赛结束前都无法查看提交结果和榜单，最后成绩以最后一次提交为准
  OI
  /// IOI 赛制，提交结果和榜单实时显示，最后成绩以最后一次提交为准
  IOI
  /// 作业赛制，我不知道具体是什么操作，反正就是比赛
  Homework
}

model Record {
  rid Int @id @default(autoincrement())

  status RecordStatus @default(Pending)
  detail String       @default("")
  points String       @default("[]")

  language String

  submittedAt DateTime @default(now())

  // ==== relations ====

  uid  Int
  user User @relation(fields: [uid], references: [uid])

  pid     Int
  problem Problem @relation(fields: [pid], references: [pid])

  cid     Int?
  contest Contest? @relation(fields: [cid], references: [cid])
}

enum RecordStatus {
  Pending
  Judging
  Accepted
  WrongAnswer
  TimeLimitExceeded
  MemoryLimitExceeded
  RuntimeError
  CompileError
  SystemError
}

model CommentTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  comments Comment[] @relation(references: [id])
}

model Comment {
  id Int @id @default(autoincrement())

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // === relations ===

  uid  Int
  user User @relation(fields: [uid], references: [uid])

  tags CommentTag[] @relation(references: [id])

  replies Reply[]
}

model Reply {
  id Int @id @default(autoincrement())

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  uid  Int
  user User @relation(fields: [uid], references: [uid])
}

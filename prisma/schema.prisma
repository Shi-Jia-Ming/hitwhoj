// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid Int @id @default(autoincrement())

  email    String?
  avatar   String?
  nickname String  @unique

  password String

  joinedAt DateTime @default(now())

  // ==== relations ====

  sessions UserSession[]

  createdFiles       UserFile[]
  createdProblems    Problem[]
  createdProblemSets ProblemSet[]
  createdContests    Contest[]

  attendedContests Contest[] @relation("attendee", references: [cid])
  moddedContests   Contest[] @relation("mod", references: [cid])
  juriedContests   Contest[] @relation("jury", references: [cid])

  createdTeam     Team[]
  teamMember      TeamMember[]
  createdHomework TeamHomework[]
}

model UserSession {
  session String @id @default(uuid())

  // ==== relations ====

  uid  Int
  user User @relation(fields: [uid], references: [uid])
}

model UserFile {
  fid String @id @default(uuid())

  filename  String
  filesize  Int
  mimetype  String   @default("application/octet-stream")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  private Boolean @default(true)

  // ==== relations ====

  uid  Int
  user User @relation(fields: [uid], references: [uid])
}

model Problem {
  pid Int @id @default(autoincrement())

  title       String
  description String

  private Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  tags ProblemTag[] @relation(references: [id])

  uid     Int?
  creator User? @relation(fields: [uid], references: [uid])

  files               ProblemFile[]
  includedContests    Contest[]     @relation(references: [cid])
  includedProblemSets ProblemSet[]  @relation(references: [sid])
}

model ProblemTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  problems Problem[] @relation(references: [pid])
}

model ProblemSet {
  sid Int @id @default(autoincrement())

  title       String
  description String

  private Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  tags ProblemSetTag[] @relation(references: [id])

  problems Problem[] @relation(references: [pid])

  uid     Int?
  creator User? @relation(fields: [uid], references: [uid])

  includeInHomework TeamHomework[]
}

model ProblemSetTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  problemSets ProblemSet[] @relation(references: [sid])
}

model ProblemFile {
  fid String @id @default(uuid())

  filename  String
  filesize  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  private Boolean @default(true)

  // ==== relations ====

  pid     Int
  problem Problem @relation(fields: [pid], references: [pid])
}

model Contest {
  cid Int @id @default(autoincrement())

  title       String
  description String

  system ContestSystem

  beginTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  tags ContestTag[] @relation(references: [id])

  uid     Int?
  creator User? @relation(fields: [uid], references: [uid])

  problems Problem[] @relation(references: [pid])

  mods      User[] @relation("mod", references: [uid])
  juries    User[] @relation("jury", references: [uid])
  attendees User[] @relation("attendee", references: [uid])
}

model ContestTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  contests Contest[] @relation(references: [cid])
}

model Team {
  tid         String   @id @default(uuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  description String?

  // ==== relations ====
  creator   User           @relation(fields: [creatorId], references: [uid], onDelete: Cascade)
  creatorId Int
  members   TeamMember[]
  homeworks TeamHomework[]
}

model TeamMember {
  mid       String  @id @default(uuid())
  authority String?

  // ==== relations ====
  member   User   @relation(fields: [memberId], references: [uid], onDelete: Cascade)
  memberId Int
  team     Team   @relation(fields: [teamId], references: [tid], onDelete: Cascade)
  teamId   String

  @@unique([memberId, teamId])
}

model TeamHomework {
  hid         String   @id @default(uuid())
  name        String
  ddl         DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?

  // ==== relations ====
  creator     User         @relation(fields: [creatorId], references: [uid], onDelete: Cascade)
  creatorId   Int
  team        Team         @relation(fields: [teamId], references: [tid], onDelete: Cascade)
  teamId      String
  problemsets ProblemSet[] @relation(references: [sid])
}

enum ContestSystem {
  ACM
}

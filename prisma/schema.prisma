// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid Int @id @default(autoincrement())

  email    String @default("")
  avatar   String @default("")
  nickname String @default("")
  username String @unique

  password String

  joinedAt DateTime @default(now())

  // ==== relations ====

  sessions UserSession[]

  createdFiles       File[]
  createdProblems    Problem[]
  createdProblemSets ProblemSet[]
  createdContests    Contest[]

  attendedContests Contest[] @relation("attendee", references: [cid])
  moddedContests   Contest[] @relation("mod", references: [cid])
  juriedContests   Contest[] @relation("jury", references: [cid])

  records Record[]
}

model UserSession {
  session String @id @default(uuid())

  // ==== relations ====

  uid  Int
  user User @relation(fields: [uid], references: [uid])
}

/// 所有文件，包括：
///
/// - 用户上传文件
/// - 题目数据文件
/// - 题目附加文件（pdf 之类的）
model File {
  fid String @id @default(uuid())

  filename  String
  filesize  Int
  mimetype  String   @default("application/octet-stream")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// 是否允许公开下载
  ///
  /// - 对于题目数据文件，如果设置为公开，则可以在题目页面下载
  /// - 对于用户上传文件，如果设置为私密，则只有用户自己可以下载
  private Boolean @default(true)

  // ==== relations ====

  uid  Int?
  user User? @relation(fields: [uid], references: [uid])

  pid     Int?
  problem Problem? @relation(fields: [pid], references: [pid])
}

model Problem {
  pid Int @id @default(autoincrement())

  title       String
  description String

  private Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  tags ProblemTag[] @relation(references: [id])

  uid     Int?
  creator User? @relation(fields: [uid], references: [uid])

  files               File[]
  includedContests    Contest[]    @relation(references: [cid])
  includedProblemSets ProblemSet[] @relation(references: [sid])

  records Record[]
}

model ProblemTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  problems Problem[] @relation(references: [pid])
}

model ProblemSet {
  sid Int @id @default(autoincrement())

  title       String
  description String

  private Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  tags ProblemSetTag[] @relation(references: [id])

  problems Problem[] @relation(references: [pid])

  uid     Int?
  creator User? @relation(fields: [uid], references: [uid])
}

model ProblemSetTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  problemSets ProblemSet[] @relation(references: [sid])
}

model Contest {
  cid Int @id @default(autoincrement())

  title       String
  description String

  system ContestSystem

  beginTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  tags ContestTag[] @relation(references: [id])

  uid     Int?
  creator User? @relation(fields: [uid], references: [uid])

  problems Problem[] @relation(references: [pid])

  mods      User[] @relation("mod", references: [uid])
  juries    User[] @relation("jury", references: [uid])
  attendees User[] @relation("attendee", references: [uid])

  records Record[]
}

model ContestTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  contests Contest[] @relation(references: [cid])
}

enum ContestSystem {
  ACM
}

model Record {
  rid Int @id @default(autoincrement())

  status RecordStatus @default(Pending)
  detail String       @default("")
  points String       @default("[]")

  submittedAt DateTime @default(now())

  // ==== relations ====

  uid  Int
  user User @relation(fields: [uid], references: [uid])

  pid     Int
  problem Problem @relation(fields: [pid], references: [pid])

  cid     Int?
  contest Contest? @relation(fields: [cid], references: [cid])
}

enum RecordStatus {
  Pending
  Judging
  Accepted
  WrongAnswer
  TimeLimitExceeded
  MemoryLimitExceeded
  RuntimeError
  CompileError
  SystemError
  UnknownError
}

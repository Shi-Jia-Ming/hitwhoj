// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid Int @id @default(autoincrement())

  bio      String @default("")
  email    String @default("")
  avatar   String @default("")
  nickname String @default("")
  username String @unique

  password String

  joinedAt DateTime @default(now())

  role SystemUserRole @default(User)

  // ==== relations ====

  sessions UserSession[]

  createdFiles       File[]
  createdProblems    Problem[]
  createdProblemSets ProblemSet[]
  createdContests    Contest[]

  attendedContests Contest[] @relation("attendee", references: [cid])
  moddedContests   Contest[] @relation("mod", references: [cid])
  juriedContests   Contest[] @relation("jury", references: [cid])


  createdTeam Team[]
  teamMember  TeamMember[]
  // createdHomework TeamHomework[]

  records Record[]
  Comment Comment[]
  Reply   Reply[]
}

enum SystemUserRole {
  Su
  Admin
  User
  Guest

}

model UserSession {
  session String @id @default(uuid())

  // ==== relations ====

  uid  Int
  user User @relation(fields: [uid], references: [uid])
}

/// 所有文件，包括：
///
/// - 用户上传文件
/// - 题目数据文件
/// - 题目附加文件（pdf 之类的）
model File {
  fid String @id @default(uuid())

  filename  String
  filesize  Int
  mimetype  String   @default("application/octet-stream")
  createdAt DateTime @default(now())

  /// 是否允许公开下载
  ///
  /// - 对于题目数据文件，如果设置为公开，则可以在题目页面下载
  /// - 对于用户上传文件，如果设置为私密，则只有用户自己可以下载
  ///
  /// 注意即使用户设置某文件为公开，其他用户也无法查看到该用户上传的所有公开文件
  private Boolean @default(true)

  // ==== relations ====

  uid  Int?
  user User? @relation(fields: [uid], references: [uid])

  pid     Int?
  problem Problem? @relation(fields: [pid], references: [pid])
}

model Problem {
  pid Int @id @default(autoincrement())

  title       String
  description String

  private Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  tags ProblemTag[] @relation(references: [id])

  uid  Int
  user User @relation(fields: [uid], references: [uid])

  cid     Int?
  contest Contest? @relation("belong", fields: [cid], references: [cid])

  files               File[]
  includedContests    Contest[]    @relation("contain", references: [cid])
  includedProblemSets ProblemSet[] @relation(references: [sid])

  records Record[]
}

model ProblemTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  problems Problem[] @relation(references: [pid])
}

model ProblemSet {
  sid Int @id @default(autoincrement())

  title       String
  description String

  private Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  tags ProblemSetTag[] @relation(references: [id])

  problems Problem[] @relation(references: [pid])
  // includeInHomework TeamHomework[]
  uid      Int
  user     User      @relation(fields: [uid], references: [uid])

}

model ProblemSetTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  problemSets ProblemSet[] @relation(references: [sid])
}

model Contest {
  cid Int @id @default(autoincrement())

  title       String
  description String

  system ContestSystem

  beginTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  tags ContestTag[] @relation(references: [id])

  uid  Int
  user User @relation(fields: [uid], references: [uid])

  problems Problem[] @relation("contain", references: [pid])

  mods      User[] @relation("mod", references: [uid])
  juries    User[] @relation("jury", references: [uid])
  attendees User[] @relation("attendee", references: [uid])

  records           Record[]
  exclusiveProblems Problem[] @relation("belong")

  team Team? @relation(fields: [tid], references: [tid])
  tid  Int?
}

model ContestTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  contests Contest[] @relation(references: [cid])
}

model Team {
  tid         Int      @id @default(autoincrement())
  name        String   @unique
  createdAt   DateTime @default(now())
  description String?

  // ==== relations ====
  creator   User         @relation(fields: [creatorId], references: [uid], onDelete: Cascade)
  creatorId Int
  members   TeamMember[]
  homeworks Contest[]
}

model TeamMember {
  authority String?

  // ==== relations ====
  member   User @relation(fields: [memberId], references: [uid], onDelete: Cascade)
  memberId Int
  team     Team @relation(fields: [teamId], references: [tid], onDelete: Cascade)
  teamId   Int

  @@unique([memberId, teamId])
}

enum ContestSystem {
  /// ACM 赛制，每次错误提交都有罚时，榜单实时显示，最后一小时封榜，最后成绩以过题数、过题时间为准
  ACM
  /// OI 赛制，比赛结束前都无法查看提交结果和榜单，最后成绩以最后一次提交为准
  OI
  /// IOI 赛制，提交结果和榜单实时显示，最后成绩以最后一次提交为准
  IOI
  /// 作业赛制，我不知道具体是什么操作，反正就是比赛
  Homework
}

model Record {
  rid Int @id @default(autoincrement())

  /// 评测状态（结果）
  status   String @default("Pending")
  /// 得分
  score    Float  @default(0)
  /// 评测信息（错误信息）
  message  String @default("")
  /// 评测总时间 (ms)
  time     Int    @default(0)
  /// 评测最大内存 (byte)
  memory   Int    @default(0)
  /// 具体每一个测试点的评测结果，由于结构过于复杂，这里直接用 JSON 保存
  subtasks String @default("[]")

  /// 提交语言，一般就是源文件的后缀名
  language    String
  submittedAt DateTime @default(now())

  // ==== relations ====

  submitter User     @relation(fields: [submitterId], references: [uid])
  problem   Problem  @relation(fields: [problemId], references: [pid])
  contest   Contest? @relation(fields: [contestId], references: [cid])

  submitterId Int
  problemId   Int
  contestId   Int?
}

model CommentTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  comments Comment[] @relation(references: [id])
}

model Comment {
  id Int @id @default(autoincrement())

  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // === relations ===

  uid  Int
  user User @relation(fields: [uid], references: [uid])

  tags CommentTag[] @relation(references: [id])

  replies Reply[]
}

model Reply {
  id Int @id @default(autoincrement())

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  uid  Int
  user User @relation(fields: [uid], references: [uid])
}

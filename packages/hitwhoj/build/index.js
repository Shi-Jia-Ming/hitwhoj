var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf,
  __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) =>
  key in obj
    ? __defProp(obj, key, {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value,
      })
    : (obj[key] = value);
var __esm = (fn, res) =>
  function () {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])((fn = 0))), res;
  };
var __export = (target, all5) => {
    for (var name in all5)
      __defProp(target, name, { get: all5[name], enumerable: !0 });
  },
  __copyProps = (to, from8, except, desc) => {
    if ((from8 && typeof from8 == "object") || typeof from8 == "function")
      for (let key of __getOwnPropNames(from8))
        !__hasOwnProp.call(to, key) &&
          key !== except &&
          __defProp(to, key, {
            get: () => from8[key],
            enumerable:
              !(desc = __getOwnPropDesc(from8, key)) || desc.enumerable,
          });
    return to;
  };
var __toESM = (mod, isNodeMode, target) => (
    (target = mod != null ? __create(__getProtoOf(mod)) : {}),
    __copyProps(
      isNodeMode || !mod || !mod.__esModule
        ? __defProp(target, "default", { value: mod, enumerable: !0 })
        : target,
      mod
    )
  ),
  __toCommonJS = (mod) =>
    __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var __publicField = (obj, key, value) => (
    __defNormalProp(obj, typeof key != "symbol" ? key + "" : key, value), value
  ),
  __accessCheck = (obj, member, msg) => {
    if (!member.has(obj)) throw TypeError("Cannot " + msg);
  };
var __privateGet = (obj, member, getter) => (
    __accessCheck(obj, member, "read from private field"),
    getter ? getter.call(obj) : member.get(obj)
  ),
  __privateAdd = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  },
  __privateSet = (obj, member, value, setter) => (
    __accessCheck(obj, member, "write to private field"),
    setter ? setter.call(obj, value) : member.set(obj, value),
    value
  );
var __privateMethod = (obj, member, method) => (
  __accessCheck(obj, member, "access private method"), method
);

// app/utils/wasi.ts
var wasi_exports = {};
__export(wasi_exports, {
  runCode: () => runCode,
});
async function runCode(code3, input, language2) {
  switch ((console.log(code3, input, language2), language2)) {
    case "c":
      return await runCCode(code3, input);
    case "cpp":
      return await runCppCode(code3, input);
    case "python":
      return await runPythonCode(code3, input);
    default:
      throw new Error("Language not supported");
  }
}
async function extractContents(url) {
  let buffer2 = await fetch(url).then((res) => res.arrayBuffer());
  wasmfs.volume.mkdirpSync(url);
  let files = await (0, import_js_untar.default)(buffer2);
  for (let file of files) {
    let filepath = `${url}/${file.name}`;
    if (file.type === "5") wasmfs.volume.mkdirpSync(filepath);
    else if (file.type === "0")
      wasmfs.volume.mkdirpSync(
        filepath.substring(0, filepath.lastIndexOf("/"))
      ),
        wasmfs.volume.writeFileSync(filepath, new Uint8Array(file.buffer));
    else throw new Error("unexpected file");
  }
}
async function preloadPackage(url) {
  let config = wasmfs.volume.readFileSync(`${url}/wapm.toml`),
    decoder = new TextDecoder().decode(config.buffer),
    cfg = import_toml.default.parse(decoder),
    modules = /* @__PURE__ */ new Map();
  for (let { name, source: source2 } of cfg.module) {
    let filepath = `${url}/${source2}`,
      wasm = wasmfs.volume.readFileSync(filepath),
      module2 = await WebAssembly.compile(
        await (0, import_wasm_transformer.lowerI64Imports)(wasm)
      );
    modules.set(name, module2);
  }
  let preopens = {};
  for (let [name, path2] of Object.entries(cfg.fs))
    preopens[name] = `${url}/${path2}`;
  for (let { name, module: module2 } of cfg.command)
    commands.set(name, { module: modules.get(module2), preopens });
}
async function preload(url) {
  preloaded.includes(url) ||
    (preloaded.push(url),
    await extractContents(url),
    await preloadPackage(url));
}
async function runModule(module2, preopens, args, stdin) {
  let wasi = new import_wasi.WASI({
      args,
      env: {},
      bindings: {
        ...import_browser.default,
        fs: wasmfs.fs,
      },
      preopens: {
        ".": "/sandbox",
        ...preopens,
      },
    }),
    instance = await WebAssembly.instantiate(module2, {
      ...wasi.getImports(module2),
    });
  (wasmfs.volume.fds[0].position = 0),
    (wasmfs.volume.fds[1].position = 0),
    (wasmfs.volume.fds[2].position = 0),
    wasmfs.fs.writeFileSync("/dev/stdin", stdin),
    console.log(`running ${args.join(" ")}`);
  let exit3 = 0;
  try {
    wasi.start(instance);
  } catch (e) {
    e.message.startsWith("WASI Exit error: ")
      ? (exit3 = e.code)
      : (console.error(e), (exit3 = 114514));
  }
  let stdout = wasmfs.fs.readFileSync("/dev/stdout", "utf8"),
    stderr = wasmfs.fs.readFileSync("/dev/stderr", "utf8");
  return (
    wasmfs.fs.writeFileSync("/dev/stdout", ""),
    wasmfs.fs.writeFileSync("/dev/stderr", ""),
    console.log(exit3, stdout, stderr),
    { exit: exit3, stdout, stderr }
  );
}
async function runCommand(command, stdin = "") {
  let args = command.split(" "),
    { module: module2, preopens } = commands.get(args[0]);
  return await runModule(module2, preopens, args, stdin);
}
async function runCCode(code3, stdin) {
  await preload(CLANG_PACKAGE_URL),
    wasmfs.volume.writeFileSync("/sandbox/main.c", code3);
  for (let command of [
    "clang -cc1 -Werror -triple wasm32-unkown-wasi -isysroot /sys -internal-isystem /sys/include -emit-obj -o ./main.o ./main.c",
    "wasm-ld -L/sys/lib/wasm32-wasi /sys/lib/wasm32-wasi/crt1.o ./main.o -lc -o ./main.wasm",
  ]) {
    let { exit: exit3, stderr } = await runCommand(command);
    if (exit3 !== 0) return stderr || `Program exited with code ${exit3}`;
  }
  let wasm = wasmfs.volume.readFileSync("/sandbox/main.wasm"),
    module2 = await WebAssembly.compile(
      await (0, import_wasm_transformer.lowerI64Imports)(wasm)
    ),
    program = await runModule(module2, {}, ["/sandbox/main.wasm"], stdin);
  return program.exit
    ? `${program.stdout}
Program exited with code ${program.exit}`.trim()
    : program.stdout;
}
async function runCppCode(code3, stdin) {
  await preload(RUNNO_PACKAGE_URL),
    wasmfs.volume.writeFileSync("/sandbox/program.cpp", code3);
  for (let command of [
    "runno-clang -cc1 -Werror -emit-obj -disable-free -isysroot /sys -internal-isystem /sys/include/c++/v1 -internal-isystem /sys/include -internal-isystem /sys/lib/clang/8.0.1/include -ferror-limit 4 -fmessage-length 80 -O2 -o ./program.o -x c++ ./program.cpp",
    "runno-wasm-ld --no-threads --export-dynamic -z stack-size=1048576 -L/sys/lib/wasm32-wasi /sys/lib/wasm32-wasi/crt1.o ./program.o -lc -lc++ -lc++abi -o ./program.wasm",
  ]) {
    let { exit: exit3, stderr } = await runCommand(command);
    if (exit3 !== 0) return stderr || `Program exited with code ${exit3}`;
  }
  let wasm = wasmfs.volume.readFileSync("/sandbox/program.wasm"),
    module2 = await WebAssembly.compile(
      await (0, import_wasm_transformer.lowerI64Imports)(wasm)
    ),
    program = await runModule(module2, {}, ["/sandbox/program.wasm"], stdin);
  return program.exit
    ? `${program.stdout}
Program exited with code ${program.exit}`.trim()
    : program.stdout;
}
async function runPythonCode(code3, stdin) {
  await preload(PYTHON_PACKAGE_URL),
    wasmfs.volume.writeFileSync("/sandbox/main.py", code3);
  let { exit: exit3, stdout } = await runCommand(
    "python ./main.py",
    stdin +
      `
`
  );
  return exit3
    ? `${stdout}
Program exited with code ${exit3}`.trim()
    : stdout;
}
var import_wasi,
  import_browser,
  import_wasmfs,
  import_wasm_transformer,
  import_js_untar,
  import_toml,
  CLANG_PACKAGE_URL,
  RUNNO_PACKAGE_URL,
  PYTHON_PACKAGE_URL,
  wasmfs,
  preloaded,
  commands,
  init_wasi = __esm({
    "app/utils/wasi.ts"() {
      "use strict";
      (import_wasi = require("@wasmer/wasi")),
        (import_browser = __toESM(
          require("@wasmer/wasi/lib/bindings/browser")
        )),
        (import_wasmfs = require("@wasmer/wasmfs")),
        (import_wasm_transformer = require("@wasmer/wasm-transformer")),
        (import_js_untar = __toESM(require("js-untar"))),
        (import_toml = __toESM(require("toml")));
      (CLANG_PACKAGE_URL = "/wapm/clang-0.1.0.tar"),
        (RUNNO_PACKAGE_URL = "/wapm/runno-clang-0.1.2.tar"),
        (PYTHON_PACKAGE_URL = "/wapm/python-0.1.0.tar"),
        (wasmfs = new import_wasmfs.WasmFs());
      wasmfs.volume.mkdirSync("/sandbox");
      (preloaded = new Array()), (commands = /* @__PURE__ */ new Map());
    },
  });

// <stdin>
var stdin_exports = {};
__export(stdin_exports, {
  assets: () => assets_manifest_default,
  assetsBuildDirectory: () => assetsBuildDirectory,
  entry: () => entry,
  publicPath: () => publicPath,
  routes: () => routes,
});
module.exports = __toCommonJS(stdin_exports);

// app/entry.server.tsx
var entry_server_exports = {};
__export(entry_server_exports, {
  default: () => handleRequest,
});
var import_server = require("react-dom/server"),
  import_react = require("@remix-run/react"),
  import_jsx_runtime = require("react/jsx-runtime");
function handleRequest(
  request,
  responseStatusCode,
  responseHeaders,
  remixContext
) {
  let markup = (0, import_server.renderToString)(
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react.RemixServer, {
      context: remixContext,
      url: request.url,
    })
  );
  return (
    responseHeaders.set("Content-Type", "text/html"),
    new Response(`<!DOCTYPE html>${markup}`, {
      status: responseStatusCode,
      headers: responseHeaders,
    })
  );
}

// app/root.tsx
var root_exports = {};
__export(root_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => App,
  links: () => links,
  loader: () => loader,
});
var import_react7 = require("react"),
  import_node = require("@remix-run/node"),
  import_react8 = require("@remix-run/react");

// app/utils/server/db.server.ts
var import_client = require("@prisma/client"),
  db;
(db = new import_client.PrismaClient()), db.$connect();

// app/utils/permission/role/room.ts
var ChatRoomUser = class {
  user;
  roomId;
  role = null;
  constructor(user, roomId) {
    (this.user = user), (this.roomId = roomId);
  }
  async initialize() {
    if (this.role === null) {
      if (this.user.userId && this.roomId) {
        let member = await db.chatRoomUser.findUnique({
          where: {
            roomId_userId: {
              roomId: this.roomId,
              userId: this.user.userId,
            },
          },
          select: { role: !0 },
        });
        this.role = (member == null ? void 0 : member.role) ?? "Guest";
      }
      this.role ?? (this.role = "Guest");
    }
    return { role: this.role };
  }
  async hasPermission(...permissions) {
    let { role } = await this.initialize(),
      fallback = await this.user.hasPermission(
        ...permissions.map(({ fallback: fallback2 }) => fallback2)
      );
    return this.roomId
      ? permissions.map((permission, index2) => {
          if (fallback[index2]) return !0;
          switch (role) {
            case "Owner":
              return permission.owner;
            case "Admin":
              return permission.admin;
            case "Member":
              return permission.member;
            case "Guest":
              return permission.guest;
            default:
              return !1;
          }
        })
      : fallback;
  }
  async checkPermission(...permissions) {
    if ((await this.hasPermission(...permissions)).some((perm) => !perm))
      throw new Response("Permission denied", { status: 403 });
  }
};

// app/utils/permission/role/contest.ts
var ContestUser = class {
  team;
  contestId;
  role = null;
  constructor(team, contestId) {
    (this.team = team), (this.contestId = contestId);
  }
  async initialize() {
    if (this.role === null) {
      if (this.contestId && this.team.user.userId) {
        let participant = await db.contestParticipant.findUnique({
          where: {
            contestId_userId: {
              contestId: this.contestId,
              userId: this.team.user.userId,
            },
          },
          select: { role: !0 },
        });
        this.role =
          (participant == null ? void 0 : participant.role) ?? "Guest";
      }
      this.role ?? (this.role = "Guest");
    }
    return { role: this.role };
  }
  async hasPermission(...permissions) {
    let { role } = await this.initialize(),
      fallback = await this.team.hasPermission(
        ...permissions.map(({ fallback: fallback2 }) => fallback2)
      );
    return this.contestId
      ? permissions.map((permission, index2) => {
          if (fallback[index2]) return !0;
          switch (role) {
            case "Mod":
              return permission.mod;
            case "Jury":
              return permission.jury;
            case "Contestant":
              return permission.contestant;
            case "Guest":
              return permission.guest;
            default:
              return !1;
          }
        })
      : fallback;
  }
  async checkPermission(...permissions) {
    if ((await this.hasPermission(...permissions)).some((perm) => !perm))
      throw new Response("Permission denied", { status: 403 });
  }
};

// app/utils/permission/role/team.ts
var TeamUser = class {
  user;
  teamId;
  role = null;
  constructor(user, teamId) {
    (this.user = user), (this.teamId = teamId);
  }
  contest(contestId) {
    return new ContestUser(this, contestId);
  }
  async initialize() {
    if (this.role === null) {
      if (this.user.userId && this.teamId) {
        let member = await db.teamMember.findUnique({
          where: {
            userId_teamId: {
              userId: this.user.userId,
              teamId: this.teamId,
            },
          },
          select: { role: !0 },
        });
        this.role = (member == null ? void 0 : member.role) ?? "Guest";
      }
      this.role ?? (this.role = "Guest");
    }
    return { role: this.role };
  }
  async hasPermission(...permissions) {
    let { role } = await this.initialize(),
      fallback = await this.user.hasPermission(
        ...permissions.map(({ fallback: fallback2 }) => fallback2)
      );
    return this.teamId
      ? permissions.map((permission, index2) => {
          if (fallback[index2]) return !0;
          switch (role) {
            case "Owner":
              return permission.owner;
            case "Admin":
              return permission.admin;
            case "Member":
              return permission.member;
            case "Guest":
              return permission.guest;
            default:
              return !1;
          }
        })
      : fallback;
  }
  async checkPermission(...permissions) {
    if ((await this.hasPermission(...permissions)).some((perm) => !perm))
      throw new Response("Permission denied", { status: 403 });
  }
};

// app/utils/permission/role/user.ts
var User = class {
  userId;
  role = null;
  privilege = null;
  constructor(userId) {
    this.userId = userId;
  }
  async initialize() {
    if (this.role === null || this.privilege === null) {
      if (this.userId) {
        let user = await db.user.findUnique({
          where: { id: this.userId },
          select: { role: !0, privilege: !0 },
        });
        (this.role = (user == null ? void 0 : user.role) ?? "Guest"),
          (this.privilege = (user == null ? void 0 : user.privilege) ?? 0);
      }
      this.role ?? (this.role = "Guest"),
        this.privilege ?? (this.privilege = 0);
    }
    return { role: this.role, privilege: this.privilege };
  }
  async hasPermission(...permissions) {
    let { role } = await this.initialize();
    return permissions.map((perm) => {
      switch (role) {
        case "Root":
          return perm.root;
        case "Admin":
          return perm.admin;
        case "User":
          return perm.user;
        case "Guest":
          return perm.guest;
        default:
          return !1;
      }
    });
  }
  async checkPermission(...permissions) {
    if ((await this.hasPermission(...permissions)).some((value) => !value))
      throw new Response("\u60A8\u7684\u6743\u9650\u4E0D\u8DB3", {
        status: 403,
      });
  }
  async hasPrivilege(...privileges) {
    let { privilege } = await this.initialize();
    return privileges.map((priv) => (priv & privilege) === priv);
  }
  async checkPrivilege(...privileges) {
    if ((await this.hasPrivilege(...privileges)).some((value) => !value))
      throw new Response("\u60A8\u7684\u6743\u529B\u4E0D\u8DB3", {
        status: 403,
      });
  }
  team(teamId) {
    return new TeamUser(this, teamId);
  }
  room(roomId) {
    return new ChatRoomUser(this, roomId);
  }
};

// app/utils/cookies.ts
function parseCookie(cookie) {
  let map3 = /* @__PURE__ */ new Map(),
    list3 = cookie.split(";");
  for (let item of list3) {
    let [key, value] = item.split("=");
    map3.set(key.trim(), value);
  }
  return map3;
}
function getCookie(request, name) {
  return parseCookie(request.headers.get("Cookie") ?? "").get(name);
}
function commitCookie(name, value) {
  return `${name}=${value}; Path=/; HttpOnly; SameSite=Strict; Expires=Fri, 31 Dec 9999 23:59:59 GMT`;
}
function destroyCookie(name) {
  return `${name}=; Path=/; HttpOnly; SameSite=Strict; Expires=Thu, 01 Jan 1970 00:00:00 GMT`;
}

// app/utils/sessions.ts
var SESSION_COOKIE_NAME = "session";
function getSession(request) {
  return getCookie(request, SESSION_COOKIE_NAME);
}
async function commitSession(userId) {
  let { session } = await db.userSession.create({
    data: { userId },
  });
  return commitCookie(SESSION_COOKIE_NAME, session);
}
async function destroySession(session) {
  return (
    await db.userSession.delete({
      where: { session },
    }),
    destroyCookie(SESSION_COOKIE_NAME)
  );
}

// app/utils/permission.ts
async function findRequestUser(request) {
  let session = getSession(request);
  if (!session) return new User(null);
  let result = await db.userSession.findUnique({
    where: { session },
    select: { userId: !0 },
  });
  return result ? new User(result.userId) : new User(null);
}

// app/utils/db/user.ts
var selectUserData = {
  id: !0,
  username: !0,
  nickname: !0,
  role: !0,
  avatar: !0,
  bio: !0,
  premium: !0,
  studentId: !0,
};

// app/utils/eventSource.ts
var import_rxjs = require("rxjs"),
  import_rxjs2 = require("rxjs");
function createEventSource(request, observable2) {
  let body = new ReadableStream({
      async start(c2) {
        let subscription = (0, import_rxjs2.merge)(
          observable2.pipe(
            (0, import_rxjs2.map)(
              (item) => `data: ${JSON.stringify(item)}

`
            )
          ),
          (0, import_rxjs2.interval)(3e3).pipe(
            (0, import_rxjs2.map)(
              () => `: kawaii is justice

`
            )
          )
        ).subscribe({
          next: (item) => c2.enqueue(item),
          error: (err) => c2.error(err),
        });
        request.signal.onabort = () => {
          subscription.unsubscribe(), c2.close();
        };
      },
    }),
    headers = new Headers();
  return (
    headers.set("Cache-Control", "no-store, no-transform"),
    headers.set("Content-Type", "text/event-stream"),
    headers.set("X-Accel-Buffering", "no"),
    new Response(body, { headers, status: 200 })
  );
}
function fromEventSource(url) {
  return new import_rxjs.Observable((observer8) => {
    let eventSource = new EventSource(url);
    eventSource.addEventListener("message", ({ data: data2 }) => {
      observer8.next(JSON.parse(data2));
    }),
      eventSource.addEventListener("error", (event) => {
        observer8.error(event), console.error(event);
      }),
      observer8.add(() => eventSource.close()),
      window.addEventListener("beforeunload", () => eventSource.close());
  });
}

// app/root.tsx
var import_hi2 = require("react-icons/hi"),
  import_ai = require("react-icons/ai"),
  import_fa = require("react-icons/fa"),
  import_si = require("react-icons/si");

// package.json
var version = "v0.0.1-alpha.20230310";

// app/styles/app.css
var app_default = "/build/_assets/app-WDBYSYDR.css";

// ../../node_modules/katex/dist/katex.css
var katex_default = "/build/_assets/katex-R7R4CHAH.css";

// app/utils/theme.ts
var import_signals_react = require("@preact/signals-react"),
  themes = [
    "light",
    "dark",
    "cupcake",
    "bumblebee",
    "emerald",
    "corporate",
    "synthwave",
    "retro",
    "cyberpunk",
    "valentine",
    "halloween",
    "garden",
    "forest",
    "aqua",
    "lofi",
    "pastel",
    "fantasy",
    "wireframe",
    "black",
    "luxury",
    "dracula",
    "cmyk",
    "autumn",
    "business",
    "acid",
    "lemonade",
    "night",
    "coffee",
    "winter",
  ],
  darkThemes = [
    "dark",
    "synthwave",
    "halloween",
    "forest",
    "aqua",
    "black",
    "luxury",
    "dracula",
    "business",
    "night",
    "coffee",
  ],
  themeSignal = (0, import_signals_react.signal)("light");
function t(str) {
  let colors = str.split(" ").map((s2) => `#${s2}`);
  return {
    primary: colors[0],
    primaryContent: colors[1],
    secondary: colors[2],
    secondaryContent: colors[3],
    base100: colors[4],
    base200: colors[5],
    base300: colors[6],
    baseContent: colors[7],
  };
}
var defaultThemeColor = {
  light: t("570df8 ffffff f000b8 ffffff ffffff f2f2f2 e5e6e6 1f2937"),
  dark: t("6419e6 ffffff d926a9 ffffff 2a303c 242933 1f242d a6adba"),
  cupcake: t("65c3c8 003a3d ef9fbc 52001e faf7f5 efeae6 e7e2df 291334"),
  bumblebee: t("e0a82e 18182f f9d72f 18182f ffffff e6e6e6 cfcfcf 333333"),
  emerald: t("66cc8a 233e31 377cfb f9fafb ffffff e6e6e6 cfcfcf 333c4d"),
  corporate: t("4b6bfb dbe2ff 7b92b2 00193d ffffff e6e6e6 cfcfcf 181a2a"),
  synthwave: t("e779c1 47002e 58c7f3 003042 2d1b69 28185d 251655 f9f7fd"),
  retro: t("ef9995 282425 a4cbb4 282425 e4d8b4 d2c59d c6b386 282425"),
  cyberpunk: t("ff7598 4d0013 75d1f0 003647 ffee00 e6d600 d1c300 333000"),
  valentine: t("e96d7b 420008 a992f7 12004d f0d6e8 e3b5d5 d897c5 632c3b"),
  halloween: t("f28c18 131616 6d3a9c e1c2ff 212121 1f1f1f 1a1a1a d4d4d4"),
  garden: t("5c7f67 c7ffd9 ecf4e7 24321a e9e7e7 d3cfcf bfbaba 100f0f"),
  forest: t("1eb854 c2ffd7 1fd65f 003312 171212 141010 141010 d7cccc"),
  aqua: t("09e9f1 005557 966fb3 ebd1ff 345ca8 2f5498 2a4b89 c7dbff"),
  lofi: t("0d0d0d ffffff 1a1919 ffffff ffffff f2f2f2 e6e5e5 000000"),
  pastel: t("d1c1d7 341141 f6cbd1 5c000c ffffff f9fafb d1d5db 333333"),
  fantasy: t("6e0b75 fab3ff 007ebd bde9ff ffffff e6e6e6 cfcfcf 1f2937"),
  wireframe: t("b8b8b8 242424 b8b8b8 242424 ffffff ededed dedede 333333"),
  black: t("343232 d8d4d4 343232 d8d4d4 000000 0d0d0d 1a1919 cccccc"),
  luxury: t("ffffff 333333 152747 adcbff 09090b 171618 2e2d2f dca54c"),
  dracula: t("ff7ac6 4d002b bf95f9 220052 272935 252732 21222c f8f8f2"),
  cmyk: t("44adee 00263d e9498c ffd6e7 ffffff e6e6e6 cfcfcf 333333"),
  autumn: t("8c0327 ffb8cb d75050 ffd6d6 f2f2f2 d9d9d9 c4c4c4 303030"),
  business: t("1c4f82 b8dbff 7d919b 002538 212121 1c1c1c 1a1a1a d4d4d4"),
  acid: t("ff00f2 ffccfc ff7300 331700 fafafa e0e0e0 c9c9c9 333333"),
  lemonade: t("529b03 dcffb8 e9e92f 383800 ffffff e6e6e6 cfcfcf 333333"),
  night: t("3abff8 002b3d 828df8 00084d 0f1729 0e1525 0c1322 b3c5ef"),
  coffee: t("dc944c 3d1f00 263f40 bbf0f2 211720 1e151d 1b131a 746d63"),
  winter: t("057aff cce4ff 463aa1 cdc7ff ffffff f0f6ff e2e8f4 394e6a"),
};

// app/src/user/UserAvatar.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function UserAvatar({ user, className, ...props }) {
  let name = user.nickname || user.username;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
    className: `avatar placeholder rounded-box flex items-center justify-center overflow-hidden ${
      className ?? "h-16 w-16 text-3xl"
    }`,
    ...props,
    children: user.avatar
      ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("img", {
          src: user.avatar,
          alt: name,
        })
      : /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
          className: "text-base-content",
          children: name.charAt(0),
        }),
  });
}

// app/assets/ad.jpg
var ad_default = "/build/_assets/ad-S4U2ATQN.jpg";

// app/assets/hitwh.png
var hitwh_default = "/build/_assets/hitwh-HX2V6R42.png";

// app/assets/qq.svg
var qq_default = "/build/_assets/qq-TKHMW4ZN.svg";

// app/utils/hooks.ts
var import_signals_react2 = require("@preact/signals-react"),
  import_react2 = require("@remix-run/react"),
  import_react3 = require("react");
function useConvertToSignal(t2) {
  let signal4 = (0, import_signals_react2.useSignal)(t2);
  return (
    (0, import_react3.useEffect)(() => {
      signal4.value = t2;
    }, [t2]),
    signal4
  );
}
function useSignalTransition() {
  let transition = (0, import_react2.useTransition)();
  return {
    type: transition.type,
    state: transition.state,
    location: transition.location,
    submission: transition.submission,
    isRunning:
      transition.type === "actionRedirect" ||
      transition.type === "actionReload" ||
      transition.type === "actionSubmission" ||
      transition.type === "loaderSubmission" ||
      transition.type === "loaderSubmissionRedirect" ||
      transition.type === "fetchActionRedirect",
    actionSuccess:
      transition.type === "actionReload" ||
      transition.type === "actionRedirect",
  };
}
function useSignalFetcher() {
  let fetcher = (0, import_react2.useFetcher)();
  return {
    ...fetcher,
    isRunning:
      fetcher.type === "actionRedirect" ||
      fetcher.type === "actionReload" ||
      fetcher.type === "actionSubmission",
    actionSuccess:
      fetcher.type === "actionRedirect" || fetcher.type === "actionReload",
  };
}
function useSignalLoaderData() {
  let data2 = (0, import_react2.useLoaderData)();
  return useConvertToSignal(data2);
}
function useSynchronized(compute) {
  let computed = (0, import_signals_react2.useComputed)(compute),
    signal4 = (0, import_signals_react2.useSignal)(computed.value);
  return (
    (0, import_signals_react2.useSignalEffect)(() => {
      signal4.value = computed.value;
    }),
    signal4
  );
}

// app/utils/toast.ts
var import_signals_react3 = require("@preact/signals-react"),
  toastSignal = (0, import_signals_react3.signal)([]),
  addToast = (toast) => {
    (toastSignal.value = [...toastSignal.value, toast]),
      setTimeout(() => {
        toastSignal.value = toastSignal.value.slice(1);
      }, 5e3);
  },
  info = (message) => addToast({ type: "info", message }),
  success = (message) => addToast({ type: "success", message }),
  error = (message) => addToast({ type: "error", message }),
  warning = (message) => addToast({ type: "warning", message });
function useToasts() {
  return { info, success, error, warning };
}

// app/root.tsx
var import_signals_react5 = require("@preact/signals-react");

// app/utils/context.ts
var import_signals_react4 = require("@preact/signals-react"),
  import_react4 = require("react");
function useContextAsSignal(context) {
  let value = (0, import_react4.useContext)(context),
    signal4 = (0, import_signals_react4.useSignal)(value);
  return (
    (0, import_react4.useEffect)(() => {
      signal4.value = value;
    }, [value]),
    signal4
  );
}
var menuSignal = (0, import_signals_react4.signal)(!0),
  UserContext = (0, import_react4.createContext)(null),
  ThemeContext = (0, import_react4.createContext)("light");
function useUser() {
  return useContextAsSignal(UserContext);
}
function useTheme() {
  return useContextAsSignal(ThemeContext);
}

// app/src/ErrorBoundary.tsx
var import_react5 = require("@remix-run/react"),
  import_jsx_runtime = require("react/jsx-runtime");
function ErrorBoundary({ error: error2 }) {
  let navigate = (0, import_react5.useNavigate)();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
    className: "grid h-full w-full place-items-center",
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
      className:
        "not-prose card card-compact bg-error text-error-content w-96 shadow-lg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("figure", {
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("img", {
            src: "/error.png",
            alt: "error",
          }),
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "card-body",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
              className: "card-title",
              children:
                "\u7F51\u7AD9\u8C8C\u4F3C\u51FA\u73B0\u4E86\u4E00\u4E9B\u5F02\u5E38",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
              children: error2.message,
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
              children:
                "\u60A8\u53EF\u4EE5\u5C1D\u8BD5\u5411\u7BA1\u7406\u5458\u53CD\u9988\u6B64\u95EE\u9898",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "card-actions justify-end",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                className: "btn btn-primary",
                onClick: () => navigate(-1),
                children: "\u8FD4\u56DE\u4E0A\u4E00\u9875",
              }),
            }),
          ],
        }),
      ],
    }),
  });
}

// app/src/CatchBoundary.tsx
var import_react6 = require("@remix-run/react"),
  import_hi = require("react-icons/hi"),
  import_jsx_runtime = require("react/jsx-runtime");
function CatchBoundary() {
  let caught = (0, import_react6.useCatch)();
  switch (caught.status) {
    case 400:
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
        className: "not-prose alert alert-error mt-4",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_hi.HiOutlineXCircle,
              {
                className: "h-6 w-6",
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h3", {
                  className: "font-bold",
                  children: "\u9519\u8BEF",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "text-xs",
                  children: caught.data,
                }),
              ],
            }),
          ],
        }),
      });
    case 401:
      return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "not-prose alert alert-error mt-4",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_hi.HiOutlineXCircle,
                {
                  className: "h-6 w-6",
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h3", {
                    className: "font-bold",
                    children: "\u672A\u767B\u5F55",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                    className: "text-xs",
                    children:
                      "\u8BF7\u767B\u5F55\u540E\u518D\u8FDB\u884C\u5C1D\u8BD5",
                  }),
                ],
              }),
            ],
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react6.Link, {
            className: "btn btn-outline",
            to: "/login",
            children: "\u767B\u5F55",
          }),
        ],
      });
    case 403:
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
        className: "not-prose alert alert-error mt-4",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_hi.HiOutlineXCircle,
              {
                className: "h-6 w-6",
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h3", {
                  className: "font-bold",
                  children: "\u6743\u9650\u4E0D\u8DB3",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "text-xs",
                  children: caught.data,
                }),
              ],
            }),
          ],
        }),
      });
    case 404:
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
        className: "not-prose alert alert-error mt-4",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_hi.HiOutlineXCircle,
              {
                className: "h-6 w-6",
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h3", {
                  className: "font-bold",
                  children: "\u672A\u627E\u5230",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "text-xs",
                  children: caught.data,
                }),
              ],
            }),
          ],
        }),
      });
    default:
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
        className: "not-prose alert alert-error mt-4",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_hi.HiOutlineXCircle,
              {
                className: "h-6 w-6",
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h3", {
                  className: "font-bold",
                  children: [caught.status, " ", caught.statusText],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "text-xs",
                  children: caught.data,
                }),
              ],
            }),
          ],
        }),
      });
  }
}

// app/root.tsx
var import_jsx_runtime = require("react/jsx-runtime"),
  links = () => [
    { rel: "stylesheet", href: app_default },
    { rel: "stylesheet", href: katex_default },
    { rel: "preload", href: ad_default, as: "image" },
    { rel: "preload", href: hitwh_default, as: "image" },
    { rel: "preload", href: qq_default, as: "image" },
  ],
  qqlink =
    "https://qm.qq.com/cgi-bin/qm/qr?k=uFHY05vPwIamUXG6L-xDQvhkA0acwZqA&jump_from=webapi&authKey=96ylLScWBoTxF6zMOsP7wdIbC/7PN1bMs5T74AIOpqeBE6h4NAGnYx/ngkxkVhyx";
async function loader({ request }) {
  let theme = getCookie(request, "theme") ?? "light";
  themes.includes(theme) || (theme = "light");
  let self = await findRequestUser(request);
  if (!self.userId) return (0, import_node.json)({ theme, user: null });
  let user = await db.user.findUnique({
    where: { id: self.userId },
    select: selectUserData,
  });
  return (0, import_node.json)({ theme, user });
}
var alertClassName = {
    info: "alert-info",
    success: "alert-success",
    error: "alert-error",
    warning: "alert-warning",
  },
  ads = [
    {
      title: "\u5E7F\u544A\u4F4D0\u62DB\u79DF",
      content:
        "\u5E7F\u544A\u4F4D\u6EDE\u9500\uFF0C\u6551\u6551\u6211\u4EEC\u{1F62D}",
      image: ad_default,
    },
    {
      title: "\u5E7F\u544A\u4F4D1\u62DB\u79DF",
      content:
        "\u5E7F\u544A\u4F4D1\u6EDE\u9500\uFF0C\u6551\u6551\u6211\u4EEC\u{1F62D}",
      image: ad_default,
    },
    {
      title: "\u5E7F\u544A\u4F4D2\u62DB\u79DF",
      content:
        "\u5E7F\u544A\u4F4D2\u6EDE\u9500\uFF0C\u6551\u6551\u6211\u4EEC\u{1F62D}",
      image: ad_default,
    },
  ];
function App() {
  let loaderData = useSignalLoaderData(),
    theme = (0, import_signals_react5.useSignal)(loaderData.value.theme),
    user = (0, import_signals_react5.useComputed)(() => loaderData.value.user),
    userId = (0, import_signals_react5.useComputed)(() => {
      var _a2;
      return ((_a2 = loaderData.value.user) == null ? void 0 : _a2.id) ?? null;
    }),
    Toasts = useToasts();
  (0, import_react7.useEffect)(() => {
    document.cookie.includes("theme=") ||
      (window.matchMedia("(prefers-color-scheme: dark)").matches &&
        (theme.value = "dark"));
  }, []),
    (0, import_react8.useBeforeUnload)(
      (0, import_react7.useCallback)(() => {
        document.cookie = `theme=${theme.value}; Path=/; Max-Age=31536000; SameSite=Lax;`;
      }, [theme.value])
    ),
    (0, import_signals_react5.useSignalEffect)(() => {
      if (userId.value) {
        let subscription = fromEventSource("/chat/events").subscribe(
          (message) => {
            Toasts.info(
              `\u6536\u5230\u6765\u81EA ${
                message.from.nickname || message.from.username
              } \u7684\u65B0\u6D88\u606F`
            );
          }
        );
        return () => subscription.unsubscribe();
      }
    });
  let fetcher = useSignalFetcher();
  (0, import_react7.useEffect)(() => {
    fetcher.actionSuccess &&
      fetcher.data &&
      (fetcher.data.success
        ? Toasts.success("\u9000\u51FA\u767B\u5F55\u6210\u529F")
        : Toasts.error(
            fetcher.data.reason ?? "\u9000\u51FA\u767B\u5F55\u5931\u8D25"
          ));
  }, [fetcher.actionSuccess]);
  let showFooterAdvertise = (0, import_signals_react5.useSignal)(!0);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("html", {
    lang: "zh-Hans",
    "data-theme": theme.value,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("head", {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("meta", {
            charSet: "utf-8",
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("meta", {
            name: "viewport",
            content: "width=device-width,initial-scale=1",
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("meta", {
            name: "color-scheme",
            content: darkThemes.includes(theme.value) ? "dark" : "light",
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react8.Meta, {}),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react8.Links, {}),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("body", {
        className: "relative font-sans",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className: `drawer bg-base-100 ${
              menuSignal.value ? "drawer-mobile" : ""
            }`,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                id: "drawer-menu",
                type: "checkbox",
                className: "drawer-toggle",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                className: "drawer-content flex h-full flex-col",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                    className: `sticky top-0 z-30 backdrop-blur transition-all ${
                      menuSignal.value ? "" : "-translate-y-full"
                    }`,
                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                      "nav",
                      {
                        className: "navbar flex w-full justify-end gap-4",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                            className: "flex flex-1 gap-2 lg:hidden",
                            children: [
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "label",
                                {
                                  className: "btn btn-ghost btn-square",
                                  htmlFor: "drawer-menu",
                                  children: /* @__PURE__ */ (0,
                                  import_jsx_runtime.jsx)(
                                    import_hi2.HiOutlineMenu,
                                    {
                                      className: "h-6 w-6",
                                    }
                                  ),
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                                import_react8.Link,
                                {
                                  className:
                                    "flex-0 btn btn-ghost px-2 text-3xl",
                                  to: "/",
                                  children: [
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      "span",
                                      {
                                        className: "text-primary lowercase",
                                        children: "hitwh",
                                      }
                                    ),
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      "span",
                                      {
                                        children: "OJ",
                                      }
                                    ),
                                  ],
                                }
                              ),
                            ],
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                            className: "dropdown dropdown-end",
                            children: [
                              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                                "div",
                                {
                                  className: "btn btn-ghost gap-2 normal-case",
                                  tabIndex: 0,
                                  children: [
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      import_hi2.HiOutlineColorSwatch,
                                      {
                                        className: "h-6 w-6",
                                      }
                                    ),
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      "span",
                                      {
                                        className: "hidden md:inline-block",
                                        children: "\u4E3B\u9898",
                                      }
                                    ),
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      import_hi2.HiOutlineChevronDown,
                                      {
                                        className: "hidden h-3 w-3 md:block",
                                      }
                                    ),
                                  ],
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "div",
                                {
                                  className:
                                    "dropdown-content rounded-t-box rounded-b-box bg-base-200 text-base-content top-0 mt-16 h-[70vh] max-h-96 w-52 overflow-y-auto shadow-2xl",
                                  children: /* @__PURE__ */ (0,
                                  import_jsx_runtime.jsx)("div", {
                                    className: "grid grid-cols-1 gap-3 p-3",
                                    tabIndex: 0,
                                    children: themes.map((iter) =>
                                      /* @__PURE__ */ (0,
                                      import_jsx_runtime.jsx)(
                                        "div",
                                        {
                                          "data-theme": iter,
                                          className: `text-base-content cursor-pointer rounded-lg p-3 font-sans font-bold outline-2 outline-offset-2${
                                            theme.value === iter
                                              ? " outline"
                                              : ""
                                          }`,
                                          onClick: () => (theme.value = iter),
                                          children: iter,
                                        },
                                        iter
                                      )
                                    ),
                                  }),
                                }
                              ),
                            ],
                          }),
                          user.value
                            ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                                "div",
                                {
                                  className: "dropdown-end dropdown h-12 w-12",
                                  children: [
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      UserAvatar,
                                      {
                                        user: user.value,
                                        tabIndex: 0,
                                        className:
                                          "bg-base-300 h-12 w-12 cursor-pointer text-2xl",
                                      }
                                    ),
                                    /* @__PURE__ */ (0,
                                    import_jsx_runtime.jsxs)("ul", {
                                      className:
                                        "dropdown-content menu rounded-t-box rounded-b-box bg-base-200 text-base-content top-0 mt-16 w-52 p-4 shadow-2xl",
                                      children: [
                                        /* @__PURE__ */ (0,
                                        import_jsx_runtime.jsx)("li", {
                                          children: /* @__PURE__ */ (0,
                                          import_jsx_runtime.jsxs)(
                                            import_react8.Link,
                                            {
                                              to: `/user/${user.value.id}`,
                                              children: [
                                                /* @__PURE__ */ (0,
                                                import_jsx_runtime.jsx)(
                                                  import_ai.AiOutlineProfile,
                                                  {}
                                                ),
                                                /* @__PURE__ */ (0,
                                                import_jsx_runtime.jsx)(
                                                  "span",
                                                  {
                                                    children: "\u8D44\u6599",
                                                  }
                                                ),
                                              ],
                                            }
                                          ),
                                        }),
                                        /* @__PURE__ */ (0,
                                        import_jsx_runtime.jsx)("li", {
                                          children: /* @__PURE__ */ (0,
                                          import_jsx_runtime.jsxs)(
                                            import_react8.Link,
                                            {
                                              to: "/chat/user",
                                              children: [
                                                /* @__PURE__ */ (0,
                                                import_jsx_runtime.jsx)(
                                                  import_hi2.HiOutlineChat,
                                                  {}
                                                ),
                                                /* @__PURE__ */ (0,
                                                import_jsx_runtime.jsx)(
                                                  "span",
                                                  {
                                                    children: "\u804A\u5929",
                                                  }
                                                ),
                                              ],
                                            }
                                          ),
                                        }),
                                        /* @__PURE__ */ (0,
                                        import_jsx_runtime.jsx)("li", {
                                          children: /* @__PURE__ */ (0,
                                          import_jsx_runtime.jsxs)(
                                            fetcher.Form,
                                            {
                                              action: "/logout",
                                              method: "post",
                                              children: [
                                                /* @__PURE__ */ (0,
                                                import_jsx_runtime.jsx)(
                                                  import_hi2.HiLogout,
                                                  {}
                                                ),
                                                /* @__PURE__ */ (0,
                                                import_jsx_runtime.jsx)(
                                                  "button",
                                                  {
                                                    type: "submit",
                                                    children:
                                                      "\u9000\u51FA\u767B\u5F55",
                                                  }
                                                ),
                                              ],
                                            }
                                          ),
                                        }),
                                      ],
                                    }),
                                  ],
                                }
                              )
                            : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                                import_jsx_runtime.Fragment,
                                {
                                  children: [
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      import_react8.Link,
                                      {
                                        className: "btn btn-outline",
                                        to: "/login",
                                        children: "\u767B\u5F55",
                                      }
                                    ),
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      import_react8.Link,
                                      {
                                        className: "btn btn-primary",
                                        to: "/register",
                                        children: "\u6CE8\u518C",
                                      }
                                    ),
                                  ],
                                }
                              ),
                        ],
                      }
                    ),
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                    className: "flex-1 p-6",
                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      "div",
                      {
                        className: "prose w-full max-w-4xl",
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ThemeContext.Provider,
                          {
                            value: theme.value,
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsx)(UserContext.Provider, {
                              value: user.value && user.value.id,
                              children: /* @__PURE__ */ (0,
                              import_jsx_runtime.jsx)(import_react8.Outlet, {}),
                            }),
                          }
                        ),
                      }
                    ),
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("footer", {
                    className: "footer bg-neutral text-neutral-content p-10",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                            className: "footer-title",
                            children: "About",
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("a", {
                            href: "https://www.hitwh.edu.cn/",
                            target: "_blank",
                            rel: "noreferrer",
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsx)("div", {
                              className:
                                "bg-neutral-content h-[48px] w-[221px]",
                              style: {
                                maskImage: `url(${hitwh_default})`,
                                maskSize: "cover",
                                WebkitMaskImage: `url(${hitwh_default})`,
                                WebkitMaskSize: "cover",
                              },
                            }),
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", {
                            children: [
                              "HITwh OJ Dev Team. Presents",
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "br",
                                {}
                              ),
                              "Providing unstable service since 2022",
                            ],
                          }),
                        ],
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                        className: showFooterAdvertise.value
                          ? "max-w-sm"
                          : "hidden",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                            className: "footer-title",
                            children: [
                              "Advertisement",
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "button",
                                {
                                  className: "btn btn-circle btn-xs ml-3",
                                  onClick: () =>
                                    (showFooterAdvertise.value = !1),
                                  children: /* @__PURE__ */ (0,
                                  import_jsx_runtime.jsx)(import_hi2.HiX, {}),
                                }
                              ),
                            ],
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                            className: "carousel w-full",
                            children: ads.map((ad, idx) =>
                              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                                "div",
                                {
                                  id: `advertise-${idx}`,
                                  className:
                                    "card carousel-item card-side w-full",
                                  children: [
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      "figure",
                                      {
                                        children: /* @__PURE__ */ (0,
                                        import_jsx_runtime.jsx)("img", {
                                          src: ad.image,
                                          alt: "ad",
                                          className: "h-24 w-24 cursor-pointer",
                                          onClick: () =>
                                            Toasts.info(
                                              "\u60A8\u83B7\u5F97\u4E86\u300C\u5C60\u9F99\u5B9D\u5200\u300D*1"
                                            ),
                                        }),
                                      }
                                    ),
                                    /* @__PURE__ */ (0,
                                    import_jsx_runtime.jsxs)("div", {
                                      className: "card-body",
                                      children: [
                                        /* @__PURE__ */ (0,
                                        import_jsx_runtime.jsx)("div", {
                                          className: "card-title",
                                          children: ad.title,
                                        }),
                                        /* @__PURE__ */ (0,
                                        import_jsx_runtime.jsx)("p", {
                                          children: ad.content,
                                        }),
                                        /* @__PURE__ */ (0,
                                        import_jsx_runtime.jsxs)("div", {
                                          className: "card-actions justify-end",
                                          children: [
                                            /* @__PURE__ */ (0,
                                            import_jsx_runtime.jsx)("a", {
                                              className:
                                                "btn btn-circle btn-sm",
                                              href: `#advertise-${
                                                (idx - 1 + ads.length) %
                                                ads.length
                                              }`,
                                              children: /* @__PURE__ */ (0,
                                              import_jsx_runtime.jsx)(
                                                import_hi2.HiOutlineChevronLeft,
                                                {}
                                              ),
                                            }),
                                            /* @__PURE__ */ (0,
                                            import_jsx_runtime.jsx)("a", {
                                              className:
                                                "btn btn-circle btn-sm",
                                              href: `#advertise-${
                                                (idx + 1) % ads.length
                                              }`,
                                              children: /* @__PURE__ */ (0,
                                              import_jsx_runtime.jsx)(
                                                import_hi2.HiOutlineChevronRight,
                                                {}
                                              ),
                                            }),
                                          ],
                                        }),
                                      ],
                                    }),
                                  ],
                                },
                                idx
                              )
                            ),
                          }),
                        ],
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                            className: "footer-title",
                            children: "Contact",
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                            className: "grid grid-flow-col gap-4",
                            children: [
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("a", {
                                target: "_blank",
                                href: qqlink,
                                className:
                                  "tooltip tooltip-bottom tooltip-info",
                                "data-tip":
                                  "HITwh OJ \u53CD\u9988\xD7\u5439\u6C34",
                                rel: "noreferrer",
                                children: /* @__PURE__ */ (0,
                                import_jsx_runtime.jsx)(import_ai.AiOutlineQq, {
                                  className: "h-6 w-6",
                                }),
                              }),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "span",
                                {
                                  className:
                                    "tooltip tooltip-bottom tooltip-info",
                                  "data-tip":
                                    "\u5F88\u9057\u61BE\uFF0C\u6211\u4EEC\u5E76\u6CA1\u6709\u5FAE\u4FE1\u53CD\u9988\u7FA4~",
                                  children: /* @__PURE__ */ (0,
                                  import_jsx_runtime.jsx)(
                                    import_ai.AiOutlineWechat,
                                    {
                                      className: "h-6 w-6",
                                    }
                                  ),
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("a", {
                                href: "https://t.me/hitwhmoe",
                                target: "_blank",
                                rel: "noreferrer",
                                className:
                                  "tooltip tooltip-bottom tooltip-info",
                                "data-tip": "@hitwhmoe",
                                children: /* @__PURE__ */ (0,
                                import_jsx_runtime.jsx)(
                                  import_fa.FaTelegramPlane,
                                  {
                                    className: "h-6 w-6",
                                  }
                                ),
                              }),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("a", {
                                href: "https://matrix.to/#/#hitwh:mozilla.org",
                                target: "_blank",
                                rel: "noreferrer",
                                className:
                                  "tooltip tooltip-bottom tooltip-info",
                                "data-tip": "#hitwh:mozilla.org",
                                children: /* @__PURE__ */ (0,
                                import_jsx_runtime.jsx)(import_si.SiElement, {
                                  className: "h-6 w-6",
                                }),
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                className: "drawer-side",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                    htmlFor: "drawer-menu",
                    className: "drawer-overlay",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("aside", {
                    className: "bg-base-200 flex h-full w-80 flex-col",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                        className:
                          "sticky top-0 hidden items-center gap-2 px-4 py-2 lg:flex",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                            import_react8.Link,
                            {
                              className: "flex-0 btn btn-ghost px-2 text-3xl",
                              to: "/",
                              children: [
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "span",
                                  {
                                    className: "text-primary lowercase",
                                    children: "hitwh",
                                  }
                                ),
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "span",
                                  {
                                    children: "OJ",
                                  }
                                ),
                              ],
                            }
                          ),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("a", {
                            className:
                              "link link-hover font-mono text-xs text-opacity-50",
                            href: "https://git.hit.edu.cn/hitwhoj/hitwhoj",
                            target: "_blank",
                            rel: "noreferrer",
                            children: version,
                          }),
                        ],
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("ul", {
                        className:
                          "menu text-base-content w-80 flex-1 overflow-y-auto p-4",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsxs)(import_react8.NavLink, {
                              className: "flex gap-4",
                              to: "/",
                              children: [
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_hi2.HiOutlineHome,
                                  {
                                    className: "h-6 w-6",
                                  }
                                ),
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "span",
                                  {
                                    children: "\u9996\u9875",
                                  }
                                ),
                              ],
                            }),
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsxs)(import_react8.NavLink, {
                              className: "flex gap-4",
                              to: "/problem",
                              children: [
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_hi2.HiOutlineBookOpen,
                                  {
                                    className: "h-6 w-6",
                                  }
                                ),
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "span",
                                  {
                                    children: "\u9898\u76EE",
                                  }
                                ),
                              ],
                            }),
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsxs)(import_react8.NavLink, {
                              className: "flex gap-4",
                              to: "/problemset",
                              children: [
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_hi2.HiOutlineCollection,
                                  {
                                    className: "h-6 w-6",
                                  }
                                ),
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "span",
                                  {
                                    children: "\u9898\u5355",
                                  }
                                ),
                              ],
                            }),
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsxs)(import_react8.NavLink, {
                              className: "flex gap-4",
                              to: "/contest",
                              children: [
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_ai.AiOutlineTrophy,
                                  {
                                    className: "h-6 w-6",
                                  }
                                ),
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "span",
                                  {
                                    children: "\u6BD4\u8D5B",
                                  }
                                ),
                              ],
                            }),
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsxs)(import_react8.NavLink, {
                              className: "flex gap-4",
                              to: "/team",
                              children: [
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_hi2.HiOutlineUserGroup,
                                  {
                                    className: "h-6 w-6",
                                  }
                                ),
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "span",
                                  {
                                    children: "\u56E2\u961F",
                                  }
                                ),
                              ],
                            }),
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsxs)(import_react8.NavLink, {
                              className: "flex gap-4",
                              to: user.value
                                ? `/record?uid=${user.value.id}`
                                : "/record",
                              children: [
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_ai.AiOutlineHistory,
                                  {
                                    className: "h-6 w-6",
                                  }
                                ),
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "span",
                                  {
                                    children: "\u8BC4\u6D4B",
                                  }
                                ),
                              ],
                            }),
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsxs)(import_react8.NavLink, {
                              className: "flex gap-4",
                              to: "/docs",
                              children: [
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_hi2.HiOutlineQuestionMarkCircle,
                                  {
                                    className: "h-6 w-6",
                                  }
                                ),
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "span",
                                  {
                                    children: "\u6587\u6863",
                                  }
                                ),
                              ],
                            }),
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsxs)(import_react8.NavLink, {
                              className: "flex gap-4",
                              to: "/playground",
                              children: [
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_hi2.HiOutlineCode,
                                  {
                                    className: "h-6 w-6",
                                  }
                                ),
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "span",
                                  {
                                    children: "\u5728\u7EBF\u7F16\u7A0B",
                                  }
                                ),
                              ],
                            }),
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            ],
          }),
          toastSignal.value.length > 0 &&
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className:
                "toast toast-center toast-top pointer-events-none w-full items-center",
              children: toastSignal.value.map((toast, index2) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  "div",
                  {
                    className: "pointer-events-auto max-w-sm",
                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      "div",
                      {
                        className: `alert ${alertClassName[toast.type]}`,
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          "span",
                          {
                            children: toast.message,
                          }
                        ),
                      }
                    ),
                  },
                  index2
                )
              ),
            }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_react8.ScrollRestoration,
            {}
          ),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_react8.Scripts,
            {}
          ),
          !1,
        ],
      }),
    ],
  });
}

// app/routes/chat/room/$roomId/events.tsx
var events_exports = {};
__export(events_exports, {
  loader: () => loader2,
});
var import_rxjs4 = require("rxjs");

// app/utils/invariant.ts
function invariant(scheme, data2, init = { status: 400 }) {
  let t2 = scheme.safeParse(data2);
  if (t2.success) return t2.data;
  throw new Response(
    t2.error.issues.map((issue) => issue.message).join(`
`),
    init
  );
}

// app/utils/permission/permission/user.ts
var _UserPermission = class {
    constructor(root5, admin, user, guest) {
      this.root = root5;
      this.admin = admin;
      this.user = user;
      this.guest = guest;
    }
  },
  UserPermission = _UserPermission;
__publicField(UserPermission, "Everyone", new _UserPermission(!0, !0, !0, !0)),
  __publicField(UserPermission, "Users", new _UserPermission(!0, !0, !0, !1)),
  __publicField(UserPermission, "Admins", new _UserPermission(!0, !0, !1, !1)),
  __publicField(UserPermission, "Roots", new _UserPermission(!0, !1, !1, !1)),
  __publicField(UserPermission, "Nobody", new _UserPermission(!1, !1, !1, !1));

// app/utils/permission/permission/team.ts
var _TeamPermission = class {
    constructor(owner, admin, member, guest, fallback = UserPermission.Nobody) {
      this.owner = owner;
      this.admin = admin;
      this.member = member;
      this.guest = guest;
      this.fallback = fallback;
    }
    with(fallback) {
      return new _TeamPermission(
        this.owner,
        this.admin,
        this.member,
        this.guest,
        fallback
      );
    }
  },
  TeamPermission = _TeamPermission;
__publicField(TeamPermission, "Everyone", new _TeamPermission(!0, !0, !0, !0)),
  __publicField(TeamPermission, "Members", new _TeamPermission(!0, !0, !0, !1)),
  __publicField(TeamPermission, "Admins", new _TeamPermission(!0, !0, !1, !1)),
  __publicField(TeamPermission, "Owners", new _TeamPermission(!0, !1, !1, !1)),
  __publicField(TeamPermission, "Nobody", new _TeamPermission(!1, !1, !1, !1));

// app/utils/permission/permission/contest.ts
var _ContestPermission = class {
    constructor(
      mod,
      jury,
      contestant,
      guest,
      fallback = TeamPermission.Nobody
    ) {
      this.mod = mod;
      this.jury = jury;
      this.contestant = contestant;
      this.guest = guest;
      this.fallback = fallback;
    }
    with(fallback) {
      return new _ContestPermission(
        this.mod,
        this.jury,
        this.contestant,
        this.guest,
        fallback
      );
    }
  },
  ContestPermission = _ContestPermission;
__publicField(
  ContestPermission,
  "Everyone",
  new _ContestPermission(!0, !0, !0, !0)
),
  __publicField(
    ContestPermission,
    "Contestants",
    new _ContestPermission(!0, !0, !0, !1)
  ),
  __publicField(
    ContestPermission,
    "Juries",
    new _ContestPermission(!0, !0, !1, !1)
  ),
  __publicField(
    ContestPermission,
    "Mods",
    new _ContestPermission(!0, !1, !1, !1)
  ),
  __publicField(
    ContestPermission,
    "Nobody",
    new _ContestPermission(!1, !1, !1, !1)
  );

// app/utils/permission/permission/room.ts
var _ChatRoomPermission = class {
    constructor(owner, admin, member, guest, fallback = UserPermission.Nobody) {
      this.owner = owner;
      this.admin = admin;
      this.member = member;
      this.guest = guest;
      this.fallback = fallback;
    }
    with(fallback) {
      return new _ChatRoomPermission(
        this.owner,
        this.admin,
        this.member,
        this.guest,
        fallback
      );
    }
  },
  ChatRoomPermission = _ChatRoomPermission;
__publicField(
  ChatRoomPermission,
  "Everyone",
  new _ChatRoomPermission(!0, !0, !0, !0)
),
  __publicField(
    ChatRoomPermission,
    "Members",
    new _ChatRoomPermission(!0, !0, !0, !1)
  ),
  __publicField(
    ChatRoomPermission,
    "Admins",
    new _ChatRoomPermission(!0, !0, !1, !1)
  ),
  __publicField(
    ChatRoomPermission,
    "Owners",
    new _ChatRoomPermission(!0, !1, !1, !1)
  ),
  __publicField(
    ChatRoomPermission,
    "Nobody",
    new _ChatRoomPermission(!1, !1, !1, !1)
  ),
  __publicField(
    ChatRoomPermission,
    "GuestOnly",
    new _ChatRoomPermission(!1, !1, !1, !0)
  ),
  __publicField(
    ChatRoomPermission,
    "MemberOnly",
    new _ChatRoomPermission(!1, !1, !0, !1)
  ),
  __publicField(
    ChatRoomPermission,
    "AdminOnly",
    new _ChatRoomPermission(!1, !0, !1, !1)
  ),
  __publicField(
    ChatRoomPermission,
    "OwnerOnly",
    new _ChatRoomPermission(!0, !1, !1, !1)
  );

// app/utils/permission/permission.ts
var Permissions = {
  PERM_VIEW_USER_PROFILE: UserPermission.Everyone,
  PERM_VIEW_USER_PROFILE_SELF: UserPermission.Everyone,
  PERM_EDIT_USER_PROFILE: UserPermission.Admins,
  PERM_EDIT_USER_PROFILE_SELF: UserPermission.Users,
  PERM_EDIT_USER_PRIVILEGE: UserPermission.Admins,
  PERM_EDIT_USER_ROLE: UserPermission.Roots,
  PERM_VIEW_USER_PM_SELF: UserPermission.Everyone,
  PERM_SEND_USER_PM: UserPermission.Users,
  PERM_VIEW_CHATROOM_MESSAGE: ChatRoomPermission.Members.with(
    UserPermission.Admins
  ),
  PERM_SEND_CHATROOM_MESSAGE: ChatRoomPermission.Members.with(
    UserPermission.Admins
  ),
  PERM_JOIN_CHATROOM_MESSAGE: ChatRoomPermission.GuestOnly.with(
    UserPermission.Nobody
  ),
  PERM_CREATE_PROBLEM: TeamPermission.Admins.with(UserPermission.Admins),
  PERM_VIEW_PROBLEM: TeamPermission.Admins.with(UserPermission.Admins),
  PERM_VIEW_PROBLEM_PUBLIC: TeamPermission.Everyone.with(
    UserPermission.Everyone
  ),
  PERM_EDIT_PROBLEM: TeamPermission.Admins.with(UserPermission.Admins),
  PERM_CREATE_PROBLEM_SET: TeamPermission.Admins.with(UserPermission.Admins),
  PERM_VIEW_PROBLEM_SET: TeamPermission.Admins.with(UserPermission.Admins),
  PERM_VIEW_PROBLEM_SET_PUBLIC: TeamPermission.Everyone.with(
    UserPermission.Everyone
  ),
  PERM_EDIT_PROBLEM_SET: TeamPermission.Admins.with(UserPermission.Admins),
  PERM_CREATE_CONTEST: TeamPermission.Admins.with(UserPermission.Admins),
  PERM_VIEW_CONTEST: ContestPermission.Contestants.with(
    TeamPermission.Admins.with(UserPermission.Admins)
  ),
  PERM_VIEW_CONTEST_PUBLIC: ContestPermission.Everyone.with(
    TeamPermission.Everyone.with(UserPermission.Everyone)
  ),
  PERM_VIEW_CONTEST_PROBLEMS_BEFORE: ContestPermission.Juries.with(
    TeamPermission.Admins.with(UserPermission.Admins)
  ),
  PERM_VIEW_CONTEST_PROBLEMS_DURING: ContestPermission.Contestants.with(
    TeamPermission.Admins.with(UserPermission.Admins)
  ),
  PERM_VIEW_CONTEST_PROBLEMS_AFTER: ContestPermission.Everyone.with(
    TeamPermission.Everyone.with(UserPermission.Everyone)
  ),
  PERM_EDIT_CONTEST: ContestPermission.Mods.with(
    TeamPermission.Admins.with(UserPermission.Admins)
  ),
  PERM_VIEW_RECORD: ContestPermission.Juries.with(
    TeamPermission.Admins.with(UserPermission.Admins)
  ),
  PERM_VIEW_RECORD_SELF: ContestPermission.Everyone.with(
    TeamPermission.Everyone.with(UserPermission.Everyone)
  ),
  PERM_SUBMIT_CONTEST_CLARIFICATION: ContestPermission.Contestants.with(
    TeamPermission.Admins.with(UserPermission.Admins)
  ),
  PERM_REPLY_CONTEST_CLARIFICATION: ContestPermission.Juries.with(
    TeamPermission.Admins.with(UserPermission.Admins)
  ),
  PERM_EXPORT_CONTEST_BOARD: ContestPermission.Juries.with(
    TeamPermission.Admins.with(UserPermission.Admins)
  ),
  PERM_TEAM_CREATE: UserPermission.Admins,
  PERM_TEAM_EDIT_MEMBER_ROLE: TeamPermission.Owners.with(UserPermission.Admins),
  PERM_TEAM_VIEW_INTERNAL: TeamPermission.Members.with(UserPermission.Admins),
  PERM_TEAM_EDIT_INTERNAL: TeamPermission.Admins.with(UserPermission.Admins),
  PERM_TEAM_KICK_ADMIN: TeamPermission.Owners.with(UserPermission.Admins),
  PERM_TEAM_KICK_MEMBER: TeamPermission.Admins.with(UserPermission.Admins),
  PERM_TEAM_INVITE_ADMIN: TeamPermission.Admins.with(UserPermission.Admins),
  PERM_TEAM_INVITE_MEMBER: TeamPermission.Members.with(UserPermission.Admins),
};

// app/utils/scheme.ts
var import_zod = require("zod"),
  import_client2 = require("@prisma/client"),
  idScheme = import_zod.z
    .string()
    .regex(/^\d+$/, "Id must be a positive integer")
    .transform((x) => parseInt(x, 10)),
  nullableIdScheme = import_zod.z.union([
    import_zod.z
      .string()
      .regex(/^\d*$/, "Id must be a positive integer")
      .transform((x) => parseInt(x, 10)),
    import_zod.z.null().transform(() => null),
  ]),
  uuidScheme = import_zod.z
    .string()
    .regex(
      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
      "UUID must be a valid UUID"
    ),
  usernameScheme = import_zod.z
    .string()
    .nonempty("Username must be nonempty")
    .regex(/^[a-zA-Z0-9_]+$/, "Username must be alphanumeric"),
  passwordScheme = import_zod.z
    .string()
    .nonempty("Password must be nonempty")
    .regex(/^[0-9a-f]{64}$/, "Password must be a sha256 hash"),
  weakPasswordScheme = import_zod.z
    .string()
    .nonempty("Password must be nonempty"),
  nicknameScheme = import_zod.z.string().nonempty("Nickname must be nonempty"),
  bioScheme = import_zod.z.string(),
  pageScheme = import_zod.z
    .string()
    .regex(/^[1-9]\d*$/, "Page must be a positive integer")
    .transform((x) => parseInt(x, 10)),
  tagScheme = import_zod.z.string().nonempty("Tag must be nonempty"),
  titleScheme = import_zod.z.string().nonempty("Title must be nonempty"),
  descriptionScheme = import_zod.z.string(),
  emailScheme = import_zod.z
    .string()
    .email("Email must be a valid email")
    .regex(/@(?:stu\.)?hit(?:wh|sz)?\.edu\.cn$/, "Email must be a HIT email"),
  emptyStringScheme = import_zod.z.string().length(0),
  datetimeStringScheme = import_zod.z
    .string()
    .nonempty("DateTime must be nonempty")
    .regex(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}$/, "Date must be a datetime-local")
    .transform((x) => new Date(x)),
  timezoneScheme = import_zod.z
    .string()
    .nonempty("Timezone must be nonempty")
    .regex(/^-?\d+$/, "Timezone must be a number")
    .transform((x) => parseInt(x, 10)),
  systemScheme = import_zod.z.nativeEnum(import_client2.ContestSystem),
  contestParticipantRoleScheme = import_zod.z.nativeEnum(
    import_client2.ContestParticipantRole
  ),
  codeScheme = import_zod.z.string().nonempty("Code must be nonempty"),
  languageScheme = import_zod.z
    .string()
    .nonempty("Language must be nonempty")
    .regex(/^\w+$/, "Language must be alphanumeric"),
  commentScheme = import_zod.z
    .string()
    .nonempty("Comment must be nonempty")
    .min(10, "Comment must be at least 10 characters"),
  replyContentScheme = import_zod.z
    .string()
    .nonempty("Reply content must be nonempty")
    .min(8, "Reply content must be at least 8 characters")
    .max(1e3, "Reply content must be at most 1000 characters"),
  replyScheme = import_zod.z
    .string()
    .nonempty("Reply must be nonempty")
    .min(5, "Reply must be at least 5 characters"),
  teamNameScheme = import_zod.z.string().nonempty("TeamName must be nonempty"),
  teamMemberRoleScheme = import_zod.z.nativeEnum(import_client2.TeamMemberRole),
  teamInvitationScheme = import_zod.z.nativeEnum(import_client2.InvitationType),
  teamInvitationCodeScheme = import_zod.z
    .string()
    .nonempty("InvitationCode must be nonempty"),
  contentScheme = import_zod.z
    .string()
    .nonempty("message content must be nonempty")
    .max(255, "message content mast be less than 255 characters"),
  problemRankScheme = import_zod.z
    .string()
    .regex(/^[A-Z]$/, "contest problem id must be a single uppercase letter")
    .transform((x) => x.charCodeAt(0) - "A".charCodeAt(0) + 1),
  limitScheme = import_zod.z
    .string()
    .regex(/^\d+$/, "limit must be a number")
    .transform((x) => parseInt(x, 10)),
  reportTypeScheme = import_zod.z.nativeEnum(import_client2.ReportType),
  reasonScheme = import_zod.z
    .string()
    .nonempty("Reason content must be nonempty")
    .min(8, "Reason must be at least 8 characters"),
  roleScheme = import_zod.z.nativeEnum(import_client2.SystemUserRole),
  privilegeScheme = import_zod.z
    .string()
    .regex(/^\d+$/, "privilege must be a number")
    .transform((x) => parseInt(x, 10));

// app/utils/serverEvents.ts
var import_rxjs3 = require("rxjs"),
  privateMessageSubject = new import_rxjs3.Subject(),
  chatMessageSubject = new import_rxjs3.Subject(),
  recordUpdateSubject = new import_rxjs3.Subject(),
  recordFinishSubject = new import_rxjs3.Subject(),
  clarificationResolveSubject = new import_rxjs3.Subject(),
  clarificationAssignSubject = new import_rxjs3.Subject(),
  clarificationReplySubject = new import_rxjs3.Subject();

// app/utils/tools.ts
var import__ = __toESM(require("hash.js/lib/hash/sha/256"));
var dateTimeFormatter = new Intl.DateTimeFormat("zh-CN", {
  year: "numeric",
  month: "numeric",
  day: "numeric",
  hour: "numeric",
  minute: "numeric",
  second: "numeric",
});
function formatDateTime(time) {
  return dateTimeFormatter.format(new Date(time));
}
function formatTime(time) {
  return new Date(time).toLocaleTimeString("zh-CN");
}
var numberFormatter = new Intl.NumberFormat("zh-CN");
function formatNumber(number2) {
  return numberFormatter.format(number2);
}
function formatDurationTime(ms) {
  return ms < 1e3
    ? `${formatNumber(ms)}\u6BEB\u79D2`
    : ms < 6e4
    ? `${formatNumber(ms / 1e3)}\u79D2`
    : ms < 36e5
    ? `${formatNumber(ms / 6e4)}\u5206\u949F`
    : `${formatNumber(ms / 36e5)}\u5C0F\u65F6`;
}
var relativeDateTimeFormatter = new Intl.RelativeTimeFormat("zh-CN", {
  numeric: "auto",
});
function formatRelativeDateTime(time) {
  let date = new Date(time).getTime(),
    now = Date.now(),
    relativeSeconds = (date - now) / 1e3;
  if (Math.abs(relativeSeconds) < 60)
    return relativeDateTimeFormatter.format(
      Math.floor(relativeSeconds),
      "second"
    );
  let relativeMinutes = relativeSeconds / 60;
  if (Math.abs(relativeMinutes) < 60)
    return relativeDateTimeFormatter.format(
      Math.floor(relativeMinutes),
      "minute"
    );
  let relativeHours = relativeMinutes / 60;
  if (Math.abs(relativeHours) < 24)
    return relativeDateTimeFormatter.format(Math.floor(relativeHours), "hour");
  let relativeDays = relativeHours / 24;
  if (Math.abs(relativeDays) < 30)
    return relativeDateTimeFormatter.format(Math.floor(relativeDays), "day");
  let relativeMonths = relativeDays / 30;
  if (Math.abs(relativeMonths) < 12)
    return relativeDateTimeFormatter.format(
      Math.floor(relativeMonths),
      "month"
    );
  let relativeYears = relativeMonths / 12;
  return relativeDateTimeFormatter.format(Math.floor(relativeYears), "year");
}
function passwordHash(password) {
  return (0, import__.default)()
    .update(`TODO: hitwhoj-first-test{${password}}`)
    .digest("hex");
}
function isNotNull(value) {
  return value !== null;
}

// app/routes/chat/room/$roomId/events.tsx
var observer = chatMessageSubject.pipe(
  (0, import_rxjs4.mergeMap)((id) =>
    (0, import_rxjs4.from)(
      db.chatMessage.findUnique({
        where: { id },
        select: {
          id: !0,
          role: !0,
          content: !0,
          sentAt: !0,
          roomId: !0,
          sender: { select: { ...selectUserData } },
        },
      })
    )
  ),
  (0, import_rxjs4.filter)(isNotNull)
);
async function loader2({ request, params }) {
  let roomId = invariant(idScheme, params.roomId, { status: 404 });
  return (
    await (await findRequestUser(request))
      .room(roomId)
      .checkPermission(Permissions.PERM_VIEW_CHATROOM_MESSAGE),
    createEventSource(
      request,
      observer.pipe(
        (0, import_rxjs4.filter)((message) => message.roomId === roomId)
      )
    )
  );
}

// app/routes/problemset/$problemSetId.tsx
var problemSetId_exports = {};
__export(problemSetId_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => Problemset,
  loader: () => loader3,
  meta: () => meta,
});
var import_node2 = require("@remix-run/node"),
  import_react9 = require("@remix-run/react");

// app/utils/db/problemset.ts
async function findProblemSetTeam(problemSetId) {
  let problemSet = await db.problemSet.findUnique({
    where: { id: problemSetId },
    select: { teamId: !0 },
  });
  if (!problemSet) throw new Response("Problem set not found", { status: 404 });
  return problemSet.teamId;
}
async function findProblemSetPrivacy(problemSetId) {
  let problemSet = await db.problemSet.findUnique({
    where: { id: problemSetId },
    select: { private: !0 },
  });
  if (!problemSet) throw new Response("Problem set not found", { status: 404 });
  return problemSet.private;
}

// app/routes/problemset/$problemSetId.tsx
var import_hi3 = require("react-icons/hi");
var import_signals_react6 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader3({ request, params }) {
  let problemSetId = invariant(idScheme, params.problemSetId, {
      status: 404,
    }),
    team = (await findRequestUser(request)).team(
      await findProblemSetTeam(problemSetId)
    );
  await team.checkPermission(
    (await findProblemSetPrivacy(problemSetId))
      ? Permissions.PERM_VIEW_PROBLEM_SET
      : Permissions.PERM_VIEW_PROBLEM_SET_PUBLIC
  );
  let [hasEditPerm] = await team.hasPermission(
      Permissions.PERM_EDIT_PROBLEM_SET
    ),
    problemSet = await db.problemSet.findUnique({
      where: { id: problemSetId },
      select: {
        title: !0,
        description: !0,
        private: !0,
        tags: { select: { name: !0 } },
      },
    });
  if (!problemSet) throw new Response("Problem Set not found", { status: 404 });
  return (0, import_node2.json)({ problemSet, hasEditPerm });
}
var meta = ({ data: data2 }) => ({
  title: `\u9898\u5355: ${
    data2 == null ? void 0 : data2.problemSet.title
  } - HITwh OJ`,
  description: data2 == null ? void 0 : data2.problemSet.description,
});
function Problemset() {
  let loaderData = useSignalLoaderData(),
    problemSet = (0, import_signals_react6.useComputed)(
      () => loaderData.value.problemSet
    ),
    hasEditPerm = (0, import_signals_react6.useComputed)(
      () => loaderData.value.hasEditPerm
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: problemSet.value.title,
        }),
        (problemSet.value.tags.length > 0 || problemSet.value.private) &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className: "not-prose flex flex-wrap gap-2",
            children: [
              problemSet.value.private &&
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                  className: "badge badge-warning gap-1",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi3.HiOutlineEyeOff,
                      {}
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u9690\u85CF",
                    }),
                  ],
                }),
              problemSet.value.tags.map(({ name }) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  import_react9.Link,
                  {
                    className: "badge gap-1",
                    to: `/problemset/tag/${name}`,
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                        import_hi3.HiOutlineTag,
                        {}
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                        children: name,
                      }),
                    ],
                  },
                  name
                )
              ),
            ],
          }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", {
          className: "not-prose tabs tabs-boxed bg-base-100",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react9.NavLink, {
              className: "tab",
              to: "problem",
              children: "\u8BE6\u60C5",
            }),
            hasEditPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react9.NavLink,
                {
                  className: "tab",
                  to: "edit",
                  children: "\u7F16\u8F91",
                }
              ),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react9.Outlet, {}),
      ],
    }
  );
}

// app/routes/problemset/$problemSetId/problem.tsx
var problem_exports = {};
__export(problem_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ProblemSetIndex,
  loader: () => loader4,
  meta: () => meta2,
});
var import_node3 = require("@remix-run/node");

// ../../node_modules/react-markdown/lib/uri-transformer.js
var protocols = ["http", "https", "mailto", "tel"];
function uriTransformer(uri) {
  let url = (uri || "").trim(),
    first = url.charAt(0);
  if (first === "#" || first === "/") return url;
  let colon = url.indexOf(":");
  if (colon === -1) return url;
  let index2 = -1;
  for (; ++index2 < protocols.length; ) {
    let protocol = protocols[index2];
    if (
      colon === protocol.length &&
      url.slice(0, protocol.length).toLowerCase() === protocol
    )
      return url;
  }
  return (
    (index2 = url.indexOf("?")),
    (index2 !== -1 && colon > index2) ||
    ((index2 = url.indexOf("#")), index2 !== -1 && colon > index2)
      ? url
      : "javascript:void(0)"
  );
}

// ../../node_modules/react-markdown/lib/react-markdown.js
var import_react11 = __toESM(require("react"), 1);

// ../../node_modules/vfile/lib/index.js
var import_is_buffer = __toESM(require("is-buffer"), 1);

// ../../node_modules/unist-util-stringify-position/index.js
var own = {}.hasOwnProperty;
function stringifyPosition(value) {
  return !value || typeof value != "object"
    ? ""
    : own.call(value, "position") || own.call(value, "type")
    ? position(value.position)
    : own.call(value, "start") || own.call(value, "end")
    ? position(value)
    : own.call(value, "line") || own.call(value, "column")
    ? point(value)
    : "";
}
function point(point4) {
  return index(point4 && point4.line) + ":" + index(point4 && point4.column);
}
function position(pos) {
  return point(pos && pos.start) + "-" + point(pos && pos.end);
}
function index(value) {
  return value && typeof value == "number" ? value : 1;
}

// ../../node_modules/vfile-message/index.js
var VFileMessage = class extends Error {
  constructor(reason, place, origin) {
    var parts = [null, null],
      position3 = {
        start: { line: null, column: null },
        end: { line: null, column: null },
      },
      index2;
    super(),
      typeof place == "string" && ((origin = place), (place = null)),
      typeof origin == "string" &&
        ((index2 = origin.indexOf(":")),
        index2 === -1
          ? (parts[1] = origin)
          : ((parts[0] = origin.slice(0, index2)),
            (parts[1] = origin.slice(index2 + 1)))),
      place &&
        ("type" in place || "position" in place
          ? place.position && (position3 = place.position)
          : "start" in place || "end" in place
          ? (position3 = place)
          : ("line" in place || "column" in place) &&
            (position3.start = place)),
      (this.name = stringifyPosition(place) || "1:1"),
      (this.message = typeof reason == "object" ? reason.message : reason),
      (this.stack = typeof reason == "object" ? reason.stack : ""),
      (this.reason = this.message),
      this.fatal,
      (this.line = position3.start.line),
      (this.column = position3.start.column),
      (this.source = parts[0]),
      (this.ruleId = parts[1]),
      (this.position = position3),
      this.actual,
      this.expected,
      this.file,
      this.url,
      this.note;
  }
};
VFileMessage.prototype.file = "";
VFileMessage.prototype.name = "";
VFileMessage.prototype.reason = "";
VFileMessage.prototype.message = "";
VFileMessage.prototype.stack = "";
VFileMessage.prototype.fatal = null;
VFileMessage.prototype.column = null;
VFileMessage.prototype.line = null;
VFileMessage.prototype.source = null;
VFileMessage.prototype.ruleId = null;
VFileMessage.prototype.position = null;

// ../../node_modules/vfile/lib/minpath.js
var import_path = __toESM(require("path"), 1);

// ../../node_modules/vfile/lib/minproc.js
var import_process = __toESM(require("process"), 1);

// ../../node_modules/vfile/lib/minurl.js
var import_url = require("url");

// ../../node_modules/vfile/lib/minurl.shared.js
function isUrl(fileURLOrPath) {
  return (
    fileURLOrPath !== null &&
    typeof fileURLOrPath == "object" &&
    fileURLOrPath.href &&
    fileURLOrPath.origin
  );
}

// ../../node_modules/vfile/lib/index.js
var order = ["history", "path", "basename", "stem", "extname", "dirname"],
  VFile = class {
    constructor(value) {
      let options;
      value
        ? typeof value == "string" || (0, import_is_buffer.default)(value)
          ? (options = { value })
          : isUrl(value)
          ? (options = { path: value })
          : (options = value)
        : (options = {}),
        (this.data = {}),
        (this.messages = []),
        (this.history = []),
        (this.cwd = import_process.default.cwd()),
        this.value,
        this.stored,
        this.result,
        this.map;
      let index2 = -1;
      for (; ++index2 < order.length; ) {
        let prop2 = order[index2];
        prop2 in options &&
          options[prop2] !== void 0 &&
          (this[prop2] =
            prop2 === "history" ? [...options[prop2]] : options[prop2]);
      }
      let prop;
      for (prop in options)
        order.includes(prop) || (this[prop] = options[prop]);
    }
    get path() {
      return this.history[this.history.length - 1];
    }
    set path(path2) {
      isUrl(path2) && (path2 = (0, import_url.fileURLToPath)(path2)),
        assertNonEmpty(path2, "path"),
        this.path !== path2 && this.history.push(path2);
    }
    get dirname() {
      return typeof this.path == "string"
        ? import_path.default.dirname(this.path)
        : void 0;
    }
    set dirname(dirname) {
      assertPath(this.basename, "dirname"),
        (this.path = import_path.default.join(dirname || "", this.basename));
    }
    get basename() {
      return typeof this.path == "string"
        ? import_path.default.basename(this.path)
        : void 0;
    }
    set basename(basename) {
      assertNonEmpty(basename, "basename"),
        assertPart(basename, "basename"),
        (this.path = import_path.default.join(this.dirname || "", basename));
    }
    get extname() {
      return typeof this.path == "string"
        ? import_path.default.extname(this.path)
        : void 0;
    }
    set extname(extname) {
      if (
        (assertPart(extname, "extname"),
        assertPath(this.dirname, "extname"),
        extname)
      ) {
        if (extname.charCodeAt(0) !== 46)
          throw new Error("`extname` must start with `.`");
        if (extname.includes(".", 1))
          throw new Error("`extname` cannot contain multiple dots");
      }
      this.path = import_path.default.join(
        this.dirname,
        this.stem + (extname || "")
      );
    }
    get stem() {
      return typeof this.path == "string"
        ? import_path.default.basename(this.path, this.extname)
        : void 0;
    }
    set stem(stem) {
      assertNonEmpty(stem, "stem"),
        assertPart(stem, "stem"),
        (this.path = import_path.default.join(
          this.dirname || "",
          stem + (this.extname || "")
        ));
    }
    toString(encoding) {
      return (this.value || "").toString(encoding);
    }
    message(reason, place, origin) {
      let message = new VFileMessage(reason, place, origin);
      return (
        this.path &&
          ((message.name = this.path + ":" + message.name),
          (message.file = this.path)),
        (message.fatal = !1),
        this.messages.push(message),
        message
      );
    }
    info(reason, place, origin) {
      let message = this.message(reason, place, origin);
      return (message.fatal = null), message;
    }
    fail(reason, place, origin) {
      let message = this.message(reason, place, origin);
      throw ((message.fatal = !0), message);
    }
  };
function assertPart(part, name) {
  if (part && part.includes(import_path.default.sep))
    throw new Error(
      "`" +
        name +
        "` cannot be a path: did not expect `" +
        import_path.default.sep +
        "`"
    );
}
function assertNonEmpty(part, name) {
  if (!part) throw new Error("`" + name + "` cannot be empty");
}
function assertPath(path2, name) {
  if (!path2)
    throw new Error("Setting `" + name + "` requires `path` to be set too");
}

// ../../node_modules/bail/index.js
function bail(error2) {
  if (error2) throw error2;
}

// ../../node_modules/unified/lib/index.js
var import_is_buffer2 = __toESM(require("is-buffer"), 1),
  import_extend = __toESM(require("extend"), 1),
  import_is_plain_obj = __toESM(require("is-plain-obj"), 1);

// ../../node_modules/trough/index.js
function trough() {
  let fns = [],
    pipeline = { run, use };
  return pipeline;
  function run(...values) {
    let middlewareIndex = -1,
      callback = values.pop();
    if (typeof callback != "function")
      throw new TypeError(
        "Expected function as last argument, not " + callback
      );
    next(null, ...values);
    function next(error2, ...output) {
      let fn = fns[++middlewareIndex],
        index2 = -1;
      if (error2) {
        callback(error2);
        return;
      }
      for (; ++index2 < values.length; )
        (output[index2] === null || output[index2] === void 0) &&
          (output[index2] = values[index2]);
      (values = output),
        fn ? wrap(fn, next)(...output) : callback(null, ...output);
    }
  }
  function use(middelware) {
    if (typeof middelware != "function")
      throw new TypeError(
        "Expected `middelware` to be a function, not " + middelware
      );
    return fns.push(middelware), pipeline;
  }
}
function wrap(middleware, callback) {
  let called;
  return wrapped;
  function wrapped(...parameters) {
    let fnExpectsCallback = middleware.length > parameters.length,
      result;
    fnExpectsCallback && parameters.push(done);
    try {
      result = middleware(...parameters);
    } catch (error2) {
      let exception = error2;
      if (fnExpectsCallback && called) throw exception;
      return done(exception);
    }
    fnExpectsCallback ||
      (result instanceof Promise
        ? result.then(then, done)
        : result instanceof Error
        ? done(result)
        : then(result));
  }
  function done(error2, ...output) {
    called || ((called = !0), callback(error2, ...output));
  }
  function then(value) {
    done(null, value);
  }
}

// ../../node_modules/unified/lib/index.js
var unified = base().freeze(),
  own2 = {}.hasOwnProperty;
function base() {
  let transformers = trough(),
    attachers = [],
    namespace = {},
    frozen,
    freezeIndex = -1;
  return (
    (processor.data = data2),
    (processor.Parser = void 0),
    (processor.Compiler = void 0),
    (processor.freeze = freeze),
    (processor.attachers = attachers),
    (processor.use = use),
    (processor.parse = parse4),
    (processor.stringify = stringify3),
    (processor.run = run),
    (processor.runSync = runSync),
    (processor.process = process2),
    (processor.processSync = processSync),
    processor
  );
  function processor() {
    let destination = base(),
      index2 = -1;
    for (; ++index2 < attachers.length; ) destination.use(...attachers[index2]);
    return (
      destination.data((0, import_extend.default)(!0, {}, namespace)),
      destination
    );
  }
  function data2(key, value) {
    return typeof key == "string"
      ? arguments.length === 2
        ? (assertUnfrozen("data", frozen), (namespace[key] = value), processor)
        : (own2.call(namespace, key) && namespace[key]) || null
      : key
      ? (assertUnfrozen("data", frozen), (namespace = key), processor)
      : namespace;
  }
  function freeze() {
    if (frozen) return processor;
    for (; ++freezeIndex < attachers.length; ) {
      let [attacher, ...options] = attachers[freezeIndex];
      if (options[0] === !1) continue;
      options[0] === !0 && (options[1] = void 0);
      let transformer = attacher.call(processor, ...options);
      typeof transformer == "function" && transformers.use(transformer);
    }
    return (frozen = !0), (freezeIndex = Number.POSITIVE_INFINITY), processor;
  }
  function use(value, ...options) {
    let settings;
    if ((assertUnfrozen("use", frozen), value != null))
      if (typeof value == "function") addPlugin(value, ...options);
      else if (typeof value == "object")
        Array.isArray(value) ? addList(value) : addPreset(value);
      else throw new TypeError("Expected usable value, not `" + value + "`");
    return (
      settings &&
        (namespace.settings = Object.assign(
          namespace.settings || {},
          settings
        )),
      processor
    );
    function add(value2) {
      if (typeof value2 == "function") addPlugin(value2);
      else if (typeof value2 == "object")
        if (Array.isArray(value2)) {
          let [plugin, ...options2] = value2;
          addPlugin(plugin, ...options2);
        } else addPreset(value2);
      else throw new TypeError("Expected usable value, not `" + value2 + "`");
    }
    function addPreset(result) {
      addList(result.plugins),
        result.settings &&
          (settings = Object.assign(settings || {}, result.settings));
    }
    function addList(plugins) {
      let index2 = -1;
      if (plugins != null)
        if (Array.isArray(plugins))
          for (; ++index2 < plugins.length; ) {
            let thing = plugins[index2];
            add(thing);
          }
        else
          throw new TypeError(
            "Expected a list of plugins, not `" + plugins + "`"
          );
    }
    function addPlugin(plugin, value2) {
      let index2 = -1,
        entry2;
      for (; ++index2 < attachers.length; )
        if (attachers[index2][0] === plugin) {
          entry2 = attachers[index2];
          break;
        }
      entry2
        ? ((0, import_is_plain_obj.default)(entry2[1]) &&
            (0, import_is_plain_obj.default)(value2) &&
            (value2 = (0, import_extend.default)(!0, entry2[1], value2)),
          (entry2[1] = value2))
        : attachers.push([...arguments]);
    }
  }
  function parse4(doc) {
    processor.freeze();
    let file = vfile(doc),
      Parser2 = processor.Parser;
    return (
      assertParser("parse", Parser2),
      newable(Parser2, "parse")
        ? new Parser2(String(file), file).parse()
        : Parser2(String(file), file)
    );
  }
  function stringify3(node, doc) {
    processor.freeze();
    let file = vfile(doc),
      Compiler = processor.Compiler;
    return (
      assertCompiler("stringify", Compiler),
      assertNode(node),
      newable(Compiler, "compile")
        ? new Compiler(node, file).compile()
        : Compiler(node, file)
    );
  }
  function run(node, doc, callback) {
    if (
      (assertNode(node),
      processor.freeze(),
      !callback &&
        typeof doc == "function" &&
        ((callback = doc), (doc = void 0)),
      !callback)
    )
      return new Promise(executor);
    executor(null, callback);
    function executor(resolve2, reject) {
      transformers.run(node, vfile(doc), done);
      function done(error2, tree, file) {
        (tree = tree || node),
          error2
            ? reject(error2)
            : resolve2
            ? resolve2(tree)
            : callback(null, tree, file);
      }
    }
  }
  function runSync(node, file) {
    let result, complete;
    return (
      processor.run(node, file, done),
      assertDone("runSync", "run", complete),
      result
    );
    function done(error2, tree) {
      bail(error2), (result = tree), (complete = !0);
    }
  }
  function process2(doc, callback) {
    if (
      (processor.freeze(),
      assertParser("process", processor.Parser),
      assertCompiler("process", processor.Compiler),
      !callback)
    )
      return new Promise(executor);
    executor(null, callback);
    function executor(resolve2, reject) {
      let file = vfile(doc);
      processor.run(processor.parse(file), file, (error2, tree, file2) => {
        if (error2 || !tree || !file2) done(error2);
        else {
          let result = processor.stringify(tree, file2);
          result == null ||
            (looksLikeAVFileValue(result)
              ? (file2.value = result)
              : (file2.result = result)),
            done(error2, file2);
        }
      });
      function done(error2, file2) {
        error2 || !file2
          ? reject(error2)
          : resolve2
          ? resolve2(file2)
          : callback(null, file2);
      }
    }
  }
  function processSync(doc) {
    let complete;
    processor.freeze(),
      assertParser("processSync", processor.Parser),
      assertCompiler("processSync", processor.Compiler);
    let file = vfile(doc);
    return (
      processor.process(file, done),
      assertDone("processSync", "process", complete),
      file
    );
    function done(error2) {
      (complete = !0), bail(error2);
    }
  }
}
function newable(value, name) {
  return (
    typeof value == "function" &&
    value.prototype &&
    (keys(value.prototype) || name in value.prototype)
  );
}
function keys(value) {
  let key;
  for (key in value) if (own2.call(value, key)) return !0;
  return !1;
}
function assertParser(name, value) {
  if (typeof value != "function")
    throw new TypeError("Cannot `" + name + "` without `Parser`");
}
function assertCompiler(name, value) {
  if (typeof value != "function")
    throw new TypeError("Cannot `" + name + "` without `Compiler`");
}
function assertUnfrozen(name, frozen) {
  if (frozen)
    throw new Error(
      "Cannot call `" +
        name +
        "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
}
function assertNode(node) {
  if (!(0, import_is_plain_obj.default)(node) || typeof node.type != "string")
    throw new TypeError("Expected node, got `" + node + "`");
}
function assertDone(name, asyncName, complete) {
  if (!complete)
    throw new Error(
      "`" + name + "` finished async. Use `" + asyncName + "` instead"
    );
}
function vfile(value) {
  return looksLikeAVFile(value) ? value : new VFile(value);
}
function looksLikeAVFile(value) {
  return Boolean(
    value &&
      typeof value == "object" &&
      "message" in value &&
      "messages" in value
  );
}
function looksLikeAVFileValue(value) {
  return typeof value == "string" || (0, import_is_buffer2.default)(value);
}

// ../../node_modules/mdast-util-to-string/index.js
function toString(node, options) {
  var { includeImageAlt = !0 } = options || {};
  return one(node, includeImageAlt);
}
function one(node, includeImageAlt) {
  return (
    (node &&
      typeof node == "object" &&
      (node.value ||
        (includeImageAlt ? node.alt : "") ||
        ("children" in node && all(node.children, includeImageAlt)) ||
        (Array.isArray(node) && all(node, includeImageAlt)))) ||
    ""
  );
}
function all(values, includeImageAlt) {
  for (var result = [], index2 = -1; ++index2 < values.length; )
    result[index2] = one(values[index2], includeImageAlt);
  return result.join("");
}

// ../../node_modules/micromark-util-chunked/index.js
function splice(list3, start, remove, items) {
  let end = list3.length,
    chunkStart = 0,
    parameters;
  if (
    (start < 0
      ? (start = -start > end ? 0 : end + start)
      : (start = start > end ? end : start),
    (remove = remove > 0 ? remove : 0),
    items.length < 1e4)
  )
    (parameters = Array.from(items)),
      parameters.unshift(start, remove),
      [].splice.apply(list3, parameters);
  else
    for (
      remove && [].splice.apply(list3, [start, remove]);
      chunkStart < items.length;

    )
      (parameters = items.slice(chunkStart, chunkStart + 1e4)),
        parameters.unshift(start, 0),
        [].splice.apply(list3, parameters),
        (chunkStart += 1e4),
        (start += 1e4);
}
function push(list3, items) {
  return list3.length > 0
    ? (splice(list3, list3.length, 0, items), list3)
    : items;
}

// ../../node_modules/micromark-util-combine-extensions/index.js
var hasOwnProperty = {}.hasOwnProperty;
function combineExtensions(extensions) {
  let all5 = {},
    index2 = -1;
  for (; ++index2 < extensions.length; )
    syntaxExtension(all5, extensions[index2]);
  return all5;
}
function syntaxExtension(all5, extension2) {
  let hook;
  for (hook in extension2) {
    let left =
        (hasOwnProperty.call(all5, hook) ? all5[hook] : void 0) ||
        (all5[hook] = {}),
      right = extension2[hook],
      code3;
    for (code3 in right) {
      hasOwnProperty.call(left, code3) || (left[code3] = []);
      let value = right[code3];
      constructs(
        left[code3],
        Array.isArray(value) ? value : value ? [value] : []
      );
    }
  }
}
function constructs(existing, list3) {
  let index2 = -1,
    before = [];
  for (; ++index2 < list3.length; )
    (list3[index2].add === "after" ? existing : before).push(list3[index2]);
  splice(existing, 0, 0, before);
}

// ../../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js
var unicodePunctuationRegex =
  /[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

// ../../node_modules/micromark-util-character/index.js
var asciiAlpha = regexCheck(/[A-Za-z]/),
  asciiDigit = regexCheck(/\d/),
  asciiHexDigit = regexCheck(/[\dA-Fa-f]/),
  asciiAlphanumeric = regexCheck(/[\dA-Za-z]/),
  asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/),
  asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code3) {
  return code3 !== null && (code3 < 32 || code3 === 127);
}
function markdownLineEndingOrSpace(code3) {
  return code3 !== null && (code3 < 0 || code3 === 32);
}
function markdownLineEnding(code3) {
  return code3 !== null && code3 < -2;
}
function markdownSpace(code3) {
  return code3 === -2 || code3 === -1 || code3 === 32;
}
var unicodeWhitespace = regexCheck(/\s/),
  unicodePunctuation = regexCheck(unicodePunctuationRegex);
function regexCheck(regex) {
  return check;
  function check(code3) {
    return code3 !== null && regex.test(String.fromCharCode(code3));
  }
}

// ../../node_modules/micromark-factory-space/index.js
function factorySpace(effects, ok2, type, max) {
  let limit = max ? max - 1 : Number.POSITIVE_INFINITY,
    size = 0;
  return start;
  function start(code3) {
    return markdownSpace(code3)
      ? (effects.enter(type), prefix(code3))
      : ok2(code3);
  }
  function prefix(code3) {
    return markdownSpace(code3) && size++ < limit
      ? (effects.consume(code3), prefix)
      : (effects.exit(type), ok2(code3));
  }
}

// ../../node_modules/micromark/lib/initialize/content.js
var content = {
  tokenize: initializeContent,
};
function initializeContent(effects) {
  let contentStart = effects.attempt(
      this.parser.constructs.contentInitial,
      afterContentStartConstruct,
      paragraphInitial
    ),
    previous4;
  return contentStart;
  function afterContentStartConstruct(code3) {
    if (code3 === null) {
      effects.consume(code3);
      return;
    }
    return (
      effects.enter("lineEnding"),
      effects.consume(code3),
      effects.exit("lineEnding"),
      factorySpace(effects, contentStart, "linePrefix")
    );
  }
  function paragraphInitial(code3) {
    return effects.enter("paragraph"), lineStart(code3);
  }
  function lineStart(code3) {
    let token = effects.enter("chunkText", {
      contentType: "text",
      previous: previous4,
    });
    return (
      previous4 && (previous4.next = token), (previous4 = token), data2(code3)
    );
  }
  function data2(code3) {
    if (code3 === null) {
      effects.exit("chunkText"),
        effects.exit("paragraph"),
        effects.consume(code3);
      return;
    }
    return markdownLineEnding(code3)
      ? (effects.consume(code3), effects.exit("chunkText"), lineStart)
      : (effects.consume(code3), data2);
  }
}

// ../../node_modules/micromark/lib/initialize/document.js
var document2 = {
    tokenize: initializeDocument,
  },
  containerConstruct = {
    tokenize: tokenizeContainer,
  };
function initializeDocument(effects) {
  let self = this,
    stack = [],
    continued = 0,
    childFlow,
    childToken,
    lineStartOffset;
  return start;
  function start(code3) {
    if (continued < stack.length) {
      let item = stack[continued];
      return (
        (self.containerState = item[1]),
        effects.attempt(
          item[0].continuation,
          documentContinue,
          checkNewContainers
        )(code3)
      );
    }
    return checkNewContainers(code3);
  }
  function documentContinue(code3) {
    if ((continued++, self.containerState._closeFlow)) {
      (self.containerState._closeFlow = void 0), childFlow && closeFlow();
      let indexBeforeExits = self.events.length,
        indexBeforeFlow = indexBeforeExits,
        point4;
      for (; indexBeforeFlow--; )
        if (
          self.events[indexBeforeFlow][0] === "exit" &&
          self.events[indexBeforeFlow][1].type === "chunkFlow"
        ) {
          point4 = self.events[indexBeforeFlow][1].end;
          break;
        }
      exitContainers(continued);
      let index2 = indexBeforeExits;
      for (; index2 < self.events.length; )
        (self.events[index2][1].end = Object.assign({}, point4)), index2++;
      return (
        splice(
          self.events,
          indexBeforeFlow + 1,
          0,
          self.events.slice(indexBeforeExits)
        ),
        (self.events.length = index2),
        checkNewContainers(code3)
      );
    }
    return start(code3);
  }
  function checkNewContainers(code3) {
    if (continued === stack.length) {
      if (!childFlow) return documentContinued(code3);
      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete)
        return flowStart(code3);
      self.interrupt = Boolean(
        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
      );
    }
    return (
      (self.containerState = {}),
      effects.check(
        containerConstruct,
        thereIsANewContainer,
        thereIsNoNewContainer
      )(code3)
    );
  }
  function thereIsANewContainer(code3) {
    return (
      childFlow && closeFlow(),
      exitContainers(continued),
      documentContinued(code3)
    );
  }
  function thereIsNoNewContainer(code3) {
    return (
      (self.parser.lazy[self.now().line] = continued !== stack.length),
      (lineStartOffset = self.now().offset),
      flowStart(code3)
    );
  }
  function documentContinued(code3) {
    return (
      (self.containerState = {}),
      effects.attempt(containerConstruct, containerContinue, flowStart)(code3)
    );
  }
  function containerContinue(code3) {
    return (
      continued++,
      stack.push([self.currentConstruct, self.containerState]),
      documentContinued(code3)
    );
  }
  function flowStart(code3) {
    if (code3 === null) {
      childFlow && closeFlow(), exitContainers(0), effects.consume(code3);
      return;
    }
    return (
      (childFlow = childFlow || self.parser.flow(self.now())),
      effects.enter("chunkFlow", {
        contentType: "flow",
        previous: childToken,
        _tokenizer: childFlow,
      }),
      flowContinue(code3)
    );
  }
  function flowContinue(code3) {
    if (code3 === null) {
      writeToChild(effects.exit("chunkFlow"), !0),
        exitContainers(0),
        effects.consume(code3);
      return;
    }
    return markdownLineEnding(code3)
      ? (effects.consume(code3),
        writeToChild(effects.exit("chunkFlow")),
        (continued = 0),
        (self.interrupt = void 0),
        start)
      : (effects.consume(code3), flowContinue);
  }
  function writeToChild(token, eof) {
    let stream = self.sliceStream(token);
    if (
      (eof && stream.push(null),
      (token.previous = childToken),
      childToken && (childToken.next = token),
      (childToken = token),
      childFlow.defineSkip(token.start),
      childFlow.write(stream),
      self.parser.lazy[token.start.line])
    ) {
      let index2 = childFlow.events.length;
      for (; index2--; )
        if (
          childFlow.events[index2][1].start.offset < lineStartOffset &&
          (!childFlow.events[index2][1].end ||
            childFlow.events[index2][1].end.offset > lineStartOffset)
        )
          return;
      let indexBeforeExits = self.events.length,
        indexBeforeFlow = indexBeforeExits,
        seen,
        point4;
      for (; indexBeforeFlow--; )
        if (
          self.events[indexBeforeFlow][0] === "exit" &&
          self.events[indexBeforeFlow][1].type === "chunkFlow"
        ) {
          if (seen) {
            point4 = self.events[indexBeforeFlow][1].end;
            break;
          }
          seen = !0;
        }
      for (
        exitContainers(continued), index2 = indexBeforeExits;
        index2 < self.events.length;

      )
        (self.events[index2][1].end = Object.assign({}, point4)), index2++;
      splice(
        self.events,
        indexBeforeFlow + 1,
        0,
        self.events.slice(indexBeforeExits)
      ),
        (self.events.length = index2);
    }
  }
  function exitContainers(size) {
    let index2 = stack.length;
    for (; index2-- > size; ) {
      let entry2 = stack[index2];
      (self.containerState = entry2[1]), entry2[0].exit.call(self, effects);
    }
    stack.length = size;
  }
  function closeFlow() {
    childFlow.write([null]),
      (childToken = void 0),
      (childFlow = void 0),
      (self.containerState._closeFlow = void 0);
  }
}
function tokenizeContainer(effects, ok2, nok) {
  return factorySpace(
    effects,
    effects.attempt(this.parser.constructs.document, ok2, nok),
    "linePrefix",
    this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
  );
}

// ../../node_modules/micromark-util-classify-character/index.js
function classifyCharacter(code3) {
  if (
    code3 === null ||
    markdownLineEndingOrSpace(code3) ||
    unicodeWhitespace(code3)
  )
    return 1;
  if (unicodePunctuation(code3)) return 2;
}

// ../../node_modules/micromark-util-resolve-all/index.js
function resolveAll(constructs2, events, context) {
  let called = [],
    index2 = -1;
  for (; ++index2 < constructs2.length; ) {
    let resolve2 = constructs2[index2].resolveAll;
    resolve2 &&
      !called.includes(resolve2) &&
      ((events = resolve2(events, context)), called.push(resolve2));
  }
  return events;
}

// ../../node_modules/micromark-core-commonmark/lib/attention.js
var attention = {
  name: "attention",
  tokenize: tokenizeAttention,
  resolveAll: resolveAllAttention,
};
function resolveAllAttention(events, context) {
  let index2 = -1,
    open,
    group,
    text8,
    openingSequence,
    closingSequence,
    use,
    nextEvents,
    offset;
  for (; ++index2 < events.length; )
    if (
      events[index2][0] === "enter" &&
      events[index2][1].type === "attentionSequence" &&
      events[index2][1]._close
    ) {
      for (open = index2; open--; )
        if (
          events[open][0] === "exit" &&
          events[open][1].type === "attentionSequence" &&
          events[open][1]._open &&
          context.sliceSerialize(events[open][1]).charCodeAt(0) ===
            context.sliceSerialize(events[index2][1]).charCodeAt(0)
        ) {
          if (
            (events[open][1]._close || events[index2][1]._open) &&
            (events[index2][1].end.offset - events[index2][1].start.offset) %
              3 &&
            !(
              (events[open][1].end.offset -
                events[open][1].start.offset +
                events[index2][1].end.offset -
                events[index2][1].start.offset) %
              3
            )
          )
            continue;
          use =
            events[open][1].end.offset - events[open][1].start.offset > 1 &&
            events[index2][1].end.offset - events[index2][1].start.offset > 1
              ? 2
              : 1;
          let start = Object.assign({}, events[open][1].end),
            end = Object.assign({}, events[index2][1].start);
          movePoint(start, -use),
            movePoint(end, use),
            (openingSequence = {
              type: use > 1 ? "strongSequence" : "emphasisSequence",
              start,
              end: Object.assign({}, events[open][1].end),
            }),
            (closingSequence = {
              type: use > 1 ? "strongSequence" : "emphasisSequence",
              start: Object.assign({}, events[index2][1].start),
              end,
            }),
            (text8 = {
              type: use > 1 ? "strongText" : "emphasisText",
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index2][1].start),
            }),
            (group = {
              type: use > 1 ? "strong" : "emphasis",
              start: Object.assign({}, openingSequence.start),
              end: Object.assign({}, closingSequence.end),
            }),
            (events[open][1].end = Object.assign({}, openingSequence.start)),
            (events[index2][1].start = Object.assign({}, closingSequence.end)),
            (nextEvents = []),
            events[open][1].end.offset - events[open][1].start.offset &&
              (nextEvents = push(nextEvents, [
                ["enter", events[open][1], context],
                ["exit", events[open][1], context],
              ])),
            (nextEvents = push(nextEvents, [
              ["enter", group, context],
              ["enter", openingSequence, context],
              ["exit", openingSequence, context],
              ["enter", text8, context],
            ])),
            (nextEvents = push(
              nextEvents,
              resolveAll(
                context.parser.constructs.insideSpan.null,
                events.slice(open + 1, index2),
                context
              )
            )),
            (nextEvents = push(nextEvents, [
              ["exit", text8, context],
              ["enter", closingSequence, context],
              ["exit", closingSequence, context],
              ["exit", group, context],
            ])),
            events[index2][1].end.offset - events[index2][1].start.offset
              ? ((offset = 2),
                (nextEvents = push(nextEvents, [
                  ["enter", events[index2][1], context],
                  ["exit", events[index2][1], context],
                ])))
              : (offset = 0),
            splice(events, open - 1, index2 - open + 3, nextEvents),
            (index2 = open + nextEvents.length - offset - 2);
          break;
        }
    }
  for (index2 = -1; ++index2 < events.length; )
    events[index2][1].type === "attentionSequence" &&
      (events[index2][1].type = "data");
  return events;
}
function tokenizeAttention(effects, ok2) {
  let attentionMarkers2 = this.parser.constructs.attentionMarkers.null,
    previous4 = this.previous,
    before = classifyCharacter(previous4),
    marker;
  return start;
  function start(code3) {
    return (
      effects.enter("attentionSequence"), (marker = code3), sequence(code3)
    );
  }
  function sequence(code3) {
    if (code3 === marker) return effects.consume(code3), sequence;
    let token = effects.exit("attentionSequence"),
      after = classifyCharacter(code3),
      open =
        !after || (after === 2 && before) || attentionMarkers2.includes(code3),
      close =
        !before ||
        (before === 2 && after) ||
        attentionMarkers2.includes(previous4);
    return (
      (token._open = Boolean(
        marker === 42 ? open : open && (before || !close)
      )),
      (token._close = Boolean(
        marker === 42 ? close : close && (after || !open)
      )),
      ok2(code3)
    );
  }
}
function movePoint(point4, offset) {
  (point4.column += offset),
    (point4.offset += offset),
    (point4._bufferIndex += offset);
}

// ../../node_modules/micromark-core-commonmark/lib/autolink.js
var autolink = {
  name: "autolink",
  tokenize: tokenizeAutolink,
};
function tokenizeAutolink(effects, ok2, nok) {
  let size = 1;
  return start;
  function start(code3) {
    return (
      effects.enter("autolink"),
      effects.enter("autolinkMarker"),
      effects.consume(code3),
      effects.exit("autolinkMarker"),
      effects.enter("autolinkProtocol"),
      open
    );
  }
  function open(code3) {
    return asciiAlpha(code3)
      ? (effects.consume(code3), schemeOrEmailAtext)
      : asciiAtext(code3)
      ? emailAtext(code3)
      : nok(code3);
  }
  function schemeOrEmailAtext(code3) {
    return code3 === 43 ||
      code3 === 45 ||
      code3 === 46 ||
      asciiAlphanumeric(code3)
      ? schemeInsideOrEmailAtext(code3)
      : emailAtext(code3);
  }
  function schemeInsideOrEmailAtext(code3) {
    return code3 === 58
      ? (effects.consume(code3), urlInside)
      : (code3 === 43 ||
          code3 === 45 ||
          code3 === 46 ||
          asciiAlphanumeric(code3)) &&
        size++ < 32
      ? (effects.consume(code3), schemeInsideOrEmailAtext)
      : emailAtext(code3);
  }
  function urlInside(code3) {
    return code3 === 62
      ? (effects.exit("autolinkProtocol"), end(code3))
      : code3 === null || code3 === 32 || code3 === 60 || asciiControl(code3)
      ? nok(code3)
      : (effects.consume(code3), urlInside);
  }
  function emailAtext(code3) {
    return code3 === 64
      ? (effects.consume(code3), (size = 0), emailAtSignOrDot)
      : asciiAtext(code3)
      ? (effects.consume(code3), emailAtext)
      : nok(code3);
  }
  function emailAtSignOrDot(code3) {
    return asciiAlphanumeric(code3) ? emailLabel(code3) : nok(code3);
  }
  function emailLabel(code3) {
    return code3 === 46
      ? (effects.consume(code3), (size = 0), emailAtSignOrDot)
      : code3 === 62
      ? ((effects.exit("autolinkProtocol").type = "autolinkEmail"), end(code3))
      : emailValue(code3);
  }
  function emailValue(code3) {
    return (code3 === 45 || asciiAlphanumeric(code3)) && size++ < 63
      ? (effects.consume(code3), code3 === 45 ? emailValue : emailLabel)
      : nok(code3);
  }
  function end(code3) {
    return (
      effects.enter("autolinkMarker"),
      effects.consume(code3),
      effects.exit("autolinkMarker"),
      effects.exit("autolink"),
      ok2
    );
  }
}

// ../../node_modules/micromark-core-commonmark/lib/blank-line.js
var blankLine = {
  tokenize: tokenizeBlankLine,
  partial: !0,
};
function tokenizeBlankLine(effects, ok2, nok) {
  return factorySpace(effects, afterWhitespace, "linePrefix");
  function afterWhitespace(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? ok2(code3)
      : nok(code3);
  }
}

// ../../node_modules/micromark-core-commonmark/lib/block-quote.js
var blockQuote = {
  name: "blockQuote",
  tokenize: tokenizeBlockQuoteStart,
  continuation: {
    tokenize: tokenizeBlockQuoteContinuation,
  },
  exit,
};
function tokenizeBlockQuoteStart(effects, ok2, nok) {
  let self = this;
  return start;
  function start(code3) {
    if (code3 === 62) {
      let state = self.containerState;
      return (
        state.open ||
          (effects.enter("blockQuote", {
            _container: !0,
          }),
          (state.open = !0)),
        effects.enter("blockQuotePrefix"),
        effects.enter("blockQuoteMarker"),
        effects.consume(code3),
        effects.exit("blockQuoteMarker"),
        after
      );
    }
    return nok(code3);
  }
  function after(code3) {
    return markdownSpace(code3)
      ? (effects.enter("blockQuotePrefixWhitespace"),
        effects.consume(code3),
        effects.exit("blockQuotePrefixWhitespace"),
        effects.exit("blockQuotePrefix"),
        ok2)
      : (effects.exit("blockQuotePrefix"), ok2(code3));
  }
}
function tokenizeBlockQuoteContinuation(effects, ok2, nok) {
  return factorySpace(
    effects,
    effects.attempt(blockQuote, ok2, nok),
    "linePrefix",
    this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
  );
}
function exit(effects) {
  effects.exit("blockQuote");
}

// ../../node_modules/micromark-core-commonmark/lib/character-escape.js
var characterEscape = {
  name: "characterEscape",
  tokenize: tokenizeCharacterEscape,
};
function tokenizeCharacterEscape(effects, ok2, nok) {
  return start;
  function start(code3) {
    return (
      effects.enter("characterEscape"),
      effects.enter("escapeMarker"),
      effects.consume(code3),
      effects.exit("escapeMarker"),
      open
    );
  }
  function open(code3) {
    return asciiPunctuation(code3)
      ? (effects.enter("characterEscapeValue"),
        effects.consume(code3),
        effects.exit("characterEscapeValue"),
        effects.exit("characterEscape"),
        ok2)
      : nok(code3);
  }
}

// ../../node_modules/character-entities/index.js
var characterEntities = {
  AEli: "\xC6",
  AElig: "\xC6",
  AM: "&",
  AMP: "&",
  Aacut: "\xC1",
  Aacute: "\xC1",
  Abreve: "\u0102",
  Acir: "\xC2",
  Acirc: "\xC2",
  Acy: "\u0410",
  Afr: "\u{1D504}",
  Agrav: "\xC0",
  Agrave: "\xC0",
  Alpha: "\u0391",
  Amacr: "\u0100",
  And: "\u2A53",
  Aogon: "\u0104",
  Aopf: "\u{1D538}",
  ApplyFunction: "\u2061",
  Arin: "\xC5",
  Aring: "\xC5",
  Ascr: "\u{1D49C}",
  Assign: "\u2254",
  Atild: "\xC3",
  Atilde: "\xC3",
  Aum: "\xC4",
  Auml: "\xC4",
  Backslash: "\u2216",
  Barv: "\u2AE7",
  Barwed: "\u2306",
  Bcy: "\u0411",
  Because: "\u2235",
  Bernoullis: "\u212C",
  Beta: "\u0392",
  Bfr: "\u{1D505}",
  Bopf: "\u{1D539}",
  Breve: "\u02D8",
  Bscr: "\u212C",
  Bumpeq: "\u224E",
  CHcy: "\u0427",
  COP: "\xA9",
  COPY: "\xA9",
  Cacute: "\u0106",
  Cap: "\u22D2",
  CapitalDifferentialD: "\u2145",
  Cayleys: "\u212D",
  Ccaron: "\u010C",
  Ccedi: "\xC7",
  Ccedil: "\xC7",
  Ccirc: "\u0108",
  Cconint: "\u2230",
  Cdot: "\u010A",
  Cedilla: "\xB8",
  CenterDot: "\xB7",
  Cfr: "\u212D",
  Chi: "\u03A7",
  CircleDot: "\u2299",
  CircleMinus: "\u2296",
  CirclePlus: "\u2295",
  CircleTimes: "\u2297",
  ClockwiseContourIntegral: "\u2232",
  CloseCurlyDoubleQuote: "\u201D",
  CloseCurlyQuote: "\u2019",
  Colon: "\u2237",
  Colone: "\u2A74",
  Congruent: "\u2261",
  Conint: "\u222F",
  ContourIntegral: "\u222E",
  Copf: "\u2102",
  Coproduct: "\u2210",
  CounterClockwiseContourIntegral: "\u2233",
  Cross: "\u2A2F",
  Cscr: "\u{1D49E}",
  Cup: "\u22D3",
  CupCap: "\u224D",
  DD: "\u2145",
  DDotrahd: "\u2911",
  DJcy: "\u0402",
  DScy: "\u0405",
  DZcy: "\u040F",
  Dagger: "\u2021",
  Darr: "\u21A1",
  Dashv: "\u2AE4",
  Dcaron: "\u010E",
  Dcy: "\u0414",
  Del: "\u2207",
  Delta: "\u0394",
  Dfr: "\u{1D507}",
  DiacriticalAcute: "\xB4",
  DiacriticalDot: "\u02D9",
  DiacriticalDoubleAcute: "\u02DD",
  DiacriticalGrave: "`",
  DiacriticalTilde: "\u02DC",
  Diamond: "\u22C4",
  DifferentialD: "\u2146",
  Dopf: "\u{1D53B}",
  Dot: "\xA8",
  DotDot: "\u20DC",
  DotEqual: "\u2250",
  DoubleContourIntegral: "\u222F",
  DoubleDot: "\xA8",
  DoubleDownArrow: "\u21D3",
  DoubleLeftArrow: "\u21D0",
  DoubleLeftRightArrow: "\u21D4",
  DoubleLeftTee: "\u2AE4",
  DoubleLongLeftArrow: "\u27F8",
  DoubleLongLeftRightArrow: "\u27FA",
  DoubleLongRightArrow: "\u27F9",
  DoubleRightArrow: "\u21D2",
  DoubleRightTee: "\u22A8",
  DoubleUpArrow: "\u21D1",
  DoubleUpDownArrow: "\u21D5",
  DoubleVerticalBar: "\u2225",
  DownArrow: "\u2193",
  DownArrowBar: "\u2913",
  DownArrowUpArrow: "\u21F5",
  DownBreve: "\u0311",
  DownLeftRightVector: "\u2950",
  DownLeftTeeVector: "\u295E",
  DownLeftVector: "\u21BD",
  DownLeftVectorBar: "\u2956",
  DownRightTeeVector: "\u295F",
  DownRightVector: "\u21C1",
  DownRightVectorBar: "\u2957",
  DownTee: "\u22A4",
  DownTeeArrow: "\u21A7",
  Downarrow: "\u21D3",
  Dscr: "\u{1D49F}",
  Dstrok: "\u0110",
  ENG: "\u014A",
  ET: "\xD0",
  ETH: "\xD0",
  Eacut: "\xC9",
  Eacute: "\xC9",
  Ecaron: "\u011A",
  Ecir: "\xCA",
  Ecirc: "\xCA",
  Ecy: "\u042D",
  Edot: "\u0116",
  Efr: "\u{1D508}",
  Egrav: "\xC8",
  Egrave: "\xC8",
  Element: "\u2208",
  Emacr: "\u0112",
  EmptySmallSquare: "\u25FB",
  EmptyVerySmallSquare: "\u25AB",
  Eogon: "\u0118",
  Eopf: "\u{1D53C}",
  Epsilon: "\u0395",
  Equal: "\u2A75",
  EqualTilde: "\u2242",
  Equilibrium: "\u21CC",
  Escr: "\u2130",
  Esim: "\u2A73",
  Eta: "\u0397",
  Eum: "\xCB",
  Euml: "\xCB",
  Exists: "\u2203",
  ExponentialE: "\u2147",
  Fcy: "\u0424",
  Ffr: "\u{1D509}",
  FilledSmallSquare: "\u25FC",
  FilledVerySmallSquare: "\u25AA",
  Fopf: "\u{1D53D}",
  ForAll: "\u2200",
  Fouriertrf: "\u2131",
  Fscr: "\u2131",
  GJcy: "\u0403",
  G: ">",
  GT: ">",
  Gamma: "\u0393",
  Gammad: "\u03DC",
  Gbreve: "\u011E",
  Gcedil: "\u0122",
  Gcirc: "\u011C",
  Gcy: "\u0413",
  Gdot: "\u0120",
  Gfr: "\u{1D50A}",
  Gg: "\u22D9",
  Gopf: "\u{1D53E}",
  GreaterEqual: "\u2265",
  GreaterEqualLess: "\u22DB",
  GreaterFullEqual: "\u2267",
  GreaterGreater: "\u2AA2",
  GreaterLess: "\u2277",
  GreaterSlantEqual: "\u2A7E",
  GreaterTilde: "\u2273",
  Gscr: "\u{1D4A2}",
  Gt: "\u226B",
  HARDcy: "\u042A",
  Hacek: "\u02C7",
  Hat: "^",
  Hcirc: "\u0124",
  Hfr: "\u210C",
  HilbertSpace: "\u210B",
  Hopf: "\u210D",
  HorizontalLine: "\u2500",
  Hscr: "\u210B",
  Hstrok: "\u0126",
  HumpDownHump: "\u224E",
  HumpEqual: "\u224F",
  IEcy: "\u0415",
  IJlig: "\u0132",
  IOcy: "\u0401",
  Iacut: "\xCD",
  Iacute: "\xCD",
  Icir: "\xCE",
  Icirc: "\xCE",
  Icy: "\u0418",
  Idot: "\u0130",
  Ifr: "\u2111",
  Igrav: "\xCC",
  Igrave: "\xCC",
  Im: "\u2111",
  Imacr: "\u012A",
  ImaginaryI: "\u2148",
  Implies: "\u21D2",
  Int: "\u222C",
  Integral: "\u222B",
  Intersection: "\u22C2",
  InvisibleComma: "\u2063",
  InvisibleTimes: "\u2062",
  Iogon: "\u012E",
  Iopf: "\u{1D540}",
  Iota: "\u0399",
  Iscr: "\u2110",
  Itilde: "\u0128",
  Iukcy: "\u0406",
  Ium: "\xCF",
  Iuml: "\xCF",
  Jcirc: "\u0134",
  Jcy: "\u0419",
  Jfr: "\u{1D50D}",
  Jopf: "\u{1D541}",
  Jscr: "\u{1D4A5}",
  Jsercy: "\u0408",
  Jukcy: "\u0404",
  KHcy: "\u0425",
  KJcy: "\u040C",
  Kappa: "\u039A",
  Kcedil: "\u0136",
  Kcy: "\u041A",
  Kfr: "\u{1D50E}",
  Kopf: "\u{1D542}",
  Kscr: "\u{1D4A6}",
  LJcy: "\u0409",
  L: "<",
  LT: "<",
  Lacute: "\u0139",
  Lambda: "\u039B",
  Lang: "\u27EA",
  Laplacetrf: "\u2112",
  Larr: "\u219E",
  Lcaron: "\u013D",
  Lcedil: "\u013B",
  Lcy: "\u041B",
  LeftAngleBracket: "\u27E8",
  LeftArrow: "\u2190",
  LeftArrowBar: "\u21E4",
  LeftArrowRightArrow: "\u21C6",
  LeftCeiling: "\u2308",
  LeftDoubleBracket: "\u27E6",
  LeftDownTeeVector: "\u2961",
  LeftDownVector: "\u21C3",
  LeftDownVectorBar: "\u2959",
  LeftFloor: "\u230A",
  LeftRightArrow: "\u2194",
  LeftRightVector: "\u294E",
  LeftTee: "\u22A3",
  LeftTeeArrow: "\u21A4",
  LeftTeeVector: "\u295A",
  LeftTriangle: "\u22B2",
  LeftTriangleBar: "\u29CF",
  LeftTriangleEqual: "\u22B4",
  LeftUpDownVector: "\u2951",
  LeftUpTeeVector: "\u2960",
  LeftUpVector: "\u21BF",
  LeftUpVectorBar: "\u2958",
  LeftVector: "\u21BC",
  LeftVectorBar: "\u2952",
  Leftarrow: "\u21D0",
  Leftrightarrow: "\u21D4",
  LessEqualGreater: "\u22DA",
  LessFullEqual: "\u2266",
  LessGreater: "\u2276",
  LessLess: "\u2AA1",
  LessSlantEqual: "\u2A7D",
  LessTilde: "\u2272",
  Lfr: "\u{1D50F}",
  Ll: "\u22D8",
  Lleftarrow: "\u21DA",
  Lmidot: "\u013F",
  LongLeftArrow: "\u27F5",
  LongLeftRightArrow: "\u27F7",
  LongRightArrow: "\u27F6",
  Longleftarrow: "\u27F8",
  Longleftrightarrow: "\u27FA",
  Longrightarrow: "\u27F9",
  Lopf: "\u{1D543}",
  LowerLeftArrow: "\u2199",
  LowerRightArrow: "\u2198",
  Lscr: "\u2112",
  Lsh: "\u21B0",
  Lstrok: "\u0141",
  Lt: "\u226A",
  Map: "\u2905",
  Mcy: "\u041C",
  MediumSpace: "\u205F",
  Mellintrf: "\u2133",
  Mfr: "\u{1D510}",
  MinusPlus: "\u2213",
  Mopf: "\u{1D544}",
  Mscr: "\u2133",
  Mu: "\u039C",
  NJcy: "\u040A",
  Nacute: "\u0143",
  Ncaron: "\u0147",
  Ncedil: "\u0145",
  Ncy: "\u041D",
  NegativeMediumSpace: "\u200B",
  NegativeThickSpace: "\u200B",
  NegativeThinSpace: "\u200B",
  NegativeVeryThinSpace: "\u200B",
  NestedGreaterGreater: "\u226B",
  NestedLessLess: "\u226A",
  NewLine: `
`,
  Nfr: "\u{1D511}",
  NoBreak: "\u2060",
  NonBreakingSpace: "\xA0",
  Nopf: "\u2115",
  Not: "\u2AEC",
  NotCongruent: "\u2262",
  NotCupCap: "\u226D",
  NotDoubleVerticalBar: "\u2226",
  NotElement: "\u2209",
  NotEqual: "\u2260",
  NotEqualTilde: "\u2242\u0338",
  NotExists: "\u2204",
  NotGreater: "\u226F",
  NotGreaterEqual: "\u2271",
  NotGreaterFullEqual: "\u2267\u0338",
  NotGreaterGreater: "\u226B\u0338",
  NotGreaterLess: "\u2279",
  NotGreaterSlantEqual: "\u2A7E\u0338",
  NotGreaterTilde: "\u2275",
  NotHumpDownHump: "\u224E\u0338",
  NotHumpEqual: "\u224F\u0338",
  NotLeftTriangle: "\u22EA",
  NotLeftTriangleBar: "\u29CF\u0338",
  NotLeftTriangleEqual: "\u22EC",
  NotLess: "\u226E",
  NotLessEqual: "\u2270",
  NotLessGreater: "\u2278",
  NotLessLess: "\u226A\u0338",
  NotLessSlantEqual: "\u2A7D\u0338",
  NotLessTilde: "\u2274",
  NotNestedGreaterGreater: "\u2AA2\u0338",
  NotNestedLessLess: "\u2AA1\u0338",
  NotPrecedes: "\u2280",
  NotPrecedesEqual: "\u2AAF\u0338",
  NotPrecedesSlantEqual: "\u22E0",
  NotReverseElement: "\u220C",
  NotRightTriangle: "\u22EB",
  NotRightTriangleBar: "\u29D0\u0338",
  NotRightTriangleEqual: "\u22ED",
  NotSquareSubset: "\u228F\u0338",
  NotSquareSubsetEqual: "\u22E2",
  NotSquareSuperset: "\u2290\u0338",
  NotSquareSupersetEqual: "\u22E3",
  NotSubset: "\u2282\u20D2",
  NotSubsetEqual: "\u2288",
  NotSucceeds: "\u2281",
  NotSucceedsEqual: "\u2AB0\u0338",
  NotSucceedsSlantEqual: "\u22E1",
  NotSucceedsTilde: "\u227F\u0338",
  NotSuperset: "\u2283\u20D2",
  NotSupersetEqual: "\u2289",
  NotTilde: "\u2241",
  NotTildeEqual: "\u2244",
  NotTildeFullEqual: "\u2247",
  NotTildeTilde: "\u2249",
  NotVerticalBar: "\u2224",
  Nscr: "\u{1D4A9}",
  Ntild: "\xD1",
  Ntilde: "\xD1",
  Nu: "\u039D",
  OElig: "\u0152",
  Oacut: "\xD3",
  Oacute: "\xD3",
  Ocir: "\xD4",
  Ocirc: "\xD4",
  Ocy: "\u041E",
  Odblac: "\u0150",
  Ofr: "\u{1D512}",
  Ograv: "\xD2",
  Ograve: "\xD2",
  Omacr: "\u014C",
  Omega: "\u03A9",
  Omicron: "\u039F",
  Oopf: "\u{1D546}",
  OpenCurlyDoubleQuote: "\u201C",
  OpenCurlyQuote: "\u2018",
  Or: "\u2A54",
  Oscr: "\u{1D4AA}",
  Oslas: "\xD8",
  Oslash: "\xD8",
  Otild: "\xD5",
  Otilde: "\xD5",
  Otimes: "\u2A37",
  Oum: "\xD6",
  Ouml: "\xD6",
  OverBar: "\u203E",
  OverBrace: "\u23DE",
  OverBracket: "\u23B4",
  OverParenthesis: "\u23DC",
  PartialD: "\u2202",
  Pcy: "\u041F",
  Pfr: "\u{1D513}",
  Phi: "\u03A6",
  Pi: "\u03A0",
  PlusMinus: "\xB1",
  Poincareplane: "\u210C",
  Popf: "\u2119",
  Pr: "\u2ABB",
  Precedes: "\u227A",
  PrecedesEqual: "\u2AAF",
  PrecedesSlantEqual: "\u227C",
  PrecedesTilde: "\u227E",
  Prime: "\u2033",
  Product: "\u220F",
  Proportion: "\u2237",
  Proportional: "\u221D",
  Pscr: "\u{1D4AB}",
  Psi: "\u03A8",
  QUO: '"',
  QUOT: '"',
  Qfr: "\u{1D514}",
  Qopf: "\u211A",
  Qscr: "\u{1D4AC}",
  RBarr: "\u2910",
  RE: "\xAE",
  REG: "\xAE",
  Racute: "\u0154",
  Rang: "\u27EB",
  Rarr: "\u21A0",
  Rarrtl: "\u2916",
  Rcaron: "\u0158",
  Rcedil: "\u0156",
  Rcy: "\u0420",
  Re: "\u211C",
  ReverseElement: "\u220B",
  ReverseEquilibrium: "\u21CB",
  ReverseUpEquilibrium: "\u296F",
  Rfr: "\u211C",
  Rho: "\u03A1",
  RightAngleBracket: "\u27E9",
  RightArrow: "\u2192",
  RightArrowBar: "\u21E5",
  RightArrowLeftArrow: "\u21C4",
  RightCeiling: "\u2309",
  RightDoubleBracket: "\u27E7",
  RightDownTeeVector: "\u295D",
  RightDownVector: "\u21C2",
  RightDownVectorBar: "\u2955",
  RightFloor: "\u230B",
  RightTee: "\u22A2",
  RightTeeArrow: "\u21A6",
  RightTeeVector: "\u295B",
  RightTriangle: "\u22B3",
  RightTriangleBar: "\u29D0",
  RightTriangleEqual: "\u22B5",
  RightUpDownVector: "\u294F",
  RightUpTeeVector: "\u295C",
  RightUpVector: "\u21BE",
  RightUpVectorBar: "\u2954",
  RightVector: "\u21C0",
  RightVectorBar: "\u2953",
  Rightarrow: "\u21D2",
  Ropf: "\u211D",
  RoundImplies: "\u2970",
  Rrightarrow: "\u21DB",
  Rscr: "\u211B",
  Rsh: "\u21B1",
  RuleDelayed: "\u29F4",
  SHCHcy: "\u0429",
  SHcy: "\u0428",
  SOFTcy: "\u042C",
  Sacute: "\u015A",
  Sc: "\u2ABC",
  Scaron: "\u0160",
  Scedil: "\u015E",
  Scirc: "\u015C",
  Scy: "\u0421",
  Sfr: "\u{1D516}",
  ShortDownArrow: "\u2193",
  ShortLeftArrow: "\u2190",
  ShortRightArrow: "\u2192",
  ShortUpArrow: "\u2191",
  Sigma: "\u03A3",
  SmallCircle: "\u2218",
  Sopf: "\u{1D54A}",
  Sqrt: "\u221A",
  Square: "\u25A1",
  SquareIntersection: "\u2293",
  SquareSubset: "\u228F",
  SquareSubsetEqual: "\u2291",
  SquareSuperset: "\u2290",
  SquareSupersetEqual: "\u2292",
  SquareUnion: "\u2294",
  Sscr: "\u{1D4AE}",
  Star: "\u22C6",
  Sub: "\u22D0",
  Subset: "\u22D0",
  SubsetEqual: "\u2286",
  Succeeds: "\u227B",
  SucceedsEqual: "\u2AB0",
  SucceedsSlantEqual: "\u227D",
  SucceedsTilde: "\u227F",
  SuchThat: "\u220B",
  Sum: "\u2211",
  Sup: "\u22D1",
  Superset: "\u2283",
  SupersetEqual: "\u2287",
  Supset: "\u22D1",
  THOR: "\xDE",
  THORN: "\xDE",
  TRADE: "\u2122",
  TSHcy: "\u040B",
  TScy: "\u0426",
  Tab: "	",
  Tau: "\u03A4",
  Tcaron: "\u0164",
  Tcedil: "\u0162",
  Tcy: "\u0422",
  Tfr: "\u{1D517}",
  Therefore: "\u2234",
  Theta: "\u0398",
  ThickSpace: "\u205F\u200A",
  ThinSpace: "\u2009",
  Tilde: "\u223C",
  TildeEqual: "\u2243",
  TildeFullEqual: "\u2245",
  TildeTilde: "\u2248",
  Topf: "\u{1D54B}",
  TripleDot: "\u20DB",
  Tscr: "\u{1D4AF}",
  Tstrok: "\u0166",
  Uacut: "\xDA",
  Uacute: "\xDA",
  Uarr: "\u219F",
  Uarrocir: "\u2949",
  Ubrcy: "\u040E",
  Ubreve: "\u016C",
  Ucir: "\xDB",
  Ucirc: "\xDB",
  Ucy: "\u0423",
  Udblac: "\u0170",
  Ufr: "\u{1D518}",
  Ugrav: "\xD9",
  Ugrave: "\xD9",
  Umacr: "\u016A",
  UnderBar: "_",
  UnderBrace: "\u23DF",
  UnderBracket: "\u23B5",
  UnderParenthesis: "\u23DD",
  Union: "\u22C3",
  UnionPlus: "\u228E",
  Uogon: "\u0172",
  Uopf: "\u{1D54C}",
  UpArrow: "\u2191",
  UpArrowBar: "\u2912",
  UpArrowDownArrow: "\u21C5",
  UpDownArrow: "\u2195",
  UpEquilibrium: "\u296E",
  UpTee: "\u22A5",
  UpTeeArrow: "\u21A5",
  Uparrow: "\u21D1",
  Updownarrow: "\u21D5",
  UpperLeftArrow: "\u2196",
  UpperRightArrow: "\u2197",
  Upsi: "\u03D2",
  Upsilon: "\u03A5",
  Uring: "\u016E",
  Uscr: "\u{1D4B0}",
  Utilde: "\u0168",
  Uum: "\xDC",
  Uuml: "\xDC",
  VDash: "\u22AB",
  Vbar: "\u2AEB",
  Vcy: "\u0412",
  Vdash: "\u22A9",
  Vdashl: "\u2AE6",
  Vee: "\u22C1",
  Verbar: "\u2016",
  Vert: "\u2016",
  VerticalBar: "\u2223",
  VerticalLine: "|",
  VerticalSeparator: "\u2758",
  VerticalTilde: "\u2240",
  VeryThinSpace: "\u200A",
  Vfr: "\u{1D519}",
  Vopf: "\u{1D54D}",
  Vscr: "\u{1D4B1}",
  Vvdash: "\u22AA",
  Wcirc: "\u0174",
  Wedge: "\u22C0",
  Wfr: "\u{1D51A}",
  Wopf: "\u{1D54E}",
  Wscr: "\u{1D4B2}",
  Xfr: "\u{1D51B}",
  Xi: "\u039E",
  Xopf: "\u{1D54F}",
  Xscr: "\u{1D4B3}",
  YAcy: "\u042F",
  YIcy: "\u0407",
  YUcy: "\u042E",
  Yacut: "\xDD",
  Yacute: "\xDD",
  Ycirc: "\u0176",
  Ycy: "\u042B",
  Yfr: "\u{1D51C}",
  Yopf: "\u{1D550}",
  Yscr: "\u{1D4B4}",
  Yuml: "\u0178",
  ZHcy: "\u0416",
  Zacute: "\u0179",
  Zcaron: "\u017D",
  Zcy: "\u0417",
  Zdot: "\u017B",
  ZeroWidthSpace: "\u200B",
  Zeta: "\u0396",
  Zfr: "\u2128",
  Zopf: "\u2124",
  Zscr: "\u{1D4B5}",
  aacut: "\xE1",
  aacute: "\xE1",
  abreve: "\u0103",
  ac: "\u223E",
  acE: "\u223E\u0333",
  acd: "\u223F",
  acir: "\xE2",
  acirc: "\xE2",
  acut: "\xB4",
  acute: "\xB4",
  acy: "\u0430",
  aeli: "\xE6",
  aelig: "\xE6",
  af: "\u2061",
  afr: "\u{1D51E}",
  agrav: "\xE0",
  agrave: "\xE0",
  alefsym: "\u2135",
  aleph: "\u2135",
  alpha: "\u03B1",
  amacr: "\u0101",
  amalg: "\u2A3F",
  am: "&",
  amp: "&",
  and: "\u2227",
  andand: "\u2A55",
  andd: "\u2A5C",
  andslope: "\u2A58",
  andv: "\u2A5A",
  ang: "\u2220",
  ange: "\u29A4",
  angle: "\u2220",
  angmsd: "\u2221",
  angmsdaa: "\u29A8",
  angmsdab: "\u29A9",
  angmsdac: "\u29AA",
  angmsdad: "\u29AB",
  angmsdae: "\u29AC",
  angmsdaf: "\u29AD",
  angmsdag: "\u29AE",
  angmsdah: "\u29AF",
  angrt: "\u221F",
  angrtvb: "\u22BE",
  angrtvbd: "\u299D",
  angsph: "\u2222",
  angst: "\xC5",
  angzarr: "\u237C",
  aogon: "\u0105",
  aopf: "\u{1D552}",
  ap: "\u2248",
  apE: "\u2A70",
  apacir: "\u2A6F",
  ape: "\u224A",
  apid: "\u224B",
  apos: "'",
  approx: "\u2248",
  approxeq: "\u224A",
  arin: "\xE5",
  aring: "\xE5",
  ascr: "\u{1D4B6}",
  ast: "*",
  asymp: "\u2248",
  asympeq: "\u224D",
  atild: "\xE3",
  atilde: "\xE3",
  aum: "\xE4",
  auml: "\xE4",
  awconint: "\u2233",
  awint: "\u2A11",
  bNot: "\u2AED",
  backcong: "\u224C",
  backepsilon: "\u03F6",
  backprime: "\u2035",
  backsim: "\u223D",
  backsimeq: "\u22CD",
  barvee: "\u22BD",
  barwed: "\u2305",
  barwedge: "\u2305",
  bbrk: "\u23B5",
  bbrktbrk: "\u23B6",
  bcong: "\u224C",
  bcy: "\u0431",
  bdquo: "\u201E",
  becaus: "\u2235",
  because: "\u2235",
  bemptyv: "\u29B0",
  bepsi: "\u03F6",
  bernou: "\u212C",
  beta: "\u03B2",
  beth: "\u2136",
  between: "\u226C",
  bfr: "\u{1D51F}",
  bigcap: "\u22C2",
  bigcirc: "\u25EF",
  bigcup: "\u22C3",
  bigodot: "\u2A00",
  bigoplus: "\u2A01",
  bigotimes: "\u2A02",
  bigsqcup: "\u2A06",
  bigstar: "\u2605",
  bigtriangledown: "\u25BD",
  bigtriangleup: "\u25B3",
  biguplus: "\u2A04",
  bigvee: "\u22C1",
  bigwedge: "\u22C0",
  bkarow: "\u290D",
  blacklozenge: "\u29EB",
  blacksquare: "\u25AA",
  blacktriangle: "\u25B4",
  blacktriangledown: "\u25BE",
  blacktriangleleft: "\u25C2",
  blacktriangleright: "\u25B8",
  blank: "\u2423",
  blk12: "\u2592",
  blk14: "\u2591",
  blk34: "\u2593",
  block: "\u2588",
  bne: "=\u20E5",
  bnequiv: "\u2261\u20E5",
  bnot: "\u2310",
  bopf: "\u{1D553}",
  bot: "\u22A5",
  bottom: "\u22A5",
  bowtie: "\u22C8",
  boxDL: "\u2557",
  boxDR: "\u2554",
  boxDl: "\u2556",
  boxDr: "\u2553",
  boxH: "\u2550",
  boxHD: "\u2566",
  boxHU: "\u2569",
  boxHd: "\u2564",
  boxHu: "\u2567",
  boxUL: "\u255D",
  boxUR: "\u255A",
  boxUl: "\u255C",
  boxUr: "\u2559",
  boxV: "\u2551",
  boxVH: "\u256C",
  boxVL: "\u2563",
  boxVR: "\u2560",
  boxVh: "\u256B",
  boxVl: "\u2562",
  boxVr: "\u255F",
  boxbox: "\u29C9",
  boxdL: "\u2555",
  boxdR: "\u2552",
  boxdl: "\u2510",
  boxdr: "\u250C",
  boxh: "\u2500",
  boxhD: "\u2565",
  boxhU: "\u2568",
  boxhd: "\u252C",
  boxhu: "\u2534",
  boxminus: "\u229F",
  boxplus: "\u229E",
  boxtimes: "\u22A0",
  boxuL: "\u255B",
  boxuR: "\u2558",
  boxul: "\u2518",
  boxur: "\u2514",
  boxv: "\u2502",
  boxvH: "\u256A",
  boxvL: "\u2561",
  boxvR: "\u255E",
  boxvh: "\u253C",
  boxvl: "\u2524",
  boxvr: "\u251C",
  bprime: "\u2035",
  breve: "\u02D8",
  brvba: "\xA6",
  brvbar: "\xA6",
  bscr: "\u{1D4B7}",
  bsemi: "\u204F",
  bsim: "\u223D",
  bsime: "\u22CD",
  bsol: "\\",
  bsolb: "\u29C5",
  bsolhsub: "\u27C8",
  bull: "\u2022",
  bullet: "\u2022",
  bump: "\u224E",
  bumpE: "\u2AAE",
  bumpe: "\u224F",
  bumpeq: "\u224F",
  cacute: "\u0107",
  cap: "\u2229",
  capand: "\u2A44",
  capbrcup: "\u2A49",
  capcap: "\u2A4B",
  capcup: "\u2A47",
  capdot: "\u2A40",
  caps: "\u2229\uFE00",
  caret: "\u2041",
  caron: "\u02C7",
  ccaps: "\u2A4D",
  ccaron: "\u010D",
  ccedi: "\xE7",
  ccedil: "\xE7",
  ccirc: "\u0109",
  ccups: "\u2A4C",
  ccupssm: "\u2A50",
  cdot: "\u010B",
  cedi: "\xB8",
  cedil: "\xB8",
  cemptyv: "\u29B2",
  cen: "\xA2",
  cent: "\xA2",
  centerdot: "\xB7",
  cfr: "\u{1D520}",
  chcy: "\u0447",
  check: "\u2713",
  checkmark: "\u2713",
  chi: "\u03C7",
  cir: "\u25CB",
  cirE: "\u29C3",
  circ: "\u02C6",
  circeq: "\u2257",
  circlearrowleft: "\u21BA",
  circlearrowright: "\u21BB",
  circledR: "\xAE",
  circledS: "\u24C8",
  circledast: "\u229B",
  circledcirc: "\u229A",
  circleddash: "\u229D",
  cire: "\u2257",
  cirfnint: "\u2A10",
  cirmid: "\u2AEF",
  cirscir: "\u29C2",
  clubs: "\u2663",
  clubsuit: "\u2663",
  colon: ":",
  colone: "\u2254",
  coloneq: "\u2254",
  comma: ",",
  commat: "@",
  comp: "\u2201",
  compfn: "\u2218",
  complement: "\u2201",
  complexes: "\u2102",
  cong: "\u2245",
  congdot: "\u2A6D",
  conint: "\u222E",
  copf: "\u{1D554}",
  coprod: "\u2210",
  cop: "\xA9",
  copy: "\xA9",
  copysr: "\u2117",
  crarr: "\u21B5",
  cross: "\u2717",
  cscr: "\u{1D4B8}",
  csub: "\u2ACF",
  csube: "\u2AD1",
  csup: "\u2AD0",
  csupe: "\u2AD2",
  ctdot: "\u22EF",
  cudarrl: "\u2938",
  cudarrr: "\u2935",
  cuepr: "\u22DE",
  cuesc: "\u22DF",
  cularr: "\u21B6",
  cularrp: "\u293D",
  cup: "\u222A",
  cupbrcap: "\u2A48",
  cupcap: "\u2A46",
  cupcup: "\u2A4A",
  cupdot: "\u228D",
  cupor: "\u2A45",
  cups: "\u222A\uFE00",
  curarr: "\u21B7",
  curarrm: "\u293C",
  curlyeqprec: "\u22DE",
  curlyeqsucc: "\u22DF",
  curlyvee: "\u22CE",
  curlywedge: "\u22CF",
  curre: "\xA4",
  curren: "\xA4",
  curvearrowleft: "\u21B6",
  curvearrowright: "\u21B7",
  cuvee: "\u22CE",
  cuwed: "\u22CF",
  cwconint: "\u2232",
  cwint: "\u2231",
  cylcty: "\u232D",
  dArr: "\u21D3",
  dHar: "\u2965",
  dagger: "\u2020",
  daleth: "\u2138",
  darr: "\u2193",
  dash: "\u2010",
  dashv: "\u22A3",
  dbkarow: "\u290F",
  dblac: "\u02DD",
  dcaron: "\u010F",
  dcy: "\u0434",
  dd: "\u2146",
  ddagger: "\u2021",
  ddarr: "\u21CA",
  ddotseq: "\u2A77",
  de: "\xB0",
  deg: "\xB0",
  delta: "\u03B4",
  demptyv: "\u29B1",
  dfisht: "\u297F",
  dfr: "\u{1D521}",
  dharl: "\u21C3",
  dharr: "\u21C2",
  diam: "\u22C4",
  diamond: "\u22C4",
  diamondsuit: "\u2666",
  diams: "\u2666",
  die: "\xA8",
  digamma: "\u03DD",
  disin: "\u22F2",
  div: "\xF7",
  divid: "\xF7",
  divide: "\xF7",
  divideontimes: "\u22C7",
  divonx: "\u22C7",
  djcy: "\u0452",
  dlcorn: "\u231E",
  dlcrop: "\u230D",
  dollar: "$",
  dopf: "\u{1D555}",
  dot: "\u02D9",
  doteq: "\u2250",
  doteqdot: "\u2251",
  dotminus: "\u2238",
  dotplus: "\u2214",
  dotsquare: "\u22A1",
  doublebarwedge: "\u2306",
  downarrow: "\u2193",
  downdownarrows: "\u21CA",
  downharpoonleft: "\u21C3",
  downharpoonright: "\u21C2",
  drbkarow: "\u2910",
  drcorn: "\u231F",
  drcrop: "\u230C",
  dscr: "\u{1D4B9}",
  dscy: "\u0455",
  dsol: "\u29F6",
  dstrok: "\u0111",
  dtdot: "\u22F1",
  dtri: "\u25BF",
  dtrif: "\u25BE",
  duarr: "\u21F5",
  duhar: "\u296F",
  dwangle: "\u29A6",
  dzcy: "\u045F",
  dzigrarr: "\u27FF",
  eDDot: "\u2A77",
  eDot: "\u2251",
  eacut: "\xE9",
  eacute: "\xE9",
  easter: "\u2A6E",
  ecaron: "\u011B",
  ecir: "\xEA",
  ecirc: "\xEA",
  ecolon: "\u2255",
  ecy: "\u044D",
  edot: "\u0117",
  ee: "\u2147",
  efDot: "\u2252",
  efr: "\u{1D522}",
  eg: "\u2A9A",
  egrav: "\xE8",
  egrave: "\xE8",
  egs: "\u2A96",
  egsdot: "\u2A98",
  el: "\u2A99",
  elinters: "\u23E7",
  ell: "\u2113",
  els: "\u2A95",
  elsdot: "\u2A97",
  emacr: "\u0113",
  empty: "\u2205",
  emptyset: "\u2205",
  emptyv: "\u2205",
  emsp13: "\u2004",
  emsp14: "\u2005",
  emsp: "\u2003",
  eng: "\u014B",
  ensp: "\u2002",
  eogon: "\u0119",
  eopf: "\u{1D556}",
  epar: "\u22D5",
  eparsl: "\u29E3",
  eplus: "\u2A71",
  epsi: "\u03B5",
  epsilon: "\u03B5",
  epsiv: "\u03F5",
  eqcirc: "\u2256",
  eqcolon: "\u2255",
  eqsim: "\u2242",
  eqslantgtr: "\u2A96",
  eqslantless: "\u2A95",
  equals: "=",
  equest: "\u225F",
  equiv: "\u2261",
  equivDD: "\u2A78",
  eqvparsl: "\u29E5",
  erDot: "\u2253",
  erarr: "\u2971",
  escr: "\u212F",
  esdot: "\u2250",
  esim: "\u2242",
  eta: "\u03B7",
  et: "\xF0",
  eth: "\xF0",
  eum: "\xEB",
  euml: "\xEB",
  euro: "\u20AC",
  excl: "!",
  exist: "\u2203",
  expectation: "\u2130",
  exponentiale: "\u2147",
  fallingdotseq: "\u2252",
  fcy: "\u0444",
  female: "\u2640",
  ffilig: "\uFB03",
  fflig: "\uFB00",
  ffllig: "\uFB04",
  ffr: "\u{1D523}",
  filig: "\uFB01",
  fjlig: "fj",
  flat: "\u266D",
  fllig: "\uFB02",
  fltns: "\u25B1",
  fnof: "\u0192",
  fopf: "\u{1D557}",
  forall: "\u2200",
  fork: "\u22D4",
  forkv: "\u2AD9",
  fpartint: "\u2A0D",
  frac1: "\xBC",
  frac12: "\xBD",
  frac13: "\u2153",
  frac14: "\xBC",
  frac15: "\u2155",
  frac16: "\u2159",
  frac18: "\u215B",
  frac23: "\u2154",
  frac25: "\u2156",
  frac3: "\xBE",
  frac34: "\xBE",
  frac35: "\u2157",
  frac38: "\u215C",
  frac45: "\u2158",
  frac56: "\u215A",
  frac58: "\u215D",
  frac78: "\u215E",
  frasl: "\u2044",
  frown: "\u2322",
  fscr: "\u{1D4BB}",
  gE: "\u2267",
  gEl: "\u2A8C",
  gacute: "\u01F5",
  gamma: "\u03B3",
  gammad: "\u03DD",
  gap: "\u2A86",
  gbreve: "\u011F",
  gcirc: "\u011D",
  gcy: "\u0433",
  gdot: "\u0121",
  ge: "\u2265",
  gel: "\u22DB",
  geq: "\u2265",
  geqq: "\u2267",
  geqslant: "\u2A7E",
  ges: "\u2A7E",
  gescc: "\u2AA9",
  gesdot: "\u2A80",
  gesdoto: "\u2A82",
  gesdotol: "\u2A84",
  gesl: "\u22DB\uFE00",
  gesles: "\u2A94",
  gfr: "\u{1D524}",
  gg: "\u226B",
  ggg: "\u22D9",
  gimel: "\u2137",
  gjcy: "\u0453",
  gl: "\u2277",
  glE: "\u2A92",
  gla: "\u2AA5",
  glj: "\u2AA4",
  gnE: "\u2269",
  gnap: "\u2A8A",
  gnapprox: "\u2A8A",
  gne: "\u2A88",
  gneq: "\u2A88",
  gneqq: "\u2269",
  gnsim: "\u22E7",
  gopf: "\u{1D558}",
  grave: "`",
  gscr: "\u210A",
  gsim: "\u2273",
  gsime: "\u2A8E",
  gsiml: "\u2A90",
  g: ">",
  gt: ">",
  gtcc: "\u2AA7",
  gtcir: "\u2A7A",
  gtdot: "\u22D7",
  gtlPar: "\u2995",
  gtquest: "\u2A7C",
  gtrapprox: "\u2A86",
  gtrarr: "\u2978",
  gtrdot: "\u22D7",
  gtreqless: "\u22DB",
  gtreqqless: "\u2A8C",
  gtrless: "\u2277",
  gtrsim: "\u2273",
  gvertneqq: "\u2269\uFE00",
  gvnE: "\u2269\uFE00",
  hArr: "\u21D4",
  hairsp: "\u200A",
  half: "\xBD",
  hamilt: "\u210B",
  hardcy: "\u044A",
  harr: "\u2194",
  harrcir: "\u2948",
  harrw: "\u21AD",
  hbar: "\u210F",
  hcirc: "\u0125",
  hearts: "\u2665",
  heartsuit: "\u2665",
  hellip: "\u2026",
  hercon: "\u22B9",
  hfr: "\u{1D525}",
  hksearow: "\u2925",
  hkswarow: "\u2926",
  hoarr: "\u21FF",
  homtht: "\u223B",
  hookleftarrow: "\u21A9",
  hookrightarrow: "\u21AA",
  hopf: "\u{1D559}",
  horbar: "\u2015",
  hscr: "\u{1D4BD}",
  hslash: "\u210F",
  hstrok: "\u0127",
  hybull: "\u2043",
  hyphen: "\u2010",
  iacut: "\xED",
  iacute: "\xED",
  ic: "\u2063",
  icir: "\xEE",
  icirc: "\xEE",
  icy: "\u0438",
  iecy: "\u0435",
  iexc: "\xA1",
  iexcl: "\xA1",
  iff: "\u21D4",
  ifr: "\u{1D526}",
  igrav: "\xEC",
  igrave: "\xEC",
  ii: "\u2148",
  iiiint: "\u2A0C",
  iiint: "\u222D",
  iinfin: "\u29DC",
  iiota: "\u2129",
  ijlig: "\u0133",
  imacr: "\u012B",
  image: "\u2111",
  imagline: "\u2110",
  imagpart: "\u2111",
  imath: "\u0131",
  imof: "\u22B7",
  imped: "\u01B5",
  in: "\u2208",
  incare: "\u2105",
  infin: "\u221E",
  infintie: "\u29DD",
  inodot: "\u0131",
  int: "\u222B",
  intcal: "\u22BA",
  integers: "\u2124",
  intercal: "\u22BA",
  intlarhk: "\u2A17",
  intprod: "\u2A3C",
  iocy: "\u0451",
  iogon: "\u012F",
  iopf: "\u{1D55A}",
  iota: "\u03B9",
  iprod: "\u2A3C",
  iques: "\xBF",
  iquest: "\xBF",
  iscr: "\u{1D4BE}",
  isin: "\u2208",
  isinE: "\u22F9",
  isindot: "\u22F5",
  isins: "\u22F4",
  isinsv: "\u22F3",
  isinv: "\u2208",
  it: "\u2062",
  itilde: "\u0129",
  iukcy: "\u0456",
  ium: "\xEF",
  iuml: "\xEF",
  jcirc: "\u0135",
  jcy: "\u0439",
  jfr: "\u{1D527}",
  jmath: "\u0237",
  jopf: "\u{1D55B}",
  jscr: "\u{1D4BF}",
  jsercy: "\u0458",
  jukcy: "\u0454",
  kappa: "\u03BA",
  kappav: "\u03F0",
  kcedil: "\u0137",
  kcy: "\u043A",
  kfr: "\u{1D528}",
  kgreen: "\u0138",
  khcy: "\u0445",
  kjcy: "\u045C",
  kopf: "\u{1D55C}",
  kscr: "\u{1D4C0}",
  lAarr: "\u21DA",
  lArr: "\u21D0",
  lAtail: "\u291B",
  lBarr: "\u290E",
  lE: "\u2266",
  lEg: "\u2A8B",
  lHar: "\u2962",
  lacute: "\u013A",
  laemptyv: "\u29B4",
  lagran: "\u2112",
  lambda: "\u03BB",
  lang: "\u27E8",
  langd: "\u2991",
  langle: "\u27E8",
  lap: "\u2A85",
  laqu: "\xAB",
  laquo: "\xAB",
  larr: "\u2190",
  larrb: "\u21E4",
  larrbfs: "\u291F",
  larrfs: "\u291D",
  larrhk: "\u21A9",
  larrlp: "\u21AB",
  larrpl: "\u2939",
  larrsim: "\u2973",
  larrtl: "\u21A2",
  lat: "\u2AAB",
  latail: "\u2919",
  late: "\u2AAD",
  lates: "\u2AAD\uFE00",
  lbarr: "\u290C",
  lbbrk: "\u2772",
  lbrace: "{",
  lbrack: "[",
  lbrke: "\u298B",
  lbrksld: "\u298F",
  lbrkslu: "\u298D",
  lcaron: "\u013E",
  lcedil: "\u013C",
  lceil: "\u2308",
  lcub: "{",
  lcy: "\u043B",
  ldca: "\u2936",
  ldquo: "\u201C",
  ldquor: "\u201E",
  ldrdhar: "\u2967",
  ldrushar: "\u294B",
  ldsh: "\u21B2",
  le: "\u2264",
  leftarrow: "\u2190",
  leftarrowtail: "\u21A2",
  leftharpoondown: "\u21BD",
  leftharpoonup: "\u21BC",
  leftleftarrows: "\u21C7",
  leftrightarrow: "\u2194",
  leftrightarrows: "\u21C6",
  leftrightharpoons: "\u21CB",
  leftrightsquigarrow: "\u21AD",
  leftthreetimes: "\u22CB",
  leg: "\u22DA",
  leq: "\u2264",
  leqq: "\u2266",
  leqslant: "\u2A7D",
  les: "\u2A7D",
  lescc: "\u2AA8",
  lesdot: "\u2A7F",
  lesdoto: "\u2A81",
  lesdotor: "\u2A83",
  lesg: "\u22DA\uFE00",
  lesges: "\u2A93",
  lessapprox: "\u2A85",
  lessdot: "\u22D6",
  lesseqgtr: "\u22DA",
  lesseqqgtr: "\u2A8B",
  lessgtr: "\u2276",
  lesssim: "\u2272",
  lfisht: "\u297C",
  lfloor: "\u230A",
  lfr: "\u{1D529}",
  lg: "\u2276",
  lgE: "\u2A91",
  lhard: "\u21BD",
  lharu: "\u21BC",
  lharul: "\u296A",
  lhblk: "\u2584",
  ljcy: "\u0459",
  ll: "\u226A",
  llarr: "\u21C7",
  llcorner: "\u231E",
  llhard: "\u296B",
  lltri: "\u25FA",
  lmidot: "\u0140",
  lmoust: "\u23B0",
  lmoustache: "\u23B0",
  lnE: "\u2268",
  lnap: "\u2A89",
  lnapprox: "\u2A89",
  lne: "\u2A87",
  lneq: "\u2A87",
  lneqq: "\u2268",
  lnsim: "\u22E6",
  loang: "\u27EC",
  loarr: "\u21FD",
  lobrk: "\u27E6",
  longleftarrow: "\u27F5",
  longleftrightarrow: "\u27F7",
  longmapsto: "\u27FC",
  longrightarrow: "\u27F6",
  looparrowleft: "\u21AB",
  looparrowright: "\u21AC",
  lopar: "\u2985",
  lopf: "\u{1D55D}",
  loplus: "\u2A2D",
  lotimes: "\u2A34",
  lowast: "\u2217",
  lowbar: "_",
  loz: "\u25CA",
  lozenge: "\u25CA",
  lozf: "\u29EB",
  lpar: "(",
  lparlt: "\u2993",
  lrarr: "\u21C6",
  lrcorner: "\u231F",
  lrhar: "\u21CB",
  lrhard: "\u296D",
  lrm: "\u200E",
  lrtri: "\u22BF",
  lsaquo: "\u2039",
  lscr: "\u{1D4C1}",
  lsh: "\u21B0",
  lsim: "\u2272",
  lsime: "\u2A8D",
  lsimg: "\u2A8F",
  lsqb: "[",
  lsquo: "\u2018",
  lsquor: "\u201A",
  lstrok: "\u0142",
  l: "<",
  lt: "<",
  ltcc: "\u2AA6",
  ltcir: "\u2A79",
  ltdot: "\u22D6",
  lthree: "\u22CB",
  ltimes: "\u22C9",
  ltlarr: "\u2976",
  ltquest: "\u2A7B",
  ltrPar: "\u2996",
  ltri: "\u25C3",
  ltrie: "\u22B4",
  ltrif: "\u25C2",
  lurdshar: "\u294A",
  luruhar: "\u2966",
  lvertneqq: "\u2268\uFE00",
  lvnE: "\u2268\uFE00",
  mDDot: "\u223A",
  mac: "\xAF",
  macr: "\xAF",
  male: "\u2642",
  malt: "\u2720",
  maltese: "\u2720",
  map: "\u21A6",
  mapsto: "\u21A6",
  mapstodown: "\u21A7",
  mapstoleft: "\u21A4",
  mapstoup: "\u21A5",
  marker: "\u25AE",
  mcomma: "\u2A29",
  mcy: "\u043C",
  mdash: "\u2014",
  measuredangle: "\u2221",
  mfr: "\u{1D52A}",
  mho: "\u2127",
  micr: "\xB5",
  micro: "\xB5",
  mid: "\u2223",
  midast: "*",
  midcir: "\u2AF0",
  middo: "\xB7",
  middot: "\xB7",
  minus: "\u2212",
  minusb: "\u229F",
  minusd: "\u2238",
  minusdu: "\u2A2A",
  mlcp: "\u2ADB",
  mldr: "\u2026",
  mnplus: "\u2213",
  models: "\u22A7",
  mopf: "\u{1D55E}",
  mp: "\u2213",
  mscr: "\u{1D4C2}",
  mstpos: "\u223E",
  mu: "\u03BC",
  multimap: "\u22B8",
  mumap: "\u22B8",
  nGg: "\u22D9\u0338",
  nGt: "\u226B\u20D2",
  nGtv: "\u226B\u0338",
  nLeftarrow: "\u21CD",
  nLeftrightarrow: "\u21CE",
  nLl: "\u22D8\u0338",
  nLt: "\u226A\u20D2",
  nLtv: "\u226A\u0338",
  nRightarrow: "\u21CF",
  nVDash: "\u22AF",
  nVdash: "\u22AE",
  nabla: "\u2207",
  nacute: "\u0144",
  nang: "\u2220\u20D2",
  nap: "\u2249",
  napE: "\u2A70\u0338",
  napid: "\u224B\u0338",
  napos: "\u0149",
  napprox: "\u2249",
  natur: "\u266E",
  natural: "\u266E",
  naturals: "\u2115",
  nbs: "\xA0",
  nbsp: "\xA0",
  nbump: "\u224E\u0338",
  nbumpe: "\u224F\u0338",
  ncap: "\u2A43",
  ncaron: "\u0148",
  ncedil: "\u0146",
  ncong: "\u2247",
  ncongdot: "\u2A6D\u0338",
  ncup: "\u2A42",
  ncy: "\u043D",
  ndash: "\u2013",
  ne: "\u2260",
  neArr: "\u21D7",
  nearhk: "\u2924",
  nearr: "\u2197",
  nearrow: "\u2197",
  nedot: "\u2250\u0338",
  nequiv: "\u2262",
  nesear: "\u2928",
  nesim: "\u2242\u0338",
  nexist: "\u2204",
  nexists: "\u2204",
  nfr: "\u{1D52B}",
  ngE: "\u2267\u0338",
  nge: "\u2271",
  ngeq: "\u2271",
  ngeqq: "\u2267\u0338",
  ngeqslant: "\u2A7E\u0338",
  nges: "\u2A7E\u0338",
  ngsim: "\u2275",
  ngt: "\u226F",
  ngtr: "\u226F",
  nhArr: "\u21CE",
  nharr: "\u21AE",
  nhpar: "\u2AF2",
  ni: "\u220B",
  nis: "\u22FC",
  nisd: "\u22FA",
  niv: "\u220B",
  njcy: "\u045A",
  nlArr: "\u21CD",
  nlE: "\u2266\u0338",
  nlarr: "\u219A",
  nldr: "\u2025",
  nle: "\u2270",
  nleftarrow: "\u219A",
  nleftrightarrow: "\u21AE",
  nleq: "\u2270",
  nleqq: "\u2266\u0338",
  nleqslant: "\u2A7D\u0338",
  nles: "\u2A7D\u0338",
  nless: "\u226E",
  nlsim: "\u2274",
  nlt: "\u226E",
  nltri: "\u22EA",
  nltrie: "\u22EC",
  nmid: "\u2224",
  nopf: "\u{1D55F}",
  no: "\xAC",
  not: "\xAC",
  notin: "\u2209",
  notinE: "\u22F9\u0338",
  notindot: "\u22F5\u0338",
  notinva: "\u2209",
  notinvb: "\u22F7",
  notinvc: "\u22F6",
  notni: "\u220C",
  notniva: "\u220C",
  notnivb: "\u22FE",
  notnivc: "\u22FD",
  npar: "\u2226",
  nparallel: "\u2226",
  nparsl: "\u2AFD\u20E5",
  npart: "\u2202\u0338",
  npolint: "\u2A14",
  npr: "\u2280",
  nprcue: "\u22E0",
  npre: "\u2AAF\u0338",
  nprec: "\u2280",
  npreceq: "\u2AAF\u0338",
  nrArr: "\u21CF",
  nrarr: "\u219B",
  nrarrc: "\u2933\u0338",
  nrarrw: "\u219D\u0338",
  nrightarrow: "\u219B",
  nrtri: "\u22EB",
  nrtrie: "\u22ED",
  nsc: "\u2281",
  nsccue: "\u22E1",
  nsce: "\u2AB0\u0338",
  nscr: "\u{1D4C3}",
  nshortmid: "\u2224",
  nshortparallel: "\u2226",
  nsim: "\u2241",
  nsime: "\u2244",
  nsimeq: "\u2244",
  nsmid: "\u2224",
  nspar: "\u2226",
  nsqsube: "\u22E2",
  nsqsupe: "\u22E3",
  nsub: "\u2284",
  nsubE: "\u2AC5\u0338",
  nsube: "\u2288",
  nsubset: "\u2282\u20D2",
  nsubseteq: "\u2288",
  nsubseteqq: "\u2AC5\u0338",
  nsucc: "\u2281",
  nsucceq: "\u2AB0\u0338",
  nsup: "\u2285",
  nsupE: "\u2AC6\u0338",
  nsupe: "\u2289",
  nsupset: "\u2283\u20D2",
  nsupseteq: "\u2289",
  nsupseteqq: "\u2AC6\u0338",
  ntgl: "\u2279",
  ntild: "\xF1",
  ntilde: "\xF1",
  ntlg: "\u2278",
  ntriangleleft: "\u22EA",
  ntrianglelefteq: "\u22EC",
  ntriangleright: "\u22EB",
  ntrianglerighteq: "\u22ED",
  nu: "\u03BD",
  num: "#",
  numero: "\u2116",
  numsp: "\u2007",
  nvDash: "\u22AD",
  nvHarr: "\u2904",
  nvap: "\u224D\u20D2",
  nvdash: "\u22AC",
  nvge: "\u2265\u20D2",
  nvgt: ">\u20D2",
  nvinfin: "\u29DE",
  nvlArr: "\u2902",
  nvle: "\u2264\u20D2",
  nvlt: "<\u20D2",
  nvltrie: "\u22B4\u20D2",
  nvrArr: "\u2903",
  nvrtrie: "\u22B5\u20D2",
  nvsim: "\u223C\u20D2",
  nwArr: "\u21D6",
  nwarhk: "\u2923",
  nwarr: "\u2196",
  nwarrow: "\u2196",
  nwnear: "\u2927",
  oS: "\u24C8",
  oacut: "\xF3",
  oacute: "\xF3",
  oast: "\u229B",
  ocir: "\xF4",
  ocirc: "\xF4",
  ocy: "\u043E",
  odash: "\u229D",
  odblac: "\u0151",
  odiv: "\u2A38",
  odot: "\u2299",
  odsold: "\u29BC",
  oelig: "\u0153",
  ofcir: "\u29BF",
  ofr: "\u{1D52C}",
  ogon: "\u02DB",
  ograv: "\xF2",
  ograve: "\xF2",
  ogt: "\u29C1",
  ohbar: "\u29B5",
  ohm: "\u03A9",
  oint: "\u222E",
  olarr: "\u21BA",
  olcir: "\u29BE",
  olcross: "\u29BB",
  oline: "\u203E",
  olt: "\u29C0",
  omacr: "\u014D",
  omega: "\u03C9",
  omicron: "\u03BF",
  omid: "\u29B6",
  ominus: "\u2296",
  oopf: "\u{1D560}",
  opar: "\u29B7",
  operp: "\u29B9",
  oplus: "\u2295",
  or: "\u2228",
  orarr: "\u21BB",
  ord: "\xBA",
  order: "\u2134",
  orderof: "\u2134",
  ordf: "\xAA",
  ordm: "\xBA",
  origof: "\u22B6",
  oror: "\u2A56",
  orslope: "\u2A57",
  orv: "\u2A5B",
  oscr: "\u2134",
  oslas: "\xF8",
  oslash: "\xF8",
  osol: "\u2298",
  otild: "\xF5",
  otilde: "\xF5",
  otimes: "\u2297",
  otimesas: "\u2A36",
  oum: "\xF6",
  ouml: "\xF6",
  ovbar: "\u233D",
  par: "\xB6",
  para: "\xB6",
  parallel: "\u2225",
  parsim: "\u2AF3",
  parsl: "\u2AFD",
  part: "\u2202",
  pcy: "\u043F",
  percnt: "%",
  period: ".",
  permil: "\u2030",
  perp: "\u22A5",
  pertenk: "\u2031",
  pfr: "\u{1D52D}",
  phi: "\u03C6",
  phiv: "\u03D5",
  phmmat: "\u2133",
  phone: "\u260E",
  pi: "\u03C0",
  pitchfork: "\u22D4",
  piv: "\u03D6",
  planck: "\u210F",
  planckh: "\u210E",
  plankv: "\u210F",
  plus: "+",
  plusacir: "\u2A23",
  plusb: "\u229E",
  pluscir: "\u2A22",
  plusdo: "\u2214",
  plusdu: "\u2A25",
  pluse: "\u2A72",
  plusm: "\xB1",
  plusmn: "\xB1",
  plussim: "\u2A26",
  plustwo: "\u2A27",
  pm: "\xB1",
  pointint: "\u2A15",
  popf: "\u{1D561}",
  poun: "\xA3",
  pound: "\xA3",
  pr: "\u227A",
  prE: "\u2AB3",
  prap: "\u2AB7",
  prcue: "\u227C",
  pre: "\u2AAF",
  prec: "\u227A",
  precapprox: "\u2AB7",
  preccurlyeq: "\u227C",
  preceq: "\u2AAF",
  precnapprox: "\u2AB9",
  precneqq: "\u2AB5",
  precnsim: "\u22E8",
  precsim: "\u227E",
  prime: "\u2032",
  primes: "\u2119",
  prnE: "\u2AB5",
  prnap: "\u2AB9",
  prnsim: "\u22E8",
  prod: "\u220F",
  profalar: "\u232E",
  profline: "\u2312",
  profsurf: "\u2313",
  prop: "\u221D",
  propto: "\u221D",
  prsim: "\u227E",
  prurel: "\u22B0",
  pscr: "\u{1D4C5}",
  psi: "\u03C8",
  puncsp: "\u2008",
  qfr: "\u{1D52E}",
  qint: "\u2A0C",
  qopf: "\u{1D562}",
  qprime: "\u2057",
  qscr: "\u{1D4C6}",
  quaternions: "\u210D",
  quatint: "\u2A16",
  quest: "?",
  questeq: "\u225F",
  quo: '"',
  quot: '"',
  rAarr: "\u21DB",
  rArr: "\u21D2",
  rAtail: "\u291C",
  rBarr: "\u290F",
  rHar: "\u2964",
  race: "\u223D\u0331",
  racute: "\u0155",
  radic: "\u221A",
  raemptyv: "\u29B3",
  rang: "\u27E9",
  rangd: "\u2992",
  range: "\u29A5",
  rangle: "\u27E9",
  raqu: "\xBB",
  raquo: "\xBB",
  rarr: "\u2192",
  rarrap: "\u2975",
  rarrb: "\u21E5",
  rarrbfs: "\u2920",
  rarrc: "\u2933",
  rarrfs: "\u291E",
  rarrhk: "\u21AA",
  rarrlp: "\u21AC",
  rarrpl: "\u2945",
  rarrsim: "\u2974",
  rarrtl: "\u21A3",
  rarrw: "\u219D",
  ratail: "\u291A",
  ratio: "\u2236",
  rationals: "\u211A",
  rbarr: "\u290D",
  rbbrk: "\u2773",
  rbrace: "}",
  rbrack: "]",
  rbrke: "\u298C",
  rbrksld: "\u298E",
  rbrkslu: "\u2990",
  rcaron: "\u0159",
  rcedil: "\u0157",
  rceil: "\u2309",
  rcub: "}",
  rcy: "\u0440",
  rdca: "\u2937",
  rdldhar: "\u2969",
  rdquo: "\u201D",
  rdquor: "\u201D",
  rdsh: "\u21B3",
  real: "\u211C",
  realine: "\u211B",
  realpart: "\u211C",
  reals: "\u211D",
  rect: "\u25AD",
  re: "\xAE",
  reg: "\xAE",
  rfisht: "\u297D",
  rfloor: "\u230B",
  rfr: "\u{1D52F}",
  rhard: "\u21C1",
  rharu: "\u21C0",
  rharul: "\u296C",
  rho: "\u03C1",
  rhov: "\u03F1",
  rightarrow: "\u2192",
  rightarrowtail: "\u21A3",
  rightharpoondown: "\u21C1",
  rightharpoonup: "\u21C0",
  rightleftarrows: "\u21C4",
  rightleftharpoons: "\u21CC",
  rightrightarrows: "\u21C9",
  rightsquigarrow: "\u219D",
  rightthreetimes: "\u22CC",
  ring: "\u02DA",
  risingdotseq: "\u2253",
  rlarr: "\u21C4",
  rlhar: "\u21CC",
  rlm: "\u200F",
  rmoust: "\u23B1",
  rmoustache: "\u23B1",
  rnmid: "\u2AEE",
  roang: "\u27ED",
  roarr: "\u21FE",
  robrk: "\u27E7",
  ropar: "\u2986",
  ropf: "\u{1D563}",
  roplus: "\u2A2E",
  rotimes: "\u2A35",
  rpar: ")",
  rpargt: "\u2994",
  rppolint: "\u2A12",
  rrarr: "\u21C9",
  rsaquo: "\u203A",
  rscr: "\u{1D4C7}",
  rsh: "\u21B1",
  rsqb: "]",
  rsquo: "\u2019",
  rsquor: "\u2019",
  rthree: "\u22CC",
  rtimes: "\u22CA",
  rtri: "\u25B9",
  rtrie: "\u22B5",
  rtrif: "\u25B8",
  rtriltri: "\u29CE",
  ruluhar: "\u2968",
  rx: "\u211E",
  sacute: "\u015B",
  sbquo: "\u201A",
  sc: "\u227B",
  scE: "\u2AB4",
  scap: "\u2AB8",
  scaron: "\u0161",
  sccue: "\u227D",
  sce: "\u2AB0",
  scedil: "\u015F",
  scirc: "\u015D",
  scnE: "\u2AB6",
  scnap: "\u2ABA",
  scnsim: "\u22E9",
  scpolint: "\u2A13",
  scsim: "\u227F",
  scy: "\u0441",
  sdot: "\u22C5",
  sdotb: "\u22A1",
  sdote: "\u2A66",
  seArr: "\u21D8",
  searhk: "\u2925",
  searr: "\u2198",
  searrow: "\u2198",
  sec: "\xA7",
  sect: "\xA7",
  semi: ";",
  seswar: "\u2929",
  setminus: "\u2216",
  setmn: "\u2216",
  sext: "\u2736",
  sfr: "\u{1D530}",
  sfrown: "\u2322",
  sharp: "\u266F",
  shchcy: "\u0449",
  shcy: "\u0448",
  shortmid: "\u2223",
  shortparallel: "\u2225",
  sh: "\xAD",
  shy: "\xAD",
  sigma: "\u03C3",
  sigmaf: "\u03C2",
  sigmav: "\u03C2",
  sim: "\u223C",
  simdot: "\u2A6A",
  sime: "\u2243",
  simeq: "\u2243",
  simg: "\u2A9E",
  simgE: "\u2AA0",
  siml: "\u2A9D",
  simlE: "\u2A9F",
  simne: "\u2246",
  simplus: "\u2A24",
  simrarr: "\u2972",
  slarr: "\u2190",
  smallsetminus: "\u2216",
  smashp: "\u2A33",
  smeparsl: "\u29E4",
  smid: "\u2223",
  smile: "\u2323",
  smt: "\u2AAA",
  smte: "\u2AAC",
  smtes: "\u2AAC\uFE00",
  softcy: "\u044C",
  sol: "/",
  solb: "\u29C4",
  solbar: "\u233F",
  sopf: "\u{1D564}",
  spades: "\u2660",
  spadesuit: "\u2660",
  spar: "\u2225",
  sqcap: "\u2293",
  sqcaps: "\u2293\uFE00",
  sqcup: "\u2294",
  sqcups: "\u2294\uFE00",
  sqsub: "\u228F",
  sqsube: "\u2291",
  sqsubset: "\u228F",
  sqsubseteq: "\u2291",
  sqsup: "\u2290",
  sqsupe: "\u2292",
  sqsupset: "\u2290",
  sqsupseteq: "\u2292",
  squ: "\u25A1",
  square: "\u25A1",
  squarf: "\u25AA",
  squf: "\u25AA",
  srarr: "\u2192",
  sscr: "\u{1D4C8}",
  ssetmn: "\u2216",
  ssmile: "\u2323",
  sstarf: "\u22C6",
  star: "\u2606",
  starf: "\u2605",
  straightepsilon: "\u03F5",
  straightphi: "\u03D5",
  strns: "\xAF",
  sub: "\u2282",
  subE: "\u2AC5",
  subdot: "\u2ABD",
  sube: "\u2286",
  subedot: "\u2AC3",
  submult: "\u2AC1",
  subnE: "\u2ACB",
  subne: "\u228A",
  subplus: "\u2ABF",
  subrarr: "\u2979",
  subset: "\u2282",
  subseteq: "\u2286",
  subseteqq: "\u2AC5",
  subsetneq: "\u228A",
  subsetneqq: "\u2ACB",
  subsim: "\u2AC7",
  subsub: "\u2AD5",
  subsup: "\u2AD3",
  succ: "\u227B",
  succapprox: "\u2AB8",
  succcurlyeq: "\u227D",
  succeq: "\u2AB0",
  succnapprox: "\u2ABA",
  succneqq: "\u2AB6",
  succnsim: "\u22E9",
  succsim: "\u227F",
  sum: "\u2211",
  sung: "\u266A",
  sup: "\u2283",
  sup1: "\xB9",
  sup2: "\xB2",
  sup3: "\xB3",
  supE: "\u2AC6",
  supdot: "\u2ABE",
  supdsub: "\u2AD8",
  supe: "\u2287",
  supedot: "\u2AC4",
  suphsol: "\u27C9",
  suphsub: "\u2AD7",
  suplarr: "\u297B",
  supmult: "\u2AC2",
  supnE: "\u2ACC",
  supne: "\u228B",
  supplus: "\u2AC0",
  supset: "\u2283",
  supseteq: "\u2287",
  supseteqq: "\u2AC6",
  supsetneq: "\u228B",
  supsetneqq: "\u2ACC",
  supsim: "\u2AC8",
  supsub: "\u2AD4",
  supsup: "\u2AD6",
  swArr: "\u21D9",
  swarhk: "\u2926",
  swarr: "\u2199",
  swarrow: "\u2199",
  swnwar: "\u292A",
  szli: "\xDF",
  szlig: "\xDF",
  target: "\u2316",
  tau: "\u03C4",
  tbrk: "\u23B4",
  tcaron: "\u0165",
  tcedil: "\u0163",
  tcy: "\u0442",
  tdot: "\u20DB",
  telrec: "\u2315",
  tfr: "\u{1D531}",
  there4: "\u2234",
  therefore: "\u2234",
  theta: "\u03B8",
  thetasym: "\u03D1",
  thetav: "\u03D1",
  thickapprox: "\u2248",
  thicksim: "\u223C",
  thinsp: "\u2009",
  thkap: "\u2248",
  thksim: "\u223C",
  thor: "\xFE",
  thorn: "\xFE",
  tilde: "\u02DC",
  time: "\xD7",
  times: "\xD7",
  timesb: "\u22A0",
  timesbar: "\u2A31",
  timesd: "\u2A30",
  tint: "\u222D",
  toea: "\u2928",
  top: "\u22A4",
  topbot: "\u2336",
  topcir: "\u2AF1",
  topf: "\u{1D565}",
  topfork: "\u2ADA",
  tosa: "\u2929",
  tprime: "\u2034",
  trade: "\u2122",
  triangle: "\u25B5",
  triangledown: "\u25BF",
  triangleleft: "\u25C3",
  trianglelefteq: "\u22B4",
  triangleq: "\u225C",
  triangleright: "\u25B9",
  trianglerighteq: "\u22B5",
  tridot: "\u25EC",
  trie: "\u225C",
  triminus: "\u2A3A",
  triplus: "\u2A39",
  trisb: "\u29CD",
  tritime: "\u2A3B",
  trpezium: "\u23E2",
  tscr: "\u{1D4C9}",
  tscy: "\u0446",
  tshcy: "\u045B",
  tstrok: "\u0167",
  twixt: "\u226C",
  twoheadleftarrow: "\u219E",
  twoheadrightarrow: "\u21A0",
  uArr: "\u21D1",
  uHar: "\u2963",
  uacut: "\xFA",
  uacute: "\xFA",
  uarr: "\u2191",
  ubrcy: "\u045E",
  ubreve: "\u016D",
  ucir: "\xFB",
  ucirc: "\xFB",
  ucy: "\u0443",
  udarr: "\u21C5",
  udblac: "\u0171",
  udhar: "\u296E",
  ufisht: "\u297E",
  ufr: "\u{1D532}",
  ugrav: "\xF9",
  ugrave: "\xF9",
  uharl: "\u21BF",
  uharr: "\u21BE",
  uhblk: "\u2580",
  ulcorn: "\u231C",
  ulcorner: "\u231C",
  ulcrop: "\u230F",
  ultri: "\u25F8",
  umacr: "\u016B",
  um: "\xA8",
  uml: "\xA8",
  uogon: "\u0173",
  uopf: "\u{1D566}",
  uparrow: "\u2191",
  updownarrow: "\u2195",
  upharpoonleft: "\u21BF",
  upharpoonright: "\u21BE",
  uplus: "\u228E",
  upsi: "\u03C5",
  upsih: "\u03D2",
  upsilon: "\u03C5",
  upuparrows: "\u21C8",
  urcorn: "\u231D",
  urcorner: "\u231D",
  urcrop: "\u230E",
  uring: "\u016F",
  urtri: "\u25F9",
  uscr: "\u{1D4CA}",
  utdot: "\u22F0",
  utilde: "\u0169",
  utri: "\u25B5",
  utrif: "\u25B4",
  uuarr: "\u21C8",
  uum: "\xFC",
  uuml: "\xFC",
  uwangle: "\u29A7",
  vArr: "\u21D5",
  vBar: "\u2AE8",
  vBarv: "\u2AE9",
  vDash: "\u22A8",
  vangrt: "\u299C",
  varepsilon: "\u03F5",
  varkappa: "\u03F0",
  varnothing: "\u2205",
  varphi: "\u03D5",
  varpi: "\u03D6",
  varpropto: "\u221D",
  varr: "\u2195",
  varrho: "\u03F1",
  varsigma: "\u03C2",
  varsubsetneq: "\u228A\uFE00",
  varsubsetneqq: "\u2ACB\uFE00",
  varsupsetneq: "\u228B\uFE00",
  varsupsetneqq: "\u2ACC\uFE00",
  vartheta: "\u03D1",
  vartriangleleft: "\u22B2",
  vartriangleright: "\u22B3",
  vcy: "\u0432",
  vdash: "\u22A2",
  vee: "\u2228",
  veebar: "\u22BB",
  veeeq: "\u225A",
  vellip: "\u22EE",
  verbar: "|",
  vert: "|",
  vfr: "\u{1D533}",
  vltri: "\u22B2",
  vnsub: "\u2282\u20D2",
  vnsup: "\u2283\u20D2",
  vopf: "\u{1D567}",
  vprop: "\u221D",
  vrtri: "\u22B3",
  vscr: "\u{1D4CB}",
  vsubnE: "\u2ACB\uFE00",
  vsubne: "\u228A\uFE00",
  vsupnE: "\u2ACC\uFE00",
  vsupne: "\u228B\uFE00",
  vzigzag: "\u299A",
  wcirc: "\u0175",
  wedbar: "\u2A5F",
  wedge: "\u2227",
  wedgeq: "\u2259",
  weierp: "\u2118",
  wfr: "\u{1D534}",
  wopf: "\u{1D568}",
  wp: "\u2118",
  wr: "\u2240",
  wreath: "\u2240",
  wscr: "\u{1D4CC}",
  xcap: "\u22C2",
  xcirc: "\u25EF",
  xcup: "\u22C3",
  xdtri: "\u25BD",
  xfr: "\u{1D535}",
  xhArr: "\u27FA",
  xharr: "\u27F7",
  xi: "\u03BE",
  xlArr: "\u27F8",
  xlarr: "\u27F5",
  xmap: "\u27FC",
  xnis: "\u22FB",
  xodot: "\u2A00",
  xopf: "\u{1D569}",
  xoplus: "\u2A01",
  xotime: "\u2A02",
  xrArr: "\u27F9",
  xrarr: "\u27F6",
  xscr: "\u{1D4CD}",
  xsqcup: "\u2A06",
  xuplus: "\u2A04",
  xutri: "\u25B3",
  xvee: "\u22C1",
  xwedge: "\u22C0",
  yacut: "\xFD",
  yacute: "\xFD",
  yacy: "\u044F",
  ycirc: "\u0177",
  ycy: "\u044B",
  ye: "\xA5",
  yen: "\xA5",
  yfr: "\u{1D536}",
  yicy: "\u0457",
  yopf: "\u{1D56A}",
  yscr: "\u{1D4CE}",
  yucy: "\u044E",
  yum: "\xFF",
  yuml: "\xFF",
  zacute: "\u017A",
  zcaron: "\u017E",
  zcy: "\u0437",
  zdot: "\u017C",
  zeetrf: "\u2128",
  zeta: "\u03B6",
  zfr: "\u{1D537}",
  zhcy: "\u0436",
  zigrarr: "\u21DD",
  zopf: "\u{1D56B}",
  zscr: "\u{1D4CF}",
  zwj: "\u200D",
  zwnj: "\u200C",
};

// ../../node_modules/decode-named-character-reference/index.js
var own3 = {}.hasOwnProperty;
function decodeNamedCharacterReference(value) {
  return own3.call(characterEntities, value) ? characterEntities[value] : !1;
}

// ../../node_modules/micromark-core-commonmark/lib/character-reference.js
var characterReference = {
  name: "characterReference",
  tokenize: tokenizeCharacterReference,
};
function tokenizeCharacterReference(effects, ok2, nok) {
  let self = this,
    size = 0,
    max,
    test;
  return start;
  function start(code3) {
    return (
      effects.enter("characterReference"),
      effects.enter("characterReferenceMarker"),
      effects.consume(code3),
      effects.exit("characterReferenceMarker"),
      open
    );
  }
  function open(code3) {
    return code3 === 35
      ? (effects.enter("characterReferenceMarkerNumeric"),
        effects.consume(code3),
        effects.exit("characterReferenceMarkerNumeric"),
        numeric)
      : (effects.enter("characterReferenceValue"),
        (max = 31),
        (test = asciiAlphanumeric),
        value(code3));
  }
  function numeric(code3) {
    return code3 === 88 || code3 === 120
      ? (effects.enter("characterReferenceMarkerHexadecimal"),
        effects.consume(code3),
        effects.exit("characterReferenceMarkerHexadecimal"),
        effects.enter("characterReferenceValue"),
        (max = 6),
        (test = asciiHexDigit),
        value)
      : (effects.enter("characterReferenceValue"),
        (max = 7),
        (test = asciiDigit),
        value(code3));
  }
  function value(code3) {
    let token;
    return code3 === 59 && size
      ? ((token = effects.exit("characterReferenceValue")),
        test === asciiAlphanumeric &&
        !decodeNamedCharacterReference(self.sliceSerialize(token))
          ? nok(code3)
          : (effects.enter("characterReferenceMarker"),
            effects.consume(code3),
            effects.exit("characterReferenceMarker"),
            effects.exit("characterReference"),
            ok2))
      : test(code3) && size++ < max
      ? (effects.consume(code3), value)
      : nok(code3);
  }
}

// ../../node_modules/micromark-core-commonmark/lib/code-fenced.js
var codeFenced = {
  name: "codeFenced",
  tokenize: tokenizeCodeFenced,
  concrete: !0,
};
function tokenizeCodeFenced(effects, ok2, nok) {
  let self = this,
    closingFenceConstruct = {
      tokenize: tokenizeClosingFence,
      partial: !0,
    },
    nonLazyLine2 = {
      tokenize: tokenizeNonLazyLine2,
      partial: !0,
    },
    tail = this.events[this.events.length - 1],
    initialPrefix =
      tail && tail[1].type === "linePrefix"
        ? tail[2].sliceSerialize(tail[1], !0).length
        : 0,
    sizeOpen = 0,
    marker;
  return start;
  function start(code3) {
    return (
      effects.enter("codeFenced"),
      effects.enter("codeFencedFence"),
      effects.enter("codeFencedFenceSequence"),
      (marker = code3),
      sequenceOpen(code3)
    );
  }
  function sequenceOpen(code3) {
    return code3 === marker
      ? (effects.consume(code3), sizeOpen++, sequenceOpen)
      : (effects.exit("codeFencedFenceSequence"),
        sizeOpen < 3
          ? nok(code3)
          : factorySpace(effects, infoOpen, "whitespace")(code3));
  }
  function infoOpen(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? openAfter(code3)
      : (effects.enter("codeFencedFenceInfo"),
        effects.enter("chunkString", {
          contentType: "string",
        }),
        info2(code3));
  }
  function info2(code3) {
    return code3 === null || markdownLineEndingOrSpace(code3)
      ? (effects.exit("chunkString"),
        effects.exit("codeFencedFenceInfo"),
        factorySpace(effects, infoAfter, "whitespace")(code3))
      : code3 === 96 && code3 === marker
      ? nok(code3)
      : (effects.consume(code3), info2);
  }
  function infoAfter(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? openAfter(code3)
      : (effects.enter("codeFencedFenceMeta"),
        effects.enter("chunkString", {
          contentType: "string",
        }),
        meta44(code3));
  }
  function meta44(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? (effects.exit("chunkString"),
        effects.exit("codeFencedFenceMeta"),
        openAfter(code3))
      : code3 === 96 && code3 === marker
      ? nok(code3)
      : (effects.consume(code3), meta44);
  }
  function openAfter(code3) {
    return (
      effects.exit("codeFencedFence"),
      self.interrupt ? ok2(code3) : contentStart(code3)
    );
  }
  function contentStart(code3) {
    return code3 === null
      ? after(code3)
      : markdownLineEnding(code3)
      ? effects.attempt(
          nonLazyLine2,
          effects.attempt(
            closingFenceConstruct,
            after,
            initialPrefix
              ? factorySpace(
                  effects,
                  contentStart,
                  "linePrefix",
                  initialPrefix + 1
                )
              : contentStart
          ),
          after
        )(code3)
      : (effects.enter("codeFlowValue"), contentContinue(code3));
  }
  function contentContinue(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? (effects.exit("codeFlowValue"), contentStart(code3))
      : (effects.consume(code3), contentContinue);
  }
  function after(code3) {
    return effects.exit("codeFenced"), ok2(code3);
  }
  function tokenizeNonLazyLine2(effects2, ok3, nok2) {
    let self2 = this;
    return start2;
    function start2(code3) {
      return (
        effects2.enter("lineEnding"),
        effects2.consume(code3),
        effects2.exit("lineEnding"),
        lineStart
      );
    }
    function lineStart(code3) {
      return self2.parser.lazy[self2.now().line] ? nok2(code3) : ok3(code3);
    }
  }
  function tokenizeClosingFence(effects2, ok3, nok2) {
    let size = 0;
    return factorySpace(
      effects2,
      closingSequenceStart,
      "linePrefix",
      this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    );
    function closingSequenceStart(code3) {
      return (
        effects2.enter("codeFencedFence"),
        effects2.enter("codeFencedFenceSequence"),
        closingSequence(code3)
      );
    }
    function closingSequence(code3) {
      return code3 === marker
        ? (effects2.consume(code3), size++, closingSequence)
        : size < sizeOpen
        ? nok2(code3)
        : (effects2.exit("codeFencedFenceSequence"),
          factorySpace(effects2, closingSequenceEnd, "whitespace")(code3));
    }
    function closingSequenceEnd(code3) {
      return code3 === null || markdownLineEnding(code3)
        ? (effects2.exit("codeFencedFence"), ok3(code3))
        : nok2(code3);
    }
  }
}

// ../../node_modules/micromark-core-commonmark/lib/code-indented.js
var codeIndented = {
    name: "codeIndented",
    tokenize: tokenizeCodeIndented,
  },
  indentedContent = {
    tokenize: tokenizeIndentedContent,
    partial: !0,
  };
function tokenizeCodeIndented(effects, ok2, nok) {
  let self = this;
  return start;
  function start(code3) {
    return (
      effects.enter("codeIndented"),
      factorySpace(effects, afterStartPrefix, "linePrefix", 4 + 1)(code3)
    );
  }
  function afterStartPrefix(code3) {
    let tail = self.events[self.events.length - 1];
    return tail &&
      tail[1].type === "linePrefix" &&
      tail[2].sliceSerialize(tail[1], !0).length >= 4
      ? afterPrefix(code3)
      : nok(code3);
  }
  function afterPrefix(code3) {
    return code3 === null
      ? after(code3)
      : markdownLineEnding(code3)
      ? effects.attempt(indentedContent, afterPrefix, after)(code3)
      : (effects.enter("codeFlowValue"), content3(code3));
  }
  function content3(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? (effects.exit("codeFlowValue"), afterPrefix(code3))
      : (effects.consume(code3), content3);
  }
  function after(code3) {
    return effects.exit("codeIndented"), ok2(code3);
  }
}
function tokenizeIndentedContent(effects, ok2, nok) {
  let self = this;
  return start;
  function start(code3) {
    return self.parser.lazy[self.now().line]
      ? nok(code3)
      : markdownLineEnding(code3)
      ? (effects.enter("lineEnding"),
        effects.consume(code3),
        effects.exit("lineEnding"),
        start)
      : factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code3);
  }
  function afterPrefix(code3) {
    let tail = self.events[self.events.length - 1];
    return tail &&
      tail[1].type === "linePrefix" &&
      tail[2].sliceSerialize(tail[1], !0).length >= 4
      ? ok2(code3)
      : markdownLineEnding(code3)
      ? start(code3)
      : nok(code3);
  }
}

// ../../node_modules/micromark-core-commonmark/lib/code-text.js
var codeText = {
  name: "codeText",
  tokenize: tokenizeCodeText,
  resolve: resolveCodeText,
  previous,
};
function resolveCodeText(events) {
  let tailExitIndex = events.length - 4,
    headEnterIndex = 3,
    index2,
    enter;
  if (
    (events[headEnterIndex][1].type === "lineEnding" ||
      events[headEnterIndex][1].type === "space") &&
    (events[tailExitIndex][1].type === "lineEnding" ||
      events[tailExitIndex][1].type === "space")
  ) {
    for (index2 = headEnterIndex; ++index2 < tailExitIndex; )
      if (events[index2][1].type === "codeTextData") {
        (events[headEnterIndex][1].type = "codeTextPadding"),
          (events[tailExitIndex][1].type = "codeTextPadding"),
          (headEnterIndex += 2),
          (tailExitIndex -= 2);
        break;
      }
  }
  for (
    index2 = headEnterIndex - 1, tailExitIndex++;
    ++index2 <= tailExitIndex;

  )
    enter === void 0
      ? index2 !== tailExitIndex &&
        events[index2][1].type !== "lineEnding" &&
        (enter = index2)
      : (index2 === tailExitIndex || events[index2][1].type === "lineEnding") &&
        ((events[enter][1].type = "codeTextData"),
        index2 !== enter + 2 &&
          ((events[enter][1].end = events[index2 - 1][1].end),
          events.splice(enter + 2, index2 - enter - 2),
          (tailExitIndex -= index2 - enter - 2),
          (index2 = enter + 2)),
        (enter = void 0));
  return events;
}
function previous(code3) {
  return (
    code3 !== 96 ||
    this.events[this.events.length - 1][1].type === "characterEscape"
  );
}
function tokenizeCodeText(effects, ok2, nok) {
  let self = this,
    sizeOpen = 0,
    size,
    token;
  return start;
  function start(code3) {
    return (
      effects.enter("codeText"),
      effects.enter("codeTextSequence"),
      openingSequence(code3)
    );
  }
  function openingSequence(code3) {
    return code3 === 96
      ? (effects.consume(code3), sizeOpen++, openingSequence)
      : (effects.exit("codeTextSequence"), gap(code3));
  }
  function gap(code3) {
    return code3 === null
      ? nok(code3)
      : code3 === 96
      ? ((token = effects.enter("codeTextSequence")),
        (size = 0),
        closingSequence(code3))
      : code3 === 32
      ? (effects.enter("space"),
        effects.consume(code3),
        effects.exit("space"),
        gap)
      : markdownLineEnding(code3)
      ? (effects.enter("lineEnding"),
        effects.consume(code3),
        effects.exit("lineEnding"),
        gap)
      : (effects.enter("codeTextData"), data2(code3));
  }
  function data2(code3) {
    return code3 === null ||
      code3 === 32 ||
      code3 === 96 ||
      markdownLineEnding(code3)
      ? (effects.exit("codeTextData"), gap(code3))
      : (effects.consume(code3), data2);
  }
  function closingSequence(code3) {
    return code3 === 96
      ? (effects.consume(code3), size++, closingSequence)
      : size === sizeOpen
      ? (effects.exit("codeTextSequence"), effects.exit("codeText"), ok2(code3))
      : ((token.type = "codeTextData"), data2(code3));
  }
}

// ../../node_modules/micromark-util-subtokenize/index.js
function subtokenize(events) {
  let jumps = {},
    index2 = -1,
    event,
    lineIndex,
    otherIndex,
    otherEvent,
    parameters,
    subevents,
    more;
  for (; ++index2 < events.length; ) {
    for (; index2 in jumps; ) index2 = jumps[index2];
    if (
      ((event = events[index2]),
      index2 &&
        event[1].type === "chunkFlow" &&
        events[index2 - 1][1].type === "listItemPrefix" &&
        ((subevents = event[1]._tokenizer.events),
        (otherIndex = 0),
        otherIndex < subevents.length &&
          subevents[otherIndex][1].type === "lineEndingBlank" &&
          (otherIndex += 2),
        otherIndex < subevents.length &&
          subevents[otherIndex][1].type === "content"))
    )
      for (
        ;
        ++otherIndex < subevents.length &&
        subevents[otherIndex][1].type !== "content";

      )
        subevents[otherIndex][1].type === "chunkText" &&
          ((subevents[otherIndex][1]._isInFirstContentOfListItem = !0),
          otherIndex++);
    if (event[0] === "enter")
      event[1].contentType &&
        (Object.assign(jumps, subcontent(events, index2)),
        (index2 = jumps[index2]),
        (more = !0));
    else if (event[1]._container) {
      for (
        otherIndex = index2, lineIndex = void 0;
        otherIndex-- &&
        ((otherEvent = events[otherIndex]),
        otherEvent[1].type === "lineEnding" ||
          otherEvent[1].type === "lineEndingBlank");

      )
        otherEvent[0] === "enter" &&
          (lineIndex && (events[lineIndex][1].type = "lineEndingBlank"),
          (otherEvent[1].type = "lineEnding"),
          (lineIndex = otherIndex));
      lineIndex &&
        ((event[1].end = Object.assign({}, events[lineIndex][1].start)),
        (parameters = events.slice(lineIndex, index2)),
        parameters.unshift(event),
        splice(events, lineIndex, index2 - lineIndex + 1, parameters));
    }
  }
  return !more;
}
function subcontent(events, eventIndex) {
  let token = events[eventIndex][1],
    context = events[eventIndex][2],
    startPosition = eventIndex - 1,
    startPositions = [],
    tokenizer =
      token._tokenizer || context.parser[token.contentType](token.start),
    childEvents = tokenizer.events,
    jumps = [],
    gaps = {},
    stream,
    previous4,
    index2 = -1,
    current = token,
    adjust = 0,
    start = 0,
    breaks = [start];
  for (; current; ) {
    for (; events[++startPosition][1] !== current; );
    startPositions.push(startPosition),
      current._tokenizer ||
        ((stream = context.sliceStream(current)),
        current.next || stream.push(null),
        previous4 && tokenizer.defineSkip(current.start),
        current._isInFirstContentOfListItem &&
          (tokenizer._gfmTasklistFirstContentOfListItem = !0),
        tokenizer.write(stream),
        current._isInFirstContentOfListItem &&
          (tokenizer._gfmTasklistFirstContentOfListItem = void 0)),
      (previous4 = current),
      (current = current.next);
  }
  for (current = token; ++index2 < childEvents.length; )
    childEvents[index2][0] === "exit" &&
      childEvents[index2 - 1][0] === "enter" &&
      childEvents[index2][1].type === childEvents[index2 - 1][1].type &&
      childEvents[index2][1].start.line !== childEvents[index2][1].end.line &&
      ((start = index2 + 1),
      breaks.push(start),
      (current._tokenizer = void 0),
      (current.previous = void 0),
      (current = current.next));
  for (
    tokenizer.events = [],
      current
        ? ((current._tokenizer = void 0), (current.previous = void 0))
        : breaks.pop(),
      index2 = breaks.length;
    index2--;

  ) {
    let slice = childEvents.slice(breaks[index2], breaks[index2 + 1]),
      start2 = startPositions.pop();
    jumps.unshift([start2, start2 + slice.length - 1]),
      splice(events, start2, 2, slice);
  }
  for (index2 = -1; ++index2 < jumps.length; )
    (gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1]),
      (adjust += jumps[index2][1] - jumps[index2][0] - 1);
  return gaps;
}

// ../../node_modules/micromark-core-commonmark/lib/content.js
var content2 = {
    tokenize: tokenizeContent,
    resolve: resolveContent,
  },
  continuationConstruct = {
    tokenize: tokenizeContinuation,
    partial: !0,
  };
function resolveContent(events) {
  return subtokenize(events), events;
}
function tokenizeContent(effects, ok2) {
  let previous4;
  return start;
  function start(code3) {
    return (
      effects.enter("content"),
      (previous4 = effects.enter("chunkContent", {
        contentType: "content",
      })),
      data2(code3)
    );
  }
  function data2(code3) {
    return code3 === null
      ? contentEnd(code3)
      : markdownLineEnding(code3)
      ? effects.check(continuationConstruct, contentContinue, contentEnd)(code3)
      : (effects.consume(code3), data2);
  }
  function contentEnd(code3) {
    return effects.exit("chunkContent"), effects.exit("content"), ok2(code3);
  }
  function contentContinue(code3) {
    return (
      effects.consume(code3),
      effects.exit("chunkContent"),
      (previous4.next = effects.enter("chunkContent", {
        contentType: "content",
        previous: previous4,
      })),
      (previous4 = previous4.next),
      data2
    );
  }
}
function tokenizeContinuation(effects, ok2, nok) {
  let self = this;
  return startLookahead;
  function startLookahead(code3) {
    return (
      effects.exit("chunkContent"),
      effects.enter("lineEnding"),
      effects.consume(code3),
      effects.exit("lineEnding"),
      factorySpace(effects, prefixed, "linePrefix")
    );
  }
  function prefixed(code3) {
    if (code3 === null || markdownLineEnding(code3)) return nok(code3);
    let tail = self.events[self.events.length - 1];
    return !self.parser.constructs.disable.null.includes("codeIndented") &&
      tail &&
      tail[1].type === "linePrefix" &&
      tail[2].sliceSerialize(tail[1], !0).length >= 4
      ? ok2(code3)
      : effects.interrupt(self.parser.constructs.flow, nok, ok2)(code3);
  }
}

// ../../node_modules/micromark-factory-destination/index.js
function factoryDestination(
  effects,
  ok2,
  nok,
  type,
  literalType,
  literalMarkerType,
  rawType,
  stringType,
  max
) {
  let limit = max || Number.POSITIVE_INFINITY,
    balance = 0;
  return start;
  function start(code3) {
    return code3 === 60
      ? (effects.enter(type),
        effects.enter(literalType),
        effects.enter(literalMarkerType),
        effects.consume(code3),
        effects.exit(literalMarkerType),
        destinationEnclosedBefore)
      : code3 === null || code3 === 41 || asciiControl(code3)
      ? nok(code3)
      : (effects.enter(type),
        effects.enter(rawType),
        effects.enter(stringType),
        effects.enter("chunkString", {
          contentType: "string",
        }),
        destinationRaw(code3));
  }
  function destinationEnclosedBefore(code3) {
    return code3 === 62
      ? (effects.enter(literalMarkerType),
        effects.consume(code3),
        effects.exit(literalMarkerType),
        effects.exit(literalType),
        effects.exit(type),
        ok2)
      : (effects.enter(stringType),
        effects.enter("chunkString", {
          contentType: "string",
        }),
        destinationEnclosed(code3));
  }
  function destinationEnclosed(code3) {
    return code3 === 62
      ? (effects.exit("chunkString"),
        effects.exit(stringType),
        destinationEnclosedBefore(code3))
      : code3 === null || code3 === 60 || markdownLineEnding(code3)
      ? nok(code3)
      : (effects.consume(code3),
        code3 === 92 ? destinationEnclosedEscape : destinationEnclosed);
  }
  function destinationEnclosedEscape(code3) {
    return code3 === 60 || code3 === 62 || code3 === 92
      ? (effects.consume(code3), destinationEnclosed)
      : destinationEnclosed(code3);
  }
  function destinationRaw(code3) {
    return code3 === 40
      ? ++balance > limit
        ? nok(code3)
        : (effects.consume(code3), destinationRaw)
      : code3 === 41
      ? balance--
        ? (effects.consume(code3), destinationRaw)
        : (effects.exit("chunkString"),
          effects.exit(stringType),
          effects.exit(rawType),
          effects.exit(type),
          ok2(code3))
      : code3 === null || markdownLineEndingOrSpace(code3)
      ? balance
        ? nok(code3)
        : (effects.exit("chunkString"),
          effects.exit(stringType),
          effects.exit(rawType),
          effects.exit(type),
          ok2(code3))
      : asciiControl(code3)
      ? nok(code3)
      : (effects.consume(code3),
        code3 === 92 ? destinationRawEscape : destinationRaw);
  }
  function destinationRawEscape(code3) {
    return code3 === 40 || code3 === 41 || code3 === 92
      ? (effects.consume(code3), destinationRaw)
      : destinationRaw(code3);
  }
}

// ../../node_modules/micromark-factory-label/index.js
function factoryLabel(effects, ok2, nok, type, markerType, stringType) {
  let self = this,
    size = 0,
    data2;
  return start;
  function start(code3) {
    return (
      effects.enter(type),
      effects.enter(markerType),
      effects.consume(code3),
      effects.exit(markerType),
      effects.enter(stringType),
      atBreak
    );
  }
  function atBreak(code3) {
    return code3 === null ||
      code3 === 91 ||
      (code3 === 93 && !data2) ||
      (code3 === 94 &&
        !size &&
        "_hiddenFootnoteSupport" in self.parser.constructs) ||
      size > 999
      ? nok(code3)
      : code3 === 93
      ? (effects.exit(stringType),
        effects.enter(markerType),
        effects.consume(code3),
        effects.exit(markerType),
        effects.exit(type),
        ok2)
      : markdownLineEnding(code3)
      ? (effects.enter("lineEnding"),
        effects.consume(code3),
        effects.exit("lineEnding"),
        atBreak)
      : (effects.enter("chunkString", {
          contentType: "string",
        }),
        label(code3));
  }
  function label(code3) {
    return code3 === null ||
      code3 === 91 ||
      code3 === 93 ||
      markdownLineEnding(code3) ||
      size++ > 999
      ? (effects.exit("chunkString"), atBreak(code3))
      : (effects.consume(code3),
        (data2 = data2 || !markdownSpace(code3)),
        code3 === 92 ? labelEscape : label);
  }
  function labelEscape(code3) {
    return code3 === 91 || code3 === 92 || code3 === 93
      ? (effects.consume(code3), size++, label)
      : label(code3);
  }
}

// ../../node_modules/micromark-factory-title/index.js
function factoryTitle(effects, ok2, nok, type, markerType, stringType) {
  let marker;
  return start;
  function start(code3) {
    return (
      effects.enter(type),
      effects.enter(markerType),
      effects.consume(code3),
      effects.exit(markerType),
      (marker = code3 === 40 ? 41 : code3),
      atFirstTitleBreak
    );
  }
  function atFirstTitleBreak(code3) {
    return code3 === marker
      ? (effects.enter(markerType),
        effects.consume(code3),
        effects.exit(markerType),
        effects.exit(type),
        ok2)
      : (effects.enter(stringType), atTitleBreak(code3));
  }
  function atTitleBreak(code3) {
    return code3 === marker
      ? (effects.exit(stringType), atFirstTitleBreak(marker))
      : code3 === null
      ? nok(code3)
      : markdownLineEnding(code3)
      ? (effects.enter("lineEnding"),
        effects.consume(code3),
        effects.exit("lineEnding"),
        factorySpace(effects, atTitleBreak, "linePrefix"))
      : (effects.enter("chunkString", {
          contentType: "string",
        }),
        title(code3));
  }
  function title(code3) {
    return code3 === marker || code3 === null || markdownLineEnding(code3)
      ? (effects.exit("chunkString"), atTitleBreak(code3))
      : (effects.consume(code3), code3 === 92 ? titleEscape : title);
  }
  function titleEscape(code3) {
    return code3 === marker || code3 === 92
      ? (effects.consume(code3), title)
      : title(code3);
  }
}

// ../../node_modules/micromark-factory-whitespace/index.js
function factoryWhitespace(effects, ok2) {
  let seen;
  return start;
  function start(code3) {
    return markdownLineEnding(code3)
      ? (effects.enter("lineEnding"),
        effects.consume(code3),
        effects.exit("lineEnding"),
        (seen = !0),
        start)
      : markdownSpace(code3)
      ? factorySpace(effects, start, seen ? "linePrefix" : "lineSuffix")(code3)
      : ok2(code3);
  }
}

// ../../node_modules/micromark-util-normalize-identifier/index.js
function normalizeIdentifier(value) {
  return value
    .replace(/[\t\n\r ]+/g, " ")
    .replace(/^ | $/g, "")
    .toLowerCase()
    .toUpperCase();
}

// ../../node_modules/micromark-core-commonmark/lib/definition.js
var definition = {
    name: "definition",
    tokenize: tokenizeDefinition,
  },
  titleConstruct = {
    tokenize: tokenizeTitle,
    partial: !0,
  };
function tokenizeDefinition(effects, ok2, nok) {
  let self = this,
    identifier;
  return start;
  function start(code3) {
    return (
      effects.enter("definition"),
      factoryLabel.call(
        self,
        effects,
        labelAfter,
        nok,
        "definitionLabel",
        "definitionLabelMarker",
        "definitionLabelString"
      )(code3)
    );
  }
  function labelAfter(code3) {
    return (
      (identifier = normalizeIdentifier(
        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
      )),
      code3 === 58
        ? (effects.enter("definitionMarker"),
          effects.consume(code3),
          effects.exit("definitionMarker"),
          factoryWhitespace(
            effects,
            factoryDestination(
              effects,
              effects.attempt(
                titleConstruct,
                factorySpace(effects, after, "whitespace"),
                factorySpace(effects, after, "whitespace")
              ),
              nok,
              "definitionDestination",
              "definitionDestinationLiteral",
              "definitionDestinationLiteralMarker",
              "definitionDestinationRaw",
              "definitionDestinationString"
            )
          ))
        : nok(code3)
    );
  }
  function after(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? (effects.exit("definition"),
        self.parser.defined.includes(identifier) ||
          self.parser.defined.push(identifier),
        ok2(code3))
      : nok(code3);
  }
}
function tokenizeTitle(effects, ok2, nok) {
  return start;
  function start(code3) {
    return markdownLineEndingOrSpace(code3)
      ? factoryWhitespace(effects, before)(code3)
      : nok(code3);
  }
  function before(code3) {
    return code3 === 34 || code3 === 39 || code3 === 40
      ? factoryTitle(
          effects,
          factorySpace(effects, after, "whitespace"),
          nok,
          "definitionTitle",
          "definitionTitleMarker",
          "definitionTitleString"
        )(code3)
      : nok(code3);
  }
  function after(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? ok2(code3)
      : nok(code3);
  }
}

// ../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js
var hardBreakEscape = {
  name: "hardBreakEscape",
  tokenize: tokenizeHardBreakEscape,
};
function tokenizeHardBreakEscape(effects, ok2, nok) {
  return start;
  function start(code3) {
    return (
      effects.enter("hardBreakEscape"),
      effects.enter("escapeMarker"),
      effects.consume(code3),
      open
    );
  }
  function open(code3) {
    return markdownLineEnding(code3)
      ? (effects.exit("escapeMarker"),
        effects.exit("hardBreakEscape"),
        ok2(code3))
      : nok(code3);
  }
}

// ../../node_modules/micromark-core-commonmark/lib/heading-atx.js
var headingAtx = {
  name: "headingAtx",
  tokenize: tokenizeHeadingAtx,
  resolve: resolveHeadingAtx,
};
function resolveHeadingAtx(events, context) {
  let contentEnd = events.length - 2,
    contentStart = 3,
    content3,
    text8;
  return (
    events[contentStart][1].type === "whitespace" && (contentStart += 2),
    contentEnd - 2 > contentStart &&
      events[contentEnd][1].type === "whitespace" &&
      (contentEnd -= 2),
    events[contentEnd][1].type === "atxHeadingSequence" &&
      (contentStart === contentEnd - 1 ||
        (contentEnd - 4 > contentStart &&
          events[contentEnd - 2][1].type === "whitespace")) &&
      (contentEnd -= contentStart + 1 === contentEnd ? 2 : 4),
    contentEnd > contentStart &&
      ((content3 = {
        type: "atxHeadingText",
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end,
      }),
      (text8 = {
        type: "chunkText",
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end,
        contentType: "text",
      }),
      splice(events, contentStart, contentEnd - contentStart + 1, [
        ["enter", content3, context],
        ["enter", text8, context],
        ["exit", text8, context],
        ["exit", content3, context],
      ])),
    events
  );
}
function tokenizeHeadingAtx(effects, ok2, nok) {
  let self = this,
    size = 0;
  return start;
  function start(code3) {
    return (
      effects.enter("atxHeading"),
      effects.enter("atxHeadingSequence"),
      fenceOpenInside(code3)
    );
  }
  function fenceOpenInside(code3) {
    return code3 === 35 && size++ < 6
      ? (effects.consume(code3), fenceOpenInside)
      : code3 === null || markdownLineEndingOrSpace(code3)
      ? (effects.exit("atxHeadingSequence"),
        self.interrupt ? ok2(code3) : headingBreak(code3))
      : nok(code3);
  }
  function headingBreak(code3) {
    return code3 === 35
      ? (effects.enter("atxHeadingSequence"), sequence(code3))
      : code3 === null || markdownLineEnding(code3)
      ? (effects.exit("atxHeading"), ok2(code3))
      : markdownSpace(code3)
      ? factorySpace(effects, headingBreak, "whitespace")(code3)
      : (effects.enter("atxHeadingText"), data2(code3));
  }
  function sequence(code3) {
    return code3 === 35
      ? (effects.consume(code3), sequence)
      : (effects.exit("atxHeadingSequence"), headingBreak(code3));
  }
  function data2(code3) {
    return code3 === null || code3 === 35 || markdownLineEndingOrSpace(code3)
      ? (effects.exit("atxHeadingText"), headingBreak(code3))
      : (effects.consume(code3), data2);
  }
}

// ../../node_modules/micromark-util-html-tag-name/index.js
var htmlBlockNames = [
    "address",
    "article",
    "aside",
    "base",
    "basefont",
    "blockquote",
    "body",
    "caption",
    "center",
    "col",
    "colgroup",
    "dd",
    "details",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "frame",
    "frameset",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hr",
    "html",
    "iframe",
    "legend",
    "li",
    "link",
    "main",
    "menu",
    "menuitem",
    "nav",
    "noframes",
    "ol",
    "optgroup",
    "option",
    "p",
    "param",
    "section",
    "source",
    "summary",
    "table",
    "tbody",
    "td",
    "tfoot",
    "th",
    "thead",
    "title",
    "tr",
    "track",
    "ul",
  ],
  htmlRawNames = ["pre", "script", "style", "textarea"];

// ../../node_modules/micromark-core-commonmark/lib/html-flow.js
var htmlFlow = {
    name: "htmlFlow",
    tokenize: tokenizeHtmlFlow,
    resolveTo: resolveToHtmlFlow,
    concrete: !0,
  },
  nextBlankConstruct = {
    tokenize: tokenizeNextBlank,
    partial: !0,
  };
function resolveToHtmlFlow(events) {
  let index2 = events.length;
  for (
    ;
    index2-- &&
    !(events[index2][0] === "enter" && events[index2][1].type === "htmlFlow");

  );
  return (
    index2 > 1 &&
      events[index2 - 2][1].type === "linePrefix" &&
      ((events[index2][1].start = events[index2 - 2][1].start),
      (events[index2 + 1][1].start = events[index2 - 2][1].start),
      events.splice(index2 - 2, 2)),
    events
  );
}
function tokenizeHtmlFlow(effects, ok2, nok) {
  let self = this,
    kind,
    startTag2,
    buffer2,
    index2,
    marker;
  return start;
  function start(code3) {
    return (
      effects.enter("htmlFlow"),
      effects.enter("htmlFlowData"),
      effects.consume(code3),
      open
    );
  }
  function open(code3) {
    return code3 === 33
      ? (effects.consume(code3), declarationStart)
      : code3 === 47
      ? (effects.consume(code3), tagCloseStart)
      : code3 === 63
      ? (effects.consume(code3),
        (kind = 3),
        self.interrupt ? ok2 : continuationDeclarationInside)
      : asciiAlpha(code3)
      ? (effects.consume(code3),
        (buffer2 = String.fromCharCode(code3)),
        (startTag2 = !0),
        tagName)
      : nok(code3);
  }
  function declarationStart(code3) {
    return code3 === 45
      ? (effects.consume(code3), (kind = 2), commentOpenInside)
      : code3 === 91
      ? (effects.consume(code3),
        (kind = 5),
        (buffer2 = "CDATA["),
        (index2 = 0),
        cdataOpenInside)
      : asciiAlpha(code3)
      ? (effects.consume(code3),
        (kind = 4),
        self.interrupt ? ok2 : continuationDeclarationInside)
      : nok(code3);
  }
  function commentOpenInside(code3) {
    return code3 === 45
      ? (effects.consume(code3),
        self.interrupt ? ok2 : continuationDeclarationInside)
      : nok(code3);
  }
  function cdataOpenInside(code3) {
    return code3 === buffer2.charCodeAt(index2++)
      ? (effects.consume(code3),
        index2 === buffer2.length
          ? self.interrupt
            ? ok2
            : continuation
          : cdataOpenInside)
      : nok(code3);
  }
  function tagCloseStart(code3) {
    return asciiAlpha(code3)
      ? (effects.consume(code3),
        (buffer2 = String.fromCharCode(code3)),
        tagName)
      : nok(code3);
  }
  function tagName(code3) {
    return code3 === null ||
      code3 === 47 ||
      code3 === 62 ||
      markdownLineEndingOrSpace(code3)
      ? code3 !== 47 &&
        startTag2 &&
        htmlRawNames.includes(buffer2.toLowerCase())
        ? ((kind = 1), self.interrupt ? ok2(code3) : continuation(code3))
        : htmlBlockNames.includes(buffer2.toLowerCase())
        ? ((kind = 6),
          code3 === 47
            ? (effects.consume(code3), basicSelfClosing)
            : self.interrupt
            ? ok2(code3)
            : continuation(code3))
        : ((kind = 7),
          self.interrupt && !self.parser.lazy[self.now().line]
            ? nok(code3)
            : startTag2
            ? completeAttributeNameBefore(code3)
            : completeClosingTagAfter(code3))
      : code3 === 45 || asciiAlphanumeric(code3)
      ? (effects.consume(code3),
        (buffer2 += String.fromCharCode(code3)),
        tagName)
      : nok(code3);
  }
  function basicSelfClosing(code3) {
    return code3 === 62
      ? (effects.consume(code3), self.interrupt ? ok2 : continuation)
      : nok(code3);
  }
  function completeClosingTagAfter(code3) {
    return markdownSpace(code3)
      ? (effects.consume(code3), completeClosingTagAfter)
      : completeEnd(code3);
  }
  function completeAttributeNameBefore(code3) {
    return code3 === 47
      ? (effects.consume(code3), completeEnd)
      : code3 === 58 || code3 === 95 || asciiAlpha(code3)
      ? (effects.consume(code3), completeAttributeName)
      : markdownSpace(code3)
      ? (effects.consume(code3), completeAttributeNameBefore)
      : completeEnd(code3);
  }
  function completeAttributeName(code3) {
    return code3 === 45 ||
      code3 === 46 ||
      code3 === 58 ||
      code3 === 95 ||
      asciiAlphanumeric(code3)
      ? (effects.consume(code3), completeAttributeName)
      : completeAttributeNameAfter(code3);
  }
  function completeAttributeNameAfter(code3) {
    return code3 === 61
      ? (effects.consume(code3), completeAttributeValueBefore)
      : markdownSpace(code3)
      ? (effects.consume(code3), completeAttributeNameAfter)
      : completeAttributeNameBefore(code3);
  }
  function completeAttributeValueBefore(code3) {
    return code3 === null ||
      code3 === 60 ||
      code3 === 61 ||
      code3 === 62 ||
      code3 === 96
      ? nok(code3)
      : code3 === 34 || code3 === 39
      ? (effects.consume(code3), (marker = code3), completeAttributeValueQuoted)
      : markdownSpace(code3)
      ? (effects.consume(code3), completeAttributeValueBefore)
      : ((marker = null), completeAttributeValueUnquoted(code3));
  }
  function completeAttributeValueQuoted(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? nok(code3)
      : code3 === marker
      ? (effects.consume(code3), completeAttributeValueQuotedAfter)
      : (effects.consume(code3), completeAttributeValueQuoted);
  }
  function completeAttributeValueUnquoted(code3) {
    return code3 === null ||
      code3 === 34 ||
      code3 === 39 ||
      code3 === 60 ||
      code3 === 61 ||
      code3 === 62 ||
      code3 === 96 ||
      markdownLineEndingOrSpace(code3)
      ? completeAttributeNameAfter(code3)
      : (effects.consume(code3), completeAttributeValueUnquoted);
  }
  function completeAttributeValueQuotedAfter(code3) {
    return code3 === 47 || code3 === 62 || markdownSpace(code3)
      ? completeAttributeNameBefore(code3)
      : nok(code3);
  }
  function completeEnd(code3) {
    return code3 === 62 ? (effects.consume(code3), completeAfter) : nok(code3);
  }
  function completeAfter(code3) {
    return markdownSpace(code3)
      ? (effects.consume(code3), completeAfter)
      : code3 === null || markdownLineEnding(code3)
      ? continuation(code3)
      : nok(code3);
  }
  function continuation(code3) {
    return code3 === 45 && kind === 2
      ? (effects.consume(code3), continuationCommentInside)
      : code3 === 60 && kind === 1
      ? (effects.consume(code3), continuationRawTagOpen)
      : code3 === 62 && kind === 4
      ? (effects.consume(code3), continuationClose)
      : code3 === 63 && kind === 3
      ? (effects.consume(code3), continuationDeclarationInside)
      : code3 === 93 && kind === 5
      ? (effects.consume(code3), continuationCharacterDataInside)
      : markdownLineEnding(code3) && (kind === 6 || kind === 7)
      ? effects.check(
          nextBlankConstruct,
          continuationClose,
          continuationAtLineEnding
        )(code3)
      : code3 === null || markdownLineEnding(code3)
      ? continuationAtLineEnding(code3)
      : (effects.consume(code3), continuation);
  }
  function continuationAtLineEnding(code3) {
    return effects.exit("htmlFlowData"), htmlContinueStart(code3);
  }
  function htmlContinueStart(code3) {
    return code3 === null
      ? done(code3)
      : markdownLineEnding(code3)
      ? effects.attempt(
          {
            tokenize: htmlLineEnd,
            partial: !0,
          },
          htmlContinueStart,
          done
        )(code3)
      : (effects.enter("htmlFlowData"), continuation(code3));
  }
  function htmlLineEnd(effects2, ok3, nok2) {
    return start2;
    function start2(code3) {
      return (
        effects2.enter("lineEnding"),
        effects2.consume(code3),
        effects2.exit("lineEnding"),
        lineStart
      );
    }
    function lineStart(code3) {
      return self.parser.lazy[self.now().line] ? nok2(code3) : ok3(code3);
    }
  }
  function continuationCommentInside(code3) {
    return code3 === 45
      ? (effects.consume(code3), continuationDeclarationInside)
      : continuation(code3);
  }
  function continuationRawTagOpen(code3) {
    return code3 === 47
      ? (effects.consume(code3), (buffer2 = ""), continuationRawEndTag)
      : continuation(code3);
  }
  function continuationRawEndTag(code3) {
    return code3 === 62 && htmlRawNames.includes(buffer2.toLowerCase())
      ? (effects.consume(code3), continuationClose)
      : asciiAlpha(code3) && buffer2.length < 8
      ? (effects.consume(code3),
        (buffer2 += String.fromCharCode(code3)),
        continuationRawEndTag)
      : continuation(code3);
  }
  function continuationCharacterDataInside(code3) {
    return code3 === 93
      ? (effects.consume(code3), continuationDeclarationInside)
      : continuation(code3);
  }
  function continuationDeclarationInside(code3) {
    return code3 === 62
      ? (effects.consume(code3), continuationClose)
      : code3 === 45 && kind === 2
      ? (effects.consume(code3), continuationDeclarationInside)
      : continuation(code3);
  }
  function continuationClose(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? (effects.exit("htmlFlowData"), done(code3))
      : (effects.consume(code3), continuationClose);
  }
  function done(code3) {
    return effects.exit("htmlFlow"), ok2(code3);
  }
}
function tokenizeNextBlank(effects, ok2, nok) {
  return start;
  function start(code3) {
    return (
      effects.exit("htmlFlowData"),
      effects.enter("lineEndingBlank"),
      effects.consume(code3),
      effects.exit("lineEndingBlank"),
      effects.attempt(blankLine, ok2, nok)
    );
  }
}

// ../../node_modules/micromark-core-commonmark/lib/html-text.js
var htmlText = {
  name: "htmlText",
  tokenize: tokenizeHtmlText,
};
function tokenizeHtmlText(effects, ok2, nok) {
  let self = this,
    marker,
    buffer2,
    index2,
    returnState;
  return start;
  function start(code3) {
    return (
      effects.enter("htmlText"),
      effects.enter("htmlTextData"),
      effects.consume(code3),
      open
    );
  }
  function open(code3) {
    return code3 === 33
      ? (effects.consume(code3), declarationOpen)
      : code3 === 47
      ? (effects.consume(code3), tagCloseStart)
      : code3 === 63
      ? (effects.consume(code3), instruction)
      : asciiAlpha(code3)
      ? (effects.consume(code3), tagOpen)
      : nok(code3);
  }
  function declarationOpen(code3) {
    return code3 === 45
      ? (effects.consume(code3), commentOpen)
      : code3 === 91
      ? (effects.consume(code3), (buffer2 = "CDATA["), (index2 = 0), cdataOpen)
      : asciiAlpha(code3)
      ? (effects.consume(code3), declaration)
      : nok(code3);
  }
  function commentOpen(code3) {
    return code3 === 45 ? (effects.consume(code3), commentStart) : nok(code3);
  }
  function commentStart(code3) {
    return code3 === null || code3 === 62
      ? nok(code3)
      : code3 === 45
      ? (effects.consume(code3), commentStartDash)
      : comment3(code3);
  }
  function commentStartDash(code3) {
    return code3 === null || code3 === 62 ? nok(code3) : comment3(code3);
  }
  function comment3(code3) {
    return code3 === null
      ? nok(code3)
      : code3 === 45
      ? (effects.consume(code3), commentClose)
      : markdownLineEnding(code3)
      ? ((returnState = comment3), atLineEnding(code3))
      : (effects.consume(code3), comment3);
  }
  function commentClose(code3) {
    return code3 === 45 ? (effects.consume(code3), end) : comment3(code3);
  }
  function cdataOpen(code3) {
    return code3 === buffer2.charCodeAt(index2++)
      ? (effects.consume(code3), index2 === buffer2.length ? cdata : cdataOpen)
      : nok(code3);
  }
  function cdata(code3) {
    return code3 === null
      ? nok(code3)
      : code3 === 93
      ? (effects.consume(code3), cdataClose)
      : markdownLineEnding(code3)
      ? ((returnState = cdata), atLineEnding(code3))
      : (effects.consume(code3), cdata);
  }
  function cdataClose(code3) {
    return code3 === 93 ? (effects.consume(code3), cdataEnd) : cdata(code3);
  }
  function cdataEnd(code3) {
    return code3 === 62
      ? end(code3)
      : code3 === 93
      ? (effects.consume(code3), cdataEnd)
      : cdata(code3);
  }
  function declaration(code3) {
    return code3 === null || code3 === 62
      ? end(code3)
      : markdownLineEnding(code3)
      ? ((returnState = declaration), atLineEnding(code3))
      : (effects.consume(code3), declaration);
  }
  function instruction(code3) {
    return code3 === null
      ? nok(code3)
      : code3 === 63
      ? (effects.consume(code3), instructionClose)
      : markdownLineEnding(code3)
      ? ((returnState = instruction), atLineEnding(code3))
      : (effects.consume(code3), instruction);
  }
  function instructionClose(code3) {
    return code3 === 62 ? end(code3) : instruction(code3);
  }
  function tagCloseStart(code3) {
    return asciiAlpha(code3) ? (effects.consume(code3), tagClose) : nok(code3);
  }
  function tagClose(code3) {
    return code3 === 45 || asciiAlphanumeric(code3)
      ? (effects.consume(code3), tagClose)
      : tagCloseBetween(code3);
  }
  function tagCloseBetween(code3) {
    return markdownLineEnding(code3)
      ? ((returnState = tagCloseBetween), atLineEnding(code3))
      : markdownSpace(code3)
      ? (effects.consume(code3), tagCloseBetween)
      : end(code3);
  }
  function tagOpen(code3) {
    return code3 === 45 || asciiAlphanumeric(code3)
      ? (effects.consume(code3), tagOpen)
      : code3 === 47 || code3 === 62 || markdownLineEndingOrSpace(code3)
      ? tagOpenBetween(code3)
      : nok(code3);
  }
  function tagOpenBetween(code3) {
    return code3 === 47
      ? (effects.consume(code3), end)
      : code3 === 58 || code3 === 95 || asciiAlpha(code3)
      ? (effects.consume(code3), tagOpenAttributeName)
      : markdownLineEnding(code3)
      ? ((returnState = tagOpenBetween), atLineEnding(code3))
      : markdownSpace(code3)
      ? (effects.consume(code3), tagOpenBetween)
      : end(code3);
  }
  function tagOpenAttributeName(code3) {
    return code3 === 45 ||
      code3 === 46 ||
      code3 === 58 ||
      code3 === 95 ||
      asciiAlphanumeric(code3)
      ? (effects.consume(code3), tagOpenAttributeName)
      : tagOpenAttributeNameAfter(code3);
  }
  function tagOpenAttributeNameAfter(code3) {
    return code3 === 61
      ? (effects.consume(code3), tagOpenAttributeValueBefore)
      : markdownLineEnding(code3)
      ? ((returnState = tagOpenAttributeNameAfter), atLineEnding(code3))
      : markdownSpace(code3)
      ? (effects.consume(code3), tagOpenAttributeNameAfter)
      : tagOpenBetween(code3);
  }
  function tagOpenAttributeValueBefore(code3) {
    return code3 === null ||
      code3 === 60 ||
      code3 === 61 ||
      code3 === 62 ||
      code3 === 96
      ? nok(code3)
      : code3 === 34 || code3 === 39
      ? (effects.consume(code3), (marker = code3), tagOpenAttributeValueQuoted)
      : markdownLineEnding(code3)
      ? ((returnState = tagOpenAttributeValueBefore), atLineEnding(code3))
      : markdownSpace(code3)
      ? (effects.consume(code3), tagOpenAttributeValueBefore)
      : (effects.consume(code3),
        (marker = void 0),
        tagOpenAttributeValueUnquoted);
  }
  function tagOpenAttributeValueQuoted(code3) {
    return code3 === marker
      ? (effects.consume(code3), tagOpenAttributeValueQuotedAfter)
      : code3 === null
      ? nok(code3)
      : markdownLineEnding(code3)
      ? ((returnState = tagOpenAttributeValueQuoted), atLineEnding(code3))
      : (effects.consume(code3), tagOpenAttributeValueQuoted);
  }
  function tagOpenAttributeValueQuotedAfter(code3) {
    return code3 === 62 || code3 === 47 || markdownLineEndingOrSpace(code3)
      ? tagOpenBetween(code3)
      : nok(code3);
  }
  function tagOpenAttributeValueUnquoted(code3) {
    return code3 === null ||
      code3 === 34 ||
      code3 === 39 ||
      code3 === 60 ||
      code3 === 61 ||
      code3 === 96
      ? nok(code3)
      : code3 === 62 || markdownLineEndingOrSpace(code3)
      ? tagOpenBetween(code3)
      : (effects.consume(code3), tagOpenAttributeValueUnquoted);
  }
  function atLineEnding(code3) {
    return (
      effects.exit("htmlTextData"),
      effects.enter("lineEnding"),
      effects.consume(code3),
      effects.exit("lineEnding"),
      factorySpace(
        effects,
        afterPrefix,
        "linePrefix",
        self.parser.constructs.disable.null.includes("codeIndented")
          ? void 0
          : 4
      )
    );
  }
  function afterPrefix(code3) {
    return effects.enter("htmlTextData"), returnState(code3);
  }
  function end(code3) {
    return code3 === 62
      ? (effects.consume(code3),
        effects.exit("htmlTextData"),
        effects.exit("htmlText"),
        ok2)
      : nok(code3);
  }
}

// ../../node_modules/micromark-core-commonmark/lib/label-end.js
var labelEnd = {
    name: "labelEnd",
    tokenize: tokenizeLabelEnd,
    resolveTo: resolveToLabelEnd,
    resolveAll: resolveAllLabelEnd,
  },
  resourceConstruct = {
    tokenize: tokenizeResource,
  },
  fullReferenceConstruct = {
    tokenize: tokenizeFullReference,
  },
  collapsedReferenceConstruct = {
    tokenize: tokenizeCollapsedReference,
  };
function resolveAllLabelEnd(events) {
  let index2 = -1,
    token;
  for (; ++index2 < events.length; )
    (token = events[index2][1]),
      (token.type === "labelImage" ||
        token.type === "labelLink" ||
        token.type === "labelEnd") &&
        (events.splice(index2 + 1, token.type === "labelImage" ? 4 : 2),
        (token.type = "data"),
        index2++);
  return events;
}
function resolveToLabelEnd(events, context) {
  let index2 = events.length,
    offset = 0,
    token,
    open,
    close,
    media;
  for (; index2--; )
    if (((token = events[index2][1]), open)) {
      if (
        token.type === "link" ||
        (token.type === "labelLink" && token._inactive)
      )
        break;
      events[index2][0] === "enter" &&
        token.type === "labelLink" &&
        (token._inactive = !0);
    } else if (close) {
      if (
        events[index2][0] === "enter" &&
        (token.type === "labelImage" || token.type === "labelLink") &&
        !token._balanced &&
        ((open = index2), token.type !== "labelLink")
      ) {
        offset = 2;
        break;
      }
    } else token.type === "labelEnd" && (close = index2);
  let group = {
      type: events[open][1].type === "labelLink" ? "link" : "image",
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[events.length - 1][1].end),
    },
    label = {
      type: "label",
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[close][1].end),
    },
    text8 = {
      type: "labelText",
      start: Object.assign({}, events[open + offset + 2][1].end),
      end: Object.assign({}, events[close - 2][1].start),
    };
  return (
    (media = [
      ["enter", group, context],
      ["enter", label, context],
    ]),
    (media = push(media, events.slice(open + 1, open + offset + 3))),
    (media = push(media, [["enter", text8, context]])),
    (media = push(
      media,
      resolveAll(
        context.parser.constructs.insideSpan.null,
        events.slice(open + offset + 4, close - 3),
        context
      )
    )),
    (media = push(media, [
      ["exit", text8, context],
      events[close - 2],
      events[close - 1],
      ["exit", label, context],
    ])),
    (media = push(media, events.slice(close + 1))),
    (media = push(media, [["exit", group, context]])),
    splice(events, open, events.length, media),
    events
  );
}
function tokenizeLabelEnd(effects, ok2, nok) {
  let self = this,
    index2 = self.events.length,
    labelStart,
    defined;
  for (; index2--; )
    if (
      (self.events[index2][1].type === "labelImage" ||
        self.events[index2][1].type === "labelLink") &&
      !self.events[index2][1]._balanced
    ) {
      labelStart = self.events[index2][1];
      break;
    }
  return start;
  function start(code3) {
    return labelStart
      ? labelStart._inactive
        ? balanced(code3)
        : ((defined = self.parser.defined.includes(
            normalizeIdentifier(
              self.sliceSerialize({
                start: labelStart.end,
                end: self.now(),
              })
            )
          )),
          effects.enter("labelEnd"),
          effects.enter("labelMarker"),
          effects.consume(code3),
          effects.exit("labelMarker"),
          effects.exit("labelEnd"),
          afterLabelEnd)
      : nok(code3);
  }
  function afterLabelEnd(code3) {
    return code3 === 40
      ? effects.attempt(resourceConstruct, ok2, defined ? ok2 : balanced)(code3)
      : code3 === 91
      ? effects.attempt(
          fullReferenceConstruct,
          ok2,
          defined
            ? effects.attempt(collapsedReferenceConstruct, ok2, balanced)
            : balanced
        )(code3)
      : defined
      ? ok2(code3)
      : balanced(code3);
  }
  function balanced(code3) {
    return (labelStart._balanced = !0), nok(code3);
  }
}
function tokenizeResource(effects, ok2, nok) {
  return start;
  function start(code3) {
    return (
      effects.enter("resource"),
      effects.enter("resourceMarker"),
      effects.consume(code3),
      effects.exit("resourceMarker"),
      factoryWhitespace(effects, open)
    );
  }
  function open(code3) {
    return code3 === 41
      ? end(code3)
      : factoryDestination(
          effects,
          destinationAfter,
          nok,
          "resourceDestination",
          "resourceDestinationLiteral",
          "resourceDestinationLiteralMarker",
          "resourceDestinationRaw",
          "resourceDestinationString",
          32
        )(code3);
  }
  function destinationAfter(code3) {
    return markdownLineEndingOrSpace(code3)
      ? factoryWhitespace(effects, between)(code3)
      : end(code3);
  }
  function between(code3) {
    return code3 === 34 || code3 === 39 || code3 === 40
      ? factoryTitle(
          effects,
          factoryWhitespace(effects, end),
          nok,
          "resourceTitle",
          "resourceTitleMarker",
          "resourceTitleString"
        )(code3)
      : end(code3);
  }
  function end(code3) {
    return code3 === 41
      ? (effects.enter("resourceMarker"),
        effects.consume(code3),
        effects.exit("resourceMarker"),
        effects.exit("resource"),
        ok2)
      : nok(code3);
  }
}
function tokenizeFullReference(effects, ok2, nok) {
  let self = this;
  return start;
  function start(code3) {
    return factoryLabel.call(
      self,
      effects,
      afterLabel,
      nok,
      "reference",
      "referenceMarker",
      "referenceString"
    )(code3);
  }
  function afterLabel(code3) {
    return self.parser.defined.includes(
      normalizeIdentifier(
        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
      )
    )
      ? ok2(code3)
      : nok(code3);
  }
}
function tokenizeCollapsedReference(effects, ok2, nok) {
  return start;
  function start(code3) {
    return (
      effects.enter("reference"),
      effects.enter("referenceMarker"),
      effects.consume(code3),
      effects.exit("referenceMarker"),
      open
    );
  }
  function open(code3) {
    return code3 === 93
      ? (effects.enter("referenceMarker"),
        effects.consume(code3),
        effects.exit("referenceMarker"),
        effects.exit("reference"),
        ok2)
      : nok(code3);
  }
}

// ../../node_modules/micromark-core-commonmark/lib/label-start-image.js
var labelStartImage = {
  name: "labelStartImage",
  tokenize: tokenizeLabelStartImage,
  resolveAll: labelEnd.resolveAll,
};
function tokenizeLabelStartImage(effects, ok2, nok) {
  let self = this;
  return start;
  function start(code3) {
    return (
      effects.enter("labelImage"),
      effects.enter("labelImageMarker"),
      effects.consume(code3),
      effects.exit("labelImageMarker"),
      open
    );
  }
  function open(code3) {
    return code3 === 91
      ? (effects.enter("labelMarker"),
        effects.consume(code3),
        effects.exit("labelMarker"),
        effects.exit("labelImage"),
        after)
      : nok(code3);
  }
  function after(code3) {
    return code3 === 94 && "_hiddenFootnoteSupport" in self.parser.constructs
      ? nok(code3)
      : ok2(code3);
  }
}

// ../../node_modules/micromark-core-commonmark/lib/label-start-link.js
var labelStartLink = {
  name: "labelStartLink",
  tokenize: tokenizeLabelStartLink,
  resolveAll: labelEnd.resolveAll,
};
function tokenizeLabelStartLink(effects, ok2, nok) {
  let self = this;
  return start;
  function start(code3) {
    return (
      effects.enter("labelLink"),
      effects.enter("labelMarker"),
      effects.consume(code3),
      effects.exit("labelMarker"),
      effects.exit("labelLink"),
      after
    );
  }
  function after(code3) {
    return code3 === 94 && "_hiddenFootnoteSupport" in self.parser.constructs
      ? nok(code3)
      : ok2(code3);
  }
}

// ../../node_modules/micromark-core-commonmark/lib/line-ending.js
var lineEnding = {
  name: "lineEnding",
  tokenize: tokenizeLineEnding,
};
function tokenizeLineEnding(effects, ok2) {
  return start;
  function start(code3) {
    return (
      effects.enter("lineEnding"),
      effects.consume(code3),
      effects.exit("lineEnding"),
      factorySpace(effects, ok2, "linePrefix")
    );
  }
}

// ../../node_modules/micromark-core-commonmark/lib/thematic-break.js
var thematicBreak = {
  name: "thematicBreak",
  tokenize: tokenizeThematicBreak,
};
function tokenizeThematicBreak(effects, ok2, nok) {
  let size = 0,
    marker;
  return start;
  function start(code3) {
    return effects.enter("thematicBreak"), (marker = code3), atBreak(code3);
  }
  function atBreak(code3) {
    return code3 === marker
      ? (effects.enter("thematicBreakSequence"), sequence(code3))
      : markdownSpace(code3)
      ? factorySpace(effects, atBreak, "whitespace")(code3)
      : size < 3 || (code3 !== null && !markdownLineEnding(code3))
      ? nok(code3)
      : (effects.exit("thematicBreak"), ok2(code3));
  }
  function sequence(code3) {
    return code3 === marker
      ? (effects.consume(code3), size++, sequence)
      : (effects.exit("thematicBreakSequence"), atBreak(code3));
  }
}

// ../../node_modules/micromark-core-commonmark/lib/list.js
var list = {
    name: "list",
    tokenize: tokenizeListStart,
    continuation: {
      tokenize: tokenizeListContinuation,
    },
    exit: tokenizeListEnd,
  },
  listItemPrefixWhitespaceConstruct = {
    tokenize: tokenizeListItemPrefixWhitespace,
    partial: !0,
  },
  indentConstruct = {
    tokenize: tokenizeIndent,
    partial: !0,
  };
function tokenizeListStart(effects, ok2, nok) {
  let self = this,
    tail = self.events[self.events.length - 1],
    initialSize =
      tail && tail[1].type === "linePrefix"
        ? tail[2].sliceSerialize(tail[1], !0).length
        : 0,
    size = 0;
  return start;
  function start(code3) {
    let kind =
      self.containerState.type ||
      (code3 === 42 || code3 === 43 || code3 === 45
        ? "listUnordered"
        : "listOrdered");
    if (
      kind === "listUnordered"
        ? !self.containerState.marker || code3 === self.containerState.marker
        : asciiDigit(code3)
    ) {
      if (
        (self.containerState.type ||
          ((self.containerState.type = kind),
          effects.enter(kind, {
            _container: !0,
          })),
        kind === "listUnordered")
      )
        return (
          effects.enter("listItemPrefix"),
          code3 === 42 || code3 === 45
            ? effects.check(thematicBreak, nok, atMarker)(code3)
            : atMarker(code3)
        );
      if (!self.interrupt || code3 === 49)
        return (
          effects.enter("listItemPrefix"),
          effects.enter("listItemValue"),
          inside(code3)
        );
    }
    return nok(code3);
  }
  function inside(code3) {
    return asciiDigit(code3) && ++size < 10
      ? (effects.consume(code3), inside)
      : (!self.interrupt || size < 2) &&
        (self.containerState.marker
          ? code3 === self.containerState.marker
          : code3 === 41 || code3 === 46)
      ? (effects.exit("listItemValue"), atMarker(code3))
      : nok(code3);
  }
  function atMarker(code3) {
    return (
      effects.enter("listItemMarker"),
      effects.consume(code3),
      effects.exit("listItemMarker"),
      (self.containerState.marker = self.containerState.marker || code3),
      effects.check(
        blankLine,
        self.interrupt ? nok : onBlank,
        effects.attempt(
          listItemPrefixWhitespaceConstruct,
          endOfPrefix,
          otherPrefix
        )
      )
    );
  }
  function onBlank(code3) {
    return (
      (self.containerState.initialBlankLine = !0),
      initialSize++,
      endOfPrefix(code3)
    );
  }
  function otherPrefix(code3) {
    return markdownSpace(code3)
      ? (effects.enter("listItemPrefixWhitespace"),
        effects.consume(code3),
        effects.exit("listItemPrefixWhitespace"),
        endOfPrefix)
      : nok(code3);
  }
  function endOfPrefix(code3) {
    return (
      (self.containerState.size =
        initialSize +
        self.sliceSerialize(effects.exit("listItemPrefix"), !0).length),
      ok2(code3)
    );
  }
}
function tokenizeListContinuation(effects, ok2, nok) {
  let self = this;
  return (
    (self.containerState._closeFlow = void 0),
    effects.check(blankLine, onBlank, notBlank)
  );
  function onBlank(code3) {
    return (
      (self.containerState.furtherBlankLines =
        self.containerState.furtherBlankLines ||
        self.containerState.initialBlankLine),
      factorySpace(
        effects,
        ok2,
        "listItemIndent",
        self.containerState.size + 1
      )(code3)
    );
  }
  function notBlank(code3) {
    return self.containerState.furtherBlankLines || !markdownSpace(code3)
      ? ((self.containerState.furtherBlankLines = void 0),
        (self.containerState.initialBlankLine = void 0),
        notInCurrentItem(code3))
      : ((self.containerState.furtherBlankLines = void 0),
        (self.containerState.initialBlankLine = void 0),
        effects.attempt(indentConstruct, ok2, notInCurrentItem)(code3));
  }
  function notInCurrentItem(code3) {
    return (
      (self.containerState._closeFlow = !0),
      (self.interrupt = void 0),
      factorySpace(
        effects,
        effects.attempt(list, ok2, nok),
        "linePrefix",
        self.parser.constructs.disable.null.includes("codeIndented")
          ? void 0
          : 4
      )(code3)
    );
  }
}
function tokenizeIndent(effects, ok2, nok) {
  let self = this;
  return factorySpace(
    effects,
    afterPrefix,
    "listItemIndent",
    self.containerState.size + 1
  );
  function afterPrefix(code3) {
    let tail = self.events[self.events.length - 1];
    return tail &&
      tail[1].type === "listItemIndent" &&
      tail[2].sliceSerialize(tail[1], !0).length === self.containerState.size
      ? ok2(code3)
      : nok(code3);
  }
}
function tokenizeListEnd(effects) {
  effects.exit(this.containerState.type);
}
function tokenizeListItemPrefixWhitespace(effects, ok2, nok) {
  let self = this;
  return factorySpace(
    effects,
    afterPrefix,
    "listItemPrefixWhitespace",
    self.parser.constructs.disable.null.includes("codeIndented")
      ? void 0
      : 4 + 1
  );
  function afterPrefix(code3) {
    let tail = self.events[self.events.length - 1];
    return !markdownSpace(code3) &&
      tail &&
      tail[1].type === "listItemPrefixWhitespace"
      ? ok2(code3)
      : nok(code3);
  }
}

// ../../node_modules/micromark-core-commonmark/lib/setext-underline.js
var setextUnderline = {
  name: "setextUnderline",
  tokenize: tokenizeSetextUnderline,
  resolveTo: resolveToSetextUnderline,
};
function resolveToSetextUnderline(events, context) {
  let index2 = events.length,
    content3,
    text8,
    definition2;
  for (; index2--; )
    if (events[index2][0] === "enter") {
      if (events[index2][1].type === "content") {
        content3 = index2;
        break;
      }
      events[index2][1].type === "paragraph" && (text8 = index2);
    } else
      events[index2][1].type === "content" && events.splice(index2, 1),
        !definition2 &&
          events[index2][1].type === "definition" &&
          (definition2 = index2);
  let heading2 = {
    type: "setextHeading",
    start: Object.assign({}, events[text8][1].start),
    end: Object.assign({}, events[events.length - 1][1].end),
  };
  return (
    (events[text8][1].type = "setextHeadingText"),
    definition2
      ? (events.splice(text8, 0, ["enter", heading2, context]),
        events.splice(definition2 + 1, 0, [
          "exit",
          events[content3][1],
          context,
        ]),
        (events[content3][1].end = Object.assign(
          {},
          events[definition2][1].end
        )))
      : (events[content3][1] = heading2),
    events.push(["exit", heading2, context]),
    events
  );
}
function tokenizeSetextUnderline(effects, ok2, nok) {
  let self = this,
    index2 = self.events.length,
    marker,
    paragraph2;
  for (; index2--; )
    if (
      self.events[index2][1].type !== "lineEnding" &&
      self.events[index2][1].type !== "linePrefix" &&
      self.events[index2][1].type !== "content"
    ) {
      paragraph2 = self.events[index2][1].type === "paragraph";
      break;
    }
  return start;
  function start(code3) {
    return !self.parser.lazy[self.now().line] && (self.interrupt || paragraph2)
      ? (effects.enter("setextHeadingLine"),
        effects.enter("setextHeadingLineSequence"),
        (marker = code3),
        closingSequence(code3))
      : nok(code3);
  }
  function closingSequence(code3) {
    return code3 === marker
      ? (effects.consume(code3), closingSequence)
      : (effects.exit("setextHeadingLineSequence"),
        factorySpace(effects, closingSequenceEnd, "lineSuffix")(code3));
  }
  function closingSequenceEnd(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? (effects.exit("setextHeadingLine"), ok2(code3))
      : nok(code3);
  }
}

// ../../node_modules/micromark/lib/initialize/flow.js
var flow = {
  tokenize: initializeFlow,
};
function initializeFlow(effects) {
  let self = this,
    initial = effects.attempt(
      blankLine,
      atBlankEnding,
      effects.attempt(
        this.parser.constructs.flowInitial,
        afterConstruct,
        factorySpace(
          effects,
          effects.attempt(
            this.parser.constructs.flow,
            afterConstruct,
            effects.attempt(content2, afterConstruct)
          ),
          "linePrefix"
        )
      )
    );
  return initial;
  function atBlankEnding(code3) {
    if (code3 === null) {
      effects.consume(code3);
      return;
    }
    return (
      effects.enter("lineEndingBlank"),
      effects.consume(code3),
      effects.exit("lineEndingBlank"),
      (self.currentConstruct = void 0),
      initial
    );
  }
  function afterConstruct(code3) {
    if (code3 === null) {
      effects.consume(code3);
      return;
    }
    return (
      effects.enter("lineEnding"),
      effects.consume(code3),
      effects.exit("lineEnding"),
      (self.currentConstruct = void 0),
      initial
    );
  }
}

// ../../node_modules/micromark/lib/initialize/text.js
var resolver = {
    resolveAll: createResolver(),
  },
  string = initializeFactory("string"),
  text = initializeFactory("text");
function initializeFactory(field) {
  return {
    tokenize: initializeText,
    resolveAll: createResolver(
      field === "text" ? resolveAllLineSuffixes : void 0
    ),
  };
  function initializeText(effects) {
    let self = this,
      constructs2 = this.parser.constructs[field],
      text8 = effects.attempt(constructs2, start, notText);
    return start;
    function start(code3) {
      return atBreak(code3) ? text8(code3) : notText(code3);
    }
    function notText(code3) {
      if (code3 === null) {
        effects.consume(code3);
        return;
      }
      return effects.enter("data"), effects.consume(code3), data2;
    }
    function data2(code3) {
      return atBreak(code3)
        ? (effects.exit("data"), text8(code3))
        : (effects.consume(code3), data2);
    }
    function atBreak(code3) {
      if (code3 === null) return !0;
      let list3 = constructs2[code3],
        index2 = -1;
      if (list3)
        for (; ++index2 < list3.length; ) {
          let item = list3[index2];
          if (!item.previous || item.previous.call(self, self.previous))
            return !0;
        }
      return !1;
    }
  }
}
function createResolver(extraResolver) {
  return resolveAllText;
  function resolveAllText(events, context) {
    let index2 = -1,
      enter;
    for (; ++index2 <= events.length; )
      enter === void 0
        ? events[index2] &&
          events[index2][1].type === "data" &&
          ((enter = index2), index2++)
        : (!events[index2] || events[index2][1].type !== "data") &&
          (index2 !== enter + 2 &&
            ((events[enter][1].end = events[index2 - 1][1].end),
            events.splice(enter + 2, index2 - enter - 2),
            (index2 = enter + 2)),
          (enter = void 0));
    return extraResolver ? extraResolver(events, context) : events;
  }
}
function resolveAllLineSuffixes(events, context) {
  let eventIndex = 0;
  for (; ++eventIndex <= events.length; )
    if (
      (eventIndex === events.length ||
        events[eventIndex][1].type === "lineEnding") &&
      events[eventIndex - 1][1].type === "data"
    ) {
      let data2 = events[eventIndex - 1][1],
        chunks = context.sliceStream(data2),
        index2 = chunks.length,
        bufferIndex = -1,
        size = 0,
        tabs;
      for (; index2--; ) {
        let chunk = chunks[index2];
        if (typeof chunk == "string") {
          for (
            bufferIndex = chunk.length;
            chunk.charCodeAt(bufferIndex - 1) === 32;

          )
            size++, bufferIndex--;
          if (bufferIndex) break;
          bufferIndex = -1;
        } else if (chunk === -2) (tabs = !0), size++;
        else if (chunk !== -1) {
          index2++;
          break;
        }
      }
      if (size) {
        let token = {
          type:
            eventIndex === events.length || tabs || size < 2
              ? "lineSuffix"
              : "hardBreakTrailing",
          start: {
            line: data2.end.line,
            column: data2.end.column - size,
            offset: data2.end.offset - size,
            _index: data2.start._index + index2,
            _bufferIndex: index2
              ? bufferIndex
              : data2.start._bufferIndex + bufferIndex,
          },
          end: Object.assign({}, data2.end),
        };
        (data2.end = Object.assign({}, token.start)),
          data2.start.offset === data2.end.offset
            ? Object.assign(data2, token)
            : (events.splice(
                eventIndex,
                0,
                ["enter", token, context],
                ["exit", token, context]
              ),
              (eventIndex += 2));
      }
      eventIndex++;
    }
  return events;
}

// ../../node_modules/micromark/lib/create-tokenizer.js
function createTokenizer(parser, initialize, from8) {
  let point4 = Object.assign(
      from8
        ? Object.assign({}, from8)
        : {
            line: 1,
            column: 1,
            offset: 0,
          },
      {
        _index: 0,
        _bufferIndex: -1,
      }
    ),
    columnStart = {},
    resolveAllConstructs = [],
    chunks = [],
    stack = [],
    consumed = !0,
    effects = {
      consume,
      enter,
      exit: exit3,
      attempt: constructFactory(onsuccessfulconstruct),
      check: constructFactory(onsuccessfulcheck),
      interrupt: constructFactory(onsuccessfulcheck, {
        interrupt: !0,
      }),
    },
    context = {
      previous: null,
      code: null,
      containerState: {},
      events: [],
      parser,
      sliceStream,
      sliceSerialize,
      now,
      defineSkip,
      write,
    },
    state = initialize.tokenize.call(context, effects),
    expectedCode;
  return (
    initialize.resolveAll && resolveAllConstructs.push(initialize), context
  );
  function write(slice) {
    return (
      (chunks = push(chunks, slice)),
      main(),
      chunks[chunks.length - 1] !== null
        ? []
        : (addResult(initialize, 0),
          (context.events = resolveAll(
            resolveAllConstructs,
            context.events,
            context
          )),
          context.events)
    );
  }
  function sliceSerialize(token, expandTabs) {
    return serializeChunks(sliceStream(token), expandTabs);
  }
  function sliceStream(token) {
    return sliceChunks(chunks, token);
  }
  function now() {
    return Object.assign({}, point4);
  }
  function defineSkip(value) {
    (columnStart[value.line] = value.column), accountForPotentialSkip();
  }
  function main() {
    let chunkIndex;
    for (; point4._index < chunks.length; ) {
      let chunk = chunks[point4._index];
      if (typeof chunk == "string")
        for (
          chunkIndex = point4._index,
            point4._bufferIndex < 0 && (point4._bufferIndex = 0);
          point4._index === chunkIndex && point4._bufferIndex < chunk.length;

        )
          go2(chunk.charCodeAt(point4._bufferIndex));
      else go2(chunk);
    }
  }
  function go2(code3) {
    (consumed = void 0), (expectedCode = code3), (state = state(code3));
  }
  function consume(code3) {
    markdownLineEnding(code3)
      ? (point4.line++,
        (point4.column = 1),
        (point4.offset += code3 === -3 ? 2 : 1),
        accountForPotentialSkip())
      : code3 !== -1 && (point4.column++, point4.offset++),
      point4._bufferIndex < 0
        ? point4._index++
        : (point4._bufferIndex++,
          point4._bufferIndex === chunks[point4._index].length &&
            ((point4._bufferIndex = -1), point4._index++)),
      (context.previous = code3),
      (consumed = !0);
  }
  function enter(type, fields) {
    let token = fields || {};
    return (
      (token.type = type),
      (token.start = now()),
      context.events.push(["enter", token, context]),
      stack.push(token),
      token
    );
  }
  function exit3(type) {
    let token = stack.pop();
    return (
      (token.end = now()), context.events.push(["exit", token, context]), token
    );
  }
  function onsuccessfulconstruct(construct, info2) {
    addResult(construct, info2.from);
  }
  function onsuccessfulcheck(_, info2) {
    info2.restore();
  }
  function constructFactory(onreturn, fields) {
    return hook;
    function hook(constructs2, returnState, bogusState) {
      let listOfConstructs, constructIndex, currentConstruct, info2;
      return Array.isArray(constructs2)
        ? handleListOfConstructs(constructs2)
        : "tokenize" in constructs2
        ? handleListOfConstructs([constructs2])
        : handleMapOfConstructs(constructs2);
      function handleMapOfConstructs(map3) {
        return start;
        function start(code3) {
          let def = code3 !== null && map3[code3],
            all5 = code3 !== null && map3.null,
            list3 = [
              ...(Array.isArray(def) ? def : def ? [def] : []),
              ...(Array.isArray(all5) ? all5 : all5 ? [all5] : []),
            ];
          return handleListOfConstructs(list3)(code3);
        }
      }
      function handleListOfConstructs(list3) {
        return (
          (listOfConstructs = list3),
          (constructIndex = 0),
          list3.length === 0
            ? bogusState
            : handleConstruct(list3[constructIndex])
        );
      }
      function handleConstruct(construct) {
        return start;
        function start(code3) {
          return (
            (info2 = store()),
            (currentConstruct = construct),
            construct.partial || (context.currentConstruct = construct),
            construct.name &&
            context.parser.constructs.disable.null.includes(construct.name)
              ? nok(code3)
              : construct.tokenize.call(
                  fields
                    ? Object.assign(Object.create(context), fields)
                    : context,
                  effects,
                  ok2,
                  nok
                )(code3)
          );
        }
      }
      function ok2(code3) {
        return (consumed = !0), onreturn(currentConstruct, info2), returnState;
      }
      function nok(code3) {
        return (
          (consumed = !0),
          info2.restore(),
          ++constructIndex < listOfConstructs.length
            ? handleConstruct(listOfConstructs[constructIndex])
            : bogusState
        );
      }
    }
  }
  function addResult(construct, from9) {
    construct.resolveAll &&
      !resolveAllConstructs.includes(construct) &&
      resolveAllConstructs.push(construct),
      construct.resolve &&
        splice(
          context.events,
          from9,
          context.events.length - from9,
          construct.resolve(context.events.slice(from9), context)
        ),
      construct.resolveTo &&
        (context.events = construct.resolveTo(context.events, context));
  }
  function store() {
    let startPoint = now(),
      startPrevious = context.previous,
      startCurrentConstruct = context.currentConstruct,
      startEventsIndex = context.events.length,
      startStack = Array.from(stack);
    return {
      restore,
      from: startEventsIndex,
    };
    function restore() {
      (point4 = startPoint),
        (context.previous = startPrevious),
        (context.currentConstruct = startCurrentConstruct),
        (context.events.length = startEventsIndex),
        (stack = startStack),
        accountForPotentialSkip();
    }
  }
  function accountForPotentialSkip() {
    point4.line in columnStart &&
      point4.column < 2 &&
      ((point4.column = columnStart[point4.line]),
      (point4.offset += columnStart[point4.line] - 1));
  }
}
function sliceChunks(chunks, token) {
  let startIndex = token.start._index,
    startBufferIndex = token.start._bufferIndex,
    endIndex = token.end._index,
    endBufferIndex = token.end._bufferIndex,
    view;
  return (
    startIndex === endIndex
      ? (view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)])
      : ((view = chunks.slice(startIndex, endIndex)),
        startBufferIndex > -1 && (view[0] = view[0].slice(startBufferIndex)),
        endBufferIndex > 0 &&
          view.push(chunks[endIndex].slice(0, endBufferIndex))),
    view
  );
}
function serializeChunks(chunks, expandTabs) {
  let index2 = -1,
    result = [],
    atTab;
  for (; ++index2 < chunks.length; ) {
    let chunk = chunks[index2],
      value;
    if (typeof chunk == "string") value = chunk;
    else
      switch (chunk) {
        case -5: {
          value = "\r";
          break;
        }
        case -4: {
          value = `
`;
          break;
        }
        case -3: {
          value = `\r
`;
          break;
        }
        case -2: {
          value = expandTabs ? " " : "	";
          break;
        }
        case -1: {
          if (!expandTabs && atTab) continue;
          value = " ";
          break;
        }
        default:
          value = String.fromCharCode(chunk);
      }
    (atTab = chunk === -2), result.push(value);
  }
  return result.join("");
}

// ../../node_modules/micromark/lib/constructs.js
var constructs_exports = {};
__export(constructs_exports, {
  attentionMarkers: () => attentionMarkers,
  contentInitial: () => contentInitial,
  disable: () => disable,
  document: () => document3,
  flow: () => flow2,
  flowInitial: () => flowInitial,
  insideSpan: () => insideSpan,
  string: () => string2,
  text: () => text2,
});
var document3 = {
    [42]: list,
    [43]: list,
    [45]: list,
    [48]: list,
    [49]: list,
    [50]: list,
    [51]: list,
    [52]: list,
    [53]: list,
    [54]: list,
    [55]: list,
    [56]: list,
    [57]: list,
    [62]: blockQuote,
  },
  contentInitial = {
    [91]: definition,
  },
  flowInitial = {
    [-2]: codeIndented,
    [-1]: codeIndented,
    [32]: codeIndented,
  },
  flow2 = {
    [35]: headingAtx,
    [42]: thematicBreak,
    [45]: [setextUnderline, thematicBreak],
    [60]: htmlFlow,
    [61]: setextUnderline,
    [95]: thematicBreak,
    [96]: codeFenced,
    [126]: codeFenced,
  },
  string2 = {
    [38]: characterReference,
    [92]: characterEscape,
  },
  text2 = {
    [-5]: lineEnding,
    [-4]: lineEnding,
    [-3]: lineEnding,
    [33]: labelStartImage,
    [38]: characterReference,
    [42]: attention,
    [60]: [autolink, htmlText],
    [91]: labelStartLink,
    [92]: [hardBreakEscape, characterEscape],
    [93]: labelEnd,
    [95]: attention,
    [96]: codeText,
  },
  insideSpan = {
    null: [attention, resolver],
  },
  attentionMarkers = {
    null: [42, 95],
  },
  disable = {
    null: [],
  };

// ../../node_modules/micromark/lib/parse.js
function parse(options = {}) {
  let constructs2 = combineExtensions(
      [constructs_exports].concat(options.extensions || [])
    ),
    parser = {
      defined: [],
      lazy: {},
      constructs: constructs2,
      content: create3(content),
      document: create3(document2),
      flow: create3(flow),
      string: create3(string),
      text: create3(text),
    };
  return parser;
  function create3(initial) {
    return creator;
    function creator(from8) {
      return createTokenizer(parser, initial, from8);
    }
  }
}

// ../../node_modules/micromark/lib/preprocess.js
var search = /[\0\t\n\r]/g;
function preprocess() {
  let column = 1,
    buffer2 = "",
    start = !0,
    atCarriageReturn;
  return preprocessor;
  function preprocessor(value, encoding, end) {
    let chunks = [],
      match,
      next,
      startPosition,
      endPosition,
      code3;
    for (
      value = buffer2 + value.toString(encoding),
        startPosition = 0,
        buffer2 = "",
        start &&
          (value.charCodeAt(0) === 65279 && startPosition++, (start = void 0));
      startPosition < value.length;

    ) {
      if (
        ((search.lastIndex = startPosition),
        (match = search.exec(value)),
        (endPosition =
          match && match.index !== void 0 ? match.index : value.length),
        (code3 = value.charCodeAt(endPosition)),
        !match)
      ) {
        buffer2 = value.slice(startPosition);
        break;
      }
      if (code3 === 10 && startPosition === endPosition && atCarriageReturn)
        chunks.push(-3), (atCarriageReturn = void 0);
      else
        switch (
          (atCarriageReturn && (chunks.push(-5), (atCarriageReturn = void 0)),
          startPosition < endPosition &&
            (chunks.push(value.slice(startPosition, endPosition)),
            (column += endPosition - startPosition)),
          code3)
        ) {
          case 0: {
            chunks.push(65533), column++;
            break;
          }
          case 9: {
            for (
              next = Math.ceil(column / 4) * 4, chunks.push(-2);
              column++ < next;

            )
              chunks.push(-1);
            break;
          }
          case 10: {
            chunks.push(-4), (column = 1);
            break;
          }
          default:
            (atCarriageReturn = !0), (column = 1);
        }
      startPosition = endPosition + 1;
    }
    return (
      end &&
        (atCarriageReturn && chunks.push(-5),
        buffer2 && chunks.push(buffer2),
        chunks.push(null)),
      chunks
    );
  }
}

// ../../node_modules/micromark/lib/postprocess.js
function postprocess(events) {
  for (; !subtokenize(events); );
  return events;
}

// ../../node_modules/micromark-util-decode-numeric-character-reference/index.js
function decodeNumericCharacterReference(value, base3) {
  let code3 = Number.parseInt(value, base3);
  return code3 < 9 ||
    code3 === 11 ||
    (code3 > 13 && code3 < 32) ||
    (code3 > 126 && code3 < 160) ||
    (code3 > 55295 && code3 < 57344) ||
    (code3 > 64975 && code3 < 65008) ||
    (code3 & 65535) === 65535 ||
    (code3 & 65535) === 65534 ||
    code3 > 1114111
    ? "\uFFFD"
    : String.fromCharCode(code3);
}

// ../../node_modules/micromark-util-decode-string/index.js
var characterEscapeOrReference =
  /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value) {
  return value.replace(characterEscapeOrReference, decode);
}
function decode($0, $1, $2) {
  if ($1) return $1;
  if ($2.charCodeAt(0) === 35) {
    let head2 = $2.charCodeAt(1),
      hex = head2 === 120 || head2 === 88;
    return decodeNumericCharacterReference(
      $2.slice(hex ? 2 : 1),
      hex ? 16 : 10
    );
  }
  return decodeNamedCharacterReference($2) || $0;
}

// ../../node_modules/mdast-util-from-markdown/lib/index.js
var own4 = {}.hasOwnProperty,
  fromMarkdown = function (value, encoding, options) {
    return (
      typeof encoding != "string" &&
        ((options = encoding), (encoding = void 0)),
      compiler(options)(
        postprocess(
          parse(options).document().write(preprocess()(value, encoding, !0))
        )
      )
    );
  };
function compiler(options = {}) {
  let config = configure(
      {
        transforms: [],
        canContainEols: [
          "emphasis",
          "fragment",
          "heading",
          "paragraph",
          "strong",
        ],
        enter: {
          autolink: opener(link2),
          autolinkProtocol: onenterdata,
          autolinkEmail: onenterdata,
          atxHeading: opener(heading2),
          blockQuote: opener(blockQuote2),
          characterEscape: onenterdata,
          characterReference: onenterdata,
          codeFenced: opener(codeFlow),
          codeFencedFenceInfo: buffer2,
          codeFencedFenceMeta: buffer2,
          codeIndented: opener(codeFlow, buffer2),
          codeText: opener(codeText2, buffer2),
          codeTextData: onenterdata,
          data: onenterdata,
          codeFlowValue: onenterdata,
          definition: opener(definition2),
          definitionDestinationString: buffer2,
          definitionLabelString: buffer2,
          definitionTitleString: buffer2,
          emphasis: opener(emphasis2),
          hardBreakEscape: opener(hardBreak2),
          hardBreakTrailing: opener(hardBreak2),
          htmlFlow: opener(html4, buffer2),
          htmlFlowData: onenterdata,
          htmlText: opener(html4, buffer2),
          htmlTextData: onenterdata,
          image: opener(image2),
          label: buffer2,
          link: opener(link2),
          listItem: opener(listItem3),
          listItemValue: onenterlistitemvalue,
          listOrdered: opener(list3, onenterlistordered),
          listUnordered: opener(list3),
          paragraph: opener(paragraph2),
          reference: onenterreference,
          referenceString: buffer2,
          resourceDestinationString: buffer2,
          resourceTitleString: buffer2,
          setextHeading: opener(heading2),
          strong: opener(strong2),
          thematicBreak: opener(thematicBreak3),
        },
        exit: {
          atxHeading: closer(),
          atxHeadingSequence: onexitatxheadingsequence,
          autolink: closer(),
          autolinkEmail: onexitautolinkemail,
          autolinkProtocol: onexitautolinkprotocol,
          blockQuote: closer(),
          characterEscapeValue: onexitdata,
          characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
          characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
          characterReferenceValue: onexitcharacterreferencevalue,
          codeFenced: closer(onexitcodefenced),
          codeFencedFence: onexitcodefencedfence,
          codeFencedFenceInfo: onexitcodefencedfenceinfo,
          codeFencedFenceMeta: onexitcodefencedfencemeta,
          codeFlowValue: onexitdata,
          codeIndented: closer(onexitcodeindented),
          codeText: closer(onexitcodetext),
          codeTextData: onexitdata,
          data: onexitdata,
          definition: closer(),
          definitionDestinationString: onexitdefinitiondestinationstring,
          definitionLabelString: onexitdefinitionlabelstring,
          definitionTitleString: onexitdefinitiontitlestring,
          emphasis: closer(),
          hardBreakEscape: closer(onexithardbreak),
          hardBreakTrailing: closer(onexithardbreak),
          htmlFlow: closer(onexithtmlflow),
          htmlFlowData: onexitdata,
          htmlText: closer(onexithtmltext),
          htmlTextData: onexitdata,
          image: closer(onexitimage),
          label: onexitlabel,
          labelText: onexitlabeltext,
          lineEnding: onexitlineending,
          link: closer(onexitlink),
          listItem: closer(),
          listOrdered: closer(),
          listUnordered: closer(),
          paragraph: closer(),
          referenceString: onexitreferencestring,
          resourceDestinationString: onexitresourcedestinationstring,
          resourceTitleString: onexitresourcetitlestring,
          resource: onexitresource,
          setextHeading: closer(onexitsetextheading),
          setextHeadingLineSequence: onexitsetextheadinglinesequence,
          setextHeadingText: onexitsetextheadingtext,
          strong: closer(),
          thematicBreak: closer(),
        },
      },
      options.mdastExtensions || []
    ),
    data2 = {};
  return compile;
  function compile(events) {
    let tree = {
        type: "root",
        children: [],
      },
      stack = [tree],
      tokenStack = [],
      listStack = [],
      context = {
        stack,
        tokenStack,
        config,
        enter,
        exit: exit3,
        buffer: buffer2,
        resume,
        setData,
        getData,
      },
      index2 = -1;
    for (; ++index2 < events.length; )
      if (
        events[index2][1].type === "listOrdered" ||
        events[index2][1].type === "listUnordered"
      )
        if (events[index2][0] === "enter") listStack.push(index2);
        else {
          let tail = listStack.pop();
          index2 = prepareList(events, tail, index2);
        }
    for (index2 = -1; ++index2 < events.length; ) {
      let handler2 = config[events[index2][0]];
      own4.call(handler2, events[index2][1].type) &&
        handler2[events[index2][1].type].call(
          Object.assign(
            {
              sliceSerialize: events[index2][2].sliceSerialize,
            },
            context
          ),
          events[index2][1]
        );
    }
    if (tokenStack.length > 0) {
      let tail = tokenStack[tokenStack.length - 1];
      (tail[1] || defaultOnError).call(context, void 0, tail[0]);
    }
    for (
      tree.position = {
        start: point4(
          events.length > 0
            ? events[0][1].start
            : {
                line: 1,
                column: 1,
                offset: 0,
              }
        ),
        end: point4(
          events.length > 0
            ? events[events.length - 2][1].end
            : {
                line: 1,
                column: 1,
                offset: 0,
              }
        ),
      },
        index2 = -1;
      ++index2 < config.transforms.length;

    )
      tree = config.transforms[index2](tree) || tree;
    return tree;
  }
  function prepareList(events, start, length) {
    let index2 = start - 1,
      containerBalance = -1,
      listSpread = !1,
      listItem4,
      lineIndex,
      firstBlankLineIndex,
      atMarker;
    for (; ++index2 <= length; ) {
      let event = events[index2];
      if (
        (event[1].type === "listUnordered" ||
        event[1].type === "listOrdered" ||
        event[1].type === "blockQuote"
          ? (event[0] === "enter" ? containerBalance++ : containerBalance--,
            (atMarker = void 0))
          : event[1].type === "lineEndingBlank"
          ? event[0] === "enter" &&
            (listItem4 &&
              !atMarker &&
              !containerBalance &&
              !firstBlankLineIndex &&
              (firstBlankLineIndex = index2),
            (atMarker = void 0))
          : event[1].type === "linePrefix" ||
            event[1].type === "listItemValue" ||
            event[1].type === "listItemMarker" ||
            event[1].type === "listItemPrefix" ||
            event[1].type === "listItemPrefixWhitespace" ||
            (atMarker = void 0),
        (!containerBalance &&
          event[0] === "enter" &&
          event[1].type === "listItemPrefix") ||
          (containerBalance === -1 &&
            event[0] === "exit" &&
            (event[1].type === "listUnordered" ||
              event[1].type === "listOrdered")))
      ) {
        if (listItem4) {
          let tailIndex = index2;
          for (lineIndex = void 0; tailIndex--; ) {
            let tailEvent = events[tailIndex];
            if (
              tailEvent[1].type === "lineEnding" ||
              tailEvent[1].type === "lineEndingBlank"
            ) {
              if (tailEvent[0] === "exit") continue;
              lineIndex &&
                ((events[lineIndex][1].type = "lineEndingBlank"),
                (listSpread = !0)),
                (tailEvent[1].type = "lineEnding"),
                (lineIndex = tailIndex);
            } else if (
              !(
                tailEvent[1].type === "linePrefix" ||
                tailEvent[1].type === "blockQuotePrefix" ||
                tailEvent[1].type === "blockQuotePrefixWhitespace" ||
                tailEvent[1].type === "blockQuoteMarker" ||
                tailEvent[1].type === "listItemIndent"
              )
            )
              break;
          }
          firstBlankLineIndex &&
            (!lineIndex || firstBlankLineIndex < lineIndex) &&
            (listItem4._spread = !0),
            (listItem4.end = Object.assign(
              {},
              lineIndex ? events[lineIndex][1].start : event[1].end
            )),
            events.splice(lineIndex || index2, 0, [
              "exit",
              listItem4,
              event[2],
            ]),
            index2++,
            length++;
        }
        event[1].type === "listItemPrefix" &&
          ((listItem4 = {
            type: "listItem",
            _spread: !1,
            start: Object.assign({}, event[1].start),
          }),
          events.splice(index2, 0, ["enter", listItem4, event[2]]),
          index2++,
          length++,
          (firstBlankLineIndex = void 0),
          (atMarker = !0));
      }
    }
    return (events[start][1]._spread = listSpread), length;
  }
  function setData(key, value) {
    data2[key] = value;
  }
  function getData(key) {
    return data2[key];
  }
  function point4(d) {
    return {
      line: d.line,
      column: d.column,
      offset: d.offset,
    };
  }
  function opener(create3, and) {
    return open;
    function open(token) {
      enter.call(this, create3(token), token), and && and.call(this, token);
    }
  }
  function buffer2() {
    this.stack.push({
      type: "fragment",
      children: [],
    });
  }
  function enter(node, token, errorHandler) {
    return (
      this.stack[this.stack.length - 1].children.push(node),
      this.stack.push(node),
      this.tokenStack.push([token, errorHandler]),
      (node.position = {
        start: point4(token.start),
      }),
      node
    );
  }
  function closer(and) {
    return close;
    function close(token) {
      and && and.call(this, token), exit3.call(this, token);
    }
  }
  function exit3(token, onExitError) {
    let node = this.stack.pop(),
      open = this.tokenStack.pop();
    if (open)
      open[0].type !== token.type &&
        (onExitError
          ? onExitError.call(this, token, open[0])
          : (open[1] || defaultOnError).call(this, token, open[0]));
    else
      throw new Error(
        "Cannot close `" +
          token.type +
          "` (" +
          stringifyPosition({
            start: token.start,
            end: token.end,
          }) +
          "): it\u2019s not open"
      );
    return (node.position.end = point4(token.end)), node;
  }
  function resume() {
    return toString(this.stack.pop());
  }
  function onenterlistordered() {
    setData("expectingFirstListItemValue", !0);
  }
  function onenterlistitemvalue(token) {
    if (getData("expectingFirstListItemValue")) {
      let ancestor = this.stack[this.stack.length - 2];
      (ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)),
        setData("expectingFirstListItemValue");
    }
  }
  function onexitcodefencedfenceinfo() {
    let data3 = this.resume(),
      node = this.stack[this.stack.length - 1];
    node.lang = data3;
  }
  function onexitcodefencedfencemeta() {
    let data3 = this.resume(),
      node = this.stack[this.stack.length - 1];
    node.meta = data3;
  }
  function onexitcodefencedfence() {
    getData("flowCodeInside") || (this.buffer(), setData("flowCodeInside", !0));
  }
  function onexitcodefenced() {
    let data3 = this.resume(),
      node = this.stack[this.stack.length - 1];
    (node.value = data3.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "")),
      setData("flowCodeInside");
  }
  function onexitcodeindented() {
    let data3 = this.resume(),
      node = this.stack[this.stack.length - 1];
    node.value = data3.replace(/(\r?\n|\r)$/g, "");
  }
  function onexitdefinitionlabelstring(token) {
    let label = this.resume(),
      node = this.stack[this.stack.length - 1];
    (node.label = label),
      (node.identifier = normalizeIdentifier(
        this.sliceSerialize(token)
      ).toLowerCase());
  }
  function onexitdefinitiontitlestring() {
    let data3 = this.resume(),
      node = this.stack[this.stack.length - 1];
    node.title = data3;
  }
  function onexitdefinitiondestinationstring() {
    let data3 = this.resume(),
      node = this.stack[this.stack.length - 1];
    node.url = data3;
  }
  function onexitatxheadingsequence(token) {
    let node = this.stack[this.stack.length - 1];
    if (!node.depth) {
      let depth = this.sliceSerialize(token).length;
      node.depth = depth;
    }
  }
  function onexitsetextheadingtext() {
    setData("setextHeadingSlurpLineEnding", !0);
  }
  function onexitsetextheadinglinesequence(token) {
    let node = this.stack[this.stack.length - 1];
    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
  }
  function onexitsetextheading() {
    setData("setextHeadingSlurpLineEnding");
  }
  function onenterdata(token) {
    let parent = this.stack[this.stack.length - 1],
      tail = parent.children[parent.children.length - 1];
    (!tail || tail.type !== "text") &&
      ((tail = text8()),
      (tail.position = {
        start: point4(token.start),
      }),
      parent.children.push(tail)),
      this.stack.push(tail);
  }
  function onexitdata(token) {
    let tail = this.stack.pop();
    (tail.value += this.sliceSerialize(token)),
      (tail.position.end = point4(token.end));
  }
  function onexitlineending(token) {
    let context = this.stack[this.stack.length - 1];
    if (getData("atHardBreak")) {
      let tail = context.children[context.children.length - 1];
      (tail.position.end = point4(token.end)), setData("atHardBreak");
      return;
    }
    !getData("setextHeadingSlurpLineEnding") &&
      config.canContainEols.includes(context.type) &&
      (onenterdata.call(this, token), onexitdata.call(this, token));
  }
  function onexithardbreak() {
    setData("atHardBreak", !0);
  }
  function onexithtmlflow() {
    let data3 = this.resume(),
      node = this.stack[this.stack.length - 1];
    node.value = data3;
  }
  function onexithtmltext() {
    let data3 = this.resume(),
      node = this.stack[this.stack.length - 1];
    node.value = data3;
  }
  function onexitcodetext() {
    let data3 = this.resume(),
      node = this.stack[this.stack.length - 1];
    node.value = data3;
  }
  function onexitlink() {
    let context = this.stack[this.stack.length - 1];
    getData("inReference")
      ? ((context.type += "Reference"),
        (context.referenceType = getData("referenceType") || "shortcut"),
        delete context.url,
        delete context.title)
      : (delete context.identifier, delete context.label),
      setData("referenceType");
  }
  function onexitimage() {
    let context = this.stack[this.stack.length - 1];
    getData("inReference")
      ? ((context.type += "Reference"),
        (context.referenceType = getData("referenceType") || "shortcut"),
        delete context.url,
        delete context.title)
      : (delete context.identifier, delete context.label),
      setData("referenceType");
  }
  function onexitlabeltext(token) {
    let ancestor = this.stack[this.stack.length - 2],
      string3 = this.sliceSerialize(token);
    (ancestor.label = decodeString(string3)),
      (ancestor.identifier = normalizeIdentifier(string3).toLowerCase());
  }
  function onexitlabel() {
    let fragment2 = this.stack[this.stack.length - 1],
      value = this.resume(),
      node = this.stack[this.stack.length - 1];
    setData("inReference", !0),
      node.type === "link"
        ? (node.children = fragment2.children)
        : (node.alt = value);
  }
  function onexitresourcedestinationstring() {
    let data3 = this.resume(),
      node = this.stack[this.stack.length - 1];
    node.url = data3;
  }
  function onexitresourcetitlestring() {
    let data3 = this.resume(),
      node = this.stack[this.stack.length - 1];
    node.title = data3;
  }
  function onexitresource() {
    setData("inReference");
  }
  function onenterreference() {
    setData("referenceType", "collapsed");
  }
  function onexitreferencestring(token) {
    let label = this.resume(),
      node = this.stack[this.stack.length - 1];
    (node.label = label),
      (node.identifier = normalizeIdentifier(
        this.sliceSerialize(token)
      ).toLowerCase()),
      setData("referenceType", "full");
  }
  function onexitcharacterreferencemarker(token) {
    setData("characterReferenceType", token.type);
  }
  function onexitcharacterreferencevalue(token) {
    let data3 = this.sliceSerialize(token),
      type = getData("characterReferenceType"),
      value;
    type
      ? ((value = decodeNumericCharacterReference(
          data3,
          type === "characterReferenceMarkerNumeric" ? 10 : 16
        )),
        setData("characterReferenceType"))
      : (value = decodeNamedCharacterReference(data3));
    let tail = this.stack.pop();
    (tail.value += value), (tail.position.end = point4(token.end));
  }
  function onexitautolinkprotocol(token) {
    onexitdata.call(this, token);
    let node = this.stack[this.stack.length - 1];
    node.url = this.sliceSerialize(token);
  }
  function onexitautolinkemail(token) {
    onexitdata.call(this, token);
    let node = this.stack[this.stack.length - 1];
    node.url = "mailto:" + this.sliceSerialize(token);
  }
  function blockQuote2() {
    return {
      type: "blockquote",
      children: [],
    };
  }
  function codeFlow() {
    return {
      type: "code",
      lang: null,
      meta: null,
      value: "",
    };
  }
  function codeText2() {
    return {
      type: "inlineCode",
      value: "",
    };
  }
  function definition2() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: "",
    };
  }
  function emphasis2() {
    return {
      type: "emphasis",
      children: [],
    };
  }
  function heading2() {
    return {
      type: "heading",
      depth: void 0,
      children: [],
    };
  }
  function hardBreak2() {
    return {
      type: "break",
    };
  }
  function html4() {
    return {
      type: "html",
      value: "",
    };
  }
  function image2() {
    return {
      type: "image",
      title: null,
      url: "",
      alt: null,
    };
  }
  function link2() {
    return {
      type: "link",
      title: null,
      url: "",
      children: [],
    };
  }
  function list3(token) {
    return {
      type: "list",
      ordered: token.type === "listOrdered",
      start: null,
      spread: token._spread,
      children: [],
    };
  }
  function listItem3(token) {
    return {
      type: "listItem",
      spread: token._spread,
      checked: null,
      children: [],
    };
  }
  function paragraph2() {
    return {
      type: "paragraph",
      children: [],
    };
  }
  function strong2() {
    return {
      type: "strong",
      children: [],
    };
  }
  function text8() {
    return {
      type: "text",
      value: "",
    };
  }
  function thematicBreak3() {
    return {
      type: "thematicBreak",
    };
  }
}
function configure(combined, extensions) {
  let index2 = -1;
  for (; ++index2 < extensions.length; ) {
    let value = extensions[index2];
    Array.isArray(value)
      ? configure(combined, value)
      : extension(combined, value);
  }
  return combined;
}
function extension(combined, extension2) {
  let key;
  for (key in extension2)
    if (own4.call(extension2, key)) {
      let list3 = key === "canContainEols" || key === "transforms",
        left =
          (own4.call(combined, key) ? combined[key] : void 0) ||
          (combined[key] = list3 ? [] : {}),
        right = extension2[key];
      right &&
        (list3
          ? (combined[key] = [...left, ...right])
          : Object.assign(left, right));
    }
}
function defaultOnError(left, right) {
  throw left
    ? new Error(
        "Cannot close `" +
          left.type +
          "` (" +
          stringifyPosition({
            start: left.start,
            end: left.end,
          }) +
          "): a different token (`" +
          right.type +
          "`, " +
          stringifyPosition({
            start: right.start,
            end: right.end,
          }) +
          ") is open"
      )
    : new Error(
        "Cannot close document, a token (`" +
          right.type +
          "`, " +
          stringifyPosition({
            start: right.start,
            end: right.end,
          }) +
          ") is still open"
      );
}

// ../../node_modules/remark-parse/lib/index.js
function remarkParse(options) {
  Object.assign(this, {
    Parser: (doc) => {
      let settings = this.data("settings");
      return fromMarkdown(
        doc,
        Object.assign({}, settings, options, {
          extensions: this.data("micromarkExtensions") || [],
          mdastExtensions: this.data("fromMarkdownExtensions") || [],
        })
      );
    },
  });
}

// ../../node_modules/remark-parse/index.js
var remark_parse_default = remarkParse;

// ../../node_modules/unist-builder/index.js
var u = function (type, props, value) {
  var node = { type: String(type) };
  return (
    value == null && (typeof props == "string" || Array.isArray(props))
      ? (value = props)
      : Object.assign(node, props),
    Array.isArray(value)
      ? (node.children = value)
      : value != null && (node.value = String(value)),
    node
  );
};

// ../../node_modules/mdast-util-to-hast/lib/traverse.js
var own5 = {}.hasOwnProperty;
function unknown(h2, node) {
  let data2 = node.data || {};
  return "value" in node &&
    !(
      own5.call(data2, "hName") ||
      own5.call(data2, "hProperties") ||
      own5.call(data2, "hChildren")
    )
    ? h2.augment(node, u("text", node.value))
    : h2(node, "div", all2(h2, node));
}
function one2(h2, node, parent) {
  let type = node && node.type,
    fn;
  if (!type) throw new Error("Expected node, got `" + node + "`");
  return (
    own5.call(h2.handlers, type)
      ? (fn = h2.handlers[type])
      : h2.passThrough && h2.passThrough.includes(type)
      ? (fn = returnNode)
      : (fn = h2.unknownHandler),
    (typeof fn == "function" ? fn : unknown)(h2, node, parent)
  );
}
function returnNode(h2, node) {
  return "children" in node ? { ...node, children: all2(h2, node) } : node;
}
function all2(h2, parent) {
  let values = [];
  if ("children" in parent) {
    let nodes2 = parent.children,
      index2 = -1;
    for (; ++index2 < nodes2.length; ) {
      let result = one2(h2, nodes2[index2], parent);
      if (result) {
        if (
          index2 &&
          nodes2[index2 - 1].type === "break" &&
          (!Array.isArray(result) &&
            result.type === "text" &&
            (result.value = result.value.replace(/^\s+/, "")),
          !Array.isArray(result) && result.type === "element")
        ) {
          let head = result.children[0];
          head &&
            head.type === "text" &&
            (head.value = head.value.replace(/^\s+/, ""));
        }
        Array.isArray(result) ? values.push(...result) : values.push(result);
      }
    }
  }
  return values;
}

// ../../node_modules/unist-util-is/index.js
var convert = function (test) {
  if (test == null) return ok;
  if (typeof test == "string") return typeFactory(test);
  if (typeof test == "object")
    return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
  if (typeof test == "function") return castFactory(test);
  throw new Error("Expected function, string, or object as test");
};
function anyFactory(tests) {
  let checks2 = [],
    index2 = -1;
  for (; ++index2 < tests.length; ) checks2[index2] = convert(tests[index2]);
  return castFactory(any);
  function any(...parameters) {
    let index3 = -1;
    for (; ++index3 < checks2.length; )
      if (checks2[index3].call(this, ...parameters)) return !0;
    return !1;
  }
}
function propsFactory(check) {
  return castFactory(all5);
  function all5(node) {
    let key;
    for (key in check) if (node[key] !== check[key]) return !1;
    return !0;
  }
}
function typeFactory(check) {
  return castFactory(type);
  function type(node) {
    return node && node.type === check;
  }
}
function castFactory(check) {
  return assertion;
  function assertion(...parameters) {
    return Boolean(check.call(this, ...parameters));
  }
}
function ok() {
  return !0;
}

// ../../node_modules/unist-util-visit/node_modules/unist-util-visit-parents/color.js
function color(d) {
  return "\x1B[33m" + d + "\x1B[39m";
}

// ../../node_modules/unist-util-visit/node_modules/unist-util-visit-parents/index.js
var CONTINUE = !0,
  SKIP = "skip",
  EXIT = !1,
  visitParents = function (tree, test, visitor, reverse) {
    typeof test == "function" &&
      typeof visitor != "function" &&
      ((reverse = visitor), (visitor = test), (test = null));
    let is = convert(test),
      step = reverse ? -1 : 1;
    factory2(tree, null, [])();
    function factory2(node, index2, parents) {
      let value = typeof node == "object" && node !== null ? node : {},
        name;
      return (
        typeof value.type == "string" &&
          ((name =
            typeof value.tagName == "string"
              ? value.tagName
              : typeof value.name == "string"
              ? value.name
              : void 0),
          Object.defineProperty(visit3, "name", {
            value:
              "node (" +
              color(value.type + (name ? "<" + name + ">" : "")) +
              ")",
          })),
        visit3
      );
      function visit3() {
        let result = [],
          subresult,
          offset,
          grandparents;
        if (
          (!test || is(node, index2, parents[parents.length - 1] || null)) &&
          ((result = toResult(visitor(node, parents))), result[0] === EXIT)
        )
          return result;
        if (node.children && result[0] !== SKIP)
          for (
            offset = (reverse ? node.children.length : -1) + step,
              grandparents = parents.concat(node);
            offset > -1 && offset < node.children.length;

          ) {
            if (
              ((subresult = factory2(
                node.children[offset],
                offset,
                grandparents
              )()),
              subresult[0] === EXIT)
            )
              return subresult;
            offset =
              typeof subresult[1] == "number" ? subresult[1] : offset + step;
          }
        return result;
      }
    }
  };
function toResult(value) {
  return Array.isArray(value)
    ? value
    : typeof value == "number"
    ? [CONTINUE, value]
    : [value];
}

// ../../node_modules/unist-util-visit/index.js
var visit = function (tree, test, visitor, reverse) {
  typeof test == "function" &&
    typeof visitor != "function" &&
    ((reverse = visitor), (visitor = test), (test = null)),
    visitParents(tree, test, overload, reverse);
  function overload(node, parents) {
    let parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};

// ../../node_modules/unist-util-position/index.js
var pointStart = point2("start"),
  pointEnd = point2("end");
function point2(type) {
  return point4;
  function point4(node) {
    var point5 = (node && node.position && node.position[type]) || {};
    return {
      line: point5.line || null,
      column: point5.column || null,
      offset: point5.offset > -1 ? point5.offset : null,
    };
  }
}

// ../../node_modules/unist-util-generated/index.js
function generated(node) {
  return (
    !node ||
    !node.position ||
    !node.position.start ||
    !node.position.start.line ||
    !node.position.start.column ||
    !node.position.end ||
    !node.position.end.line ||
    !node.position.end.column
  );
}

// ../../node_modules/unist-util-visit-parents/color.js
function color2(d) {
  return "\x1B[33m" + d + "\x1B[39m";
}

// ../../node_modules/unist-util-visit-parents/index.js
var CONTINUE2 = !0,
  SKIP2 = "skip",
  EXIT2 = !1,
  visitParents2 = function (tree, test, visitor, reverse) {
    typeof test == "function" &&
      typeof visitor != "function" &&
      ((reverse = visitor), (visitor = test), (test = null));
    var is = convert(test),
      step = reverse ? -1 : 1;
    factory2(tree, null, [])();
    function factory2(node, index2, parents) {
      var value = typeof node == "object" && node !== null ? node : {},
        name;
      return (
        typeof value.type == "string" &&
          ((name =
            typeof value.tagName == "string"
              ? value.tagName
              : typeof value.name == "string"
              ? value.name
              : void 0),
          Object.defineProperty(visit3, "name", {
            value:
              "node (" +
              color2(value.type + (name ? "<" + name + ">" : "")) +
              ")",
          })),
        visit3
      );
      function visit3() {
        var result = [],
          subresult,
          offset,
          grandparents;
        if (
          (!test || is(node, index2, parents[parents.length - 1] || null)) &&
          ((result = toResult2(visitor(node, parents))), result[0] === EXIT2)
        )
          return result;
        if (node.children && result[0] !== SKIP2)
          for (
            offset = (reverse ? node.children.length : -1) + step,
              grandparents = parents.concat(node);
            offset > -1 && offset < node.children.length;

          ) {
            if (
              ((subresult = factory2(
                node.children[offset],
                offset,
                grandparents
              )()),
              subresult[0] === EXIT2)
            )
              return subresult;
            offset =
              typeof subresult[1] == "number" ? subresult[1] : offset + step;
          }
        return result;
      }
    }
  };
function toResult2(value) {
  return Array.isArray(value)
    ? value
    : typeof value == "number"
    ? [CONTINUE2, value]
    : [value];
}

// ../../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js
var visit2 = function (tree, test, visitor, reverse) {
  typeof test == "function" &&
    typeof visitor != "function" &&
    ((reverse = visitor), (visitor = test), (test = null)),
    visitParents2(tree, test, overload, reverse);
  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};

// ../../node_modules/mdast-util-definitions/index.js
var own6 = {}.hasOwnProperty;
function definitions(node) {
  let cache = /* @__PURE__ */ Object.create(null);
  if (!node || !node.type)
    throw new Error("mdast-util-definitions expected node");
  return visit2(node, "definition", ondefinition), getDefinition;
  function ondefinition(definition2) {
    let id = clean(definition2.identifier);
    id && !own6.call(cache, id) && (cache[id] = definition2);
  }
  function getDefinition(identifier) {
    let id = clean(identifier);
    return id && own6.call(cache, id) ? cache[id] : null;
  }
}
function clean(value) {
  return String(value || "").toUpperCase();
}

// ../../node_modules/micromark-util-encode/index.js
var characterReferences = { '"': "quot", "&": "amp", "<": "lt", ">": "gt" };
function encode(value) {
  return value.replace(/["&<>]/g, replace2);
  function replace2(value2) {
    return "&" + characterReferences[value2] + ";";
  }
}

// ../../node_modules/micromark-util-sanitize-uri/index.js
function sanitizeUri(url, protocol) {
  let value = encode(normalizeUri(url || ""));
  if (!protocol) return value;
  let colon = value.indexOf(":"),
    questionMark = value.indexOf("?"),
    numberSign = value.indexOf("#"),
    slash = value.indexOf("/");
  return colon < 0 ||
    (slash > -1 && colon > slash) ||
    (questionMark > -1 && colon > questionMark) ||
    (numberSign > -1 && colon > numberSign) ||
    protocol.test(value.slice(0, colon))
    ? value
    : "";
}
function normalizeUri(value) {
  let result = [],
    index2 = -1,
    start = 0,
    skip = 0;
  for (; ++index2 < value.length; ) {
    let code3 = value.charCodeAt(index2),
      replace2 = "";
    if (
      code3 === 37 &&
      asciiAlphanumeric(value.charCodeAt(index2 + 1)) &&
      asciiAlphanumeric(value.charCodeAt(index2 + 2))
    )
      skip = 2;
    else if (code3 < 128)
      /[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code3)) ||
        (replace2 = String.fromCharCode(code3));
    else if (code3 > 55295 && code3 < 57344) {
      let next = value.charCodeAt(index2 + 1);
      code3 < 56320 && next > 56319 && next < 57344
        ? ((replace2 = String.fromCharCode(code3, next)), (skip = 1))
        : (replace2 = "\uFFFD");
    } else replace2 = String.fromCharCode(code3);
    replace2 &&
      (result.push(value.slice(start, index2), encodeURIComponent(replace2)),
      (start = index2 + skip + 1),
      (replace2 = "")),
      skip && ((index2 += skip), (skip = 0));
  }
  return result.join("") + value.slice(start);
}

// ../../node_modules/mdast-util-to-hast/lib/wrap.js
function wrap2(nodes2, loose) {
  let result = [],
    index2 = -1;
  for (
    loose &&
    result.push(
      u(
        "text",
        `
`
      )
    );
    ++index2 < nodes2.length;

  )
    index2 &&
      result.push(
        u(
          "text",
          `
`
        )
      ),
      result.push(nodes2[index2]);
  return (
    loose &&
      nodes2.length > 0 &&
      result.push(
        u(
          "text",
          `
`
        )
      ),
    result
  );
}

// ../../node_modules/mdast-util-to-hast/lib/footer.js
function footer(h2) {
  let index2 = -1,
    listItems = [];
  for (; ++index2 < h2.footnoteOrder.length; ) {
    let def = h2.footnoteById[h2.footnoteOrder[index2].toUpperCase()];
    if (!def) continue;
    let content3 = all2(h2, def),
      id = String(def.identifier),
      safeId = sanitizeUri(id.toLowerCase()),
      referenceIndex = 0,
      backReferences = [];
    for (; ++referenceIndex <= h2.footnoteCounts[id]; ) {
      let backReference = {
        type: "element",
        tagName: "a",
        properties: {
          href:
            "#" +
            h2.clobberPrefix +
            "fnref-" +
            safeId +
            (referenceIndex > 1 ? "-" + referenceIndex : ""),
          dataFootnoteBackref: !0,
          className: ["data-footnote-backref"],
          ariaLabel: h2.footnoteBackLabel,
        },
        children: [{ type: "text", value: "\u21A9" }],
      };
      referenceIndex > 1 &&
        backReference.children.push({
          type: "element",
          tagName: "sup",
          children: [{ type: "text", value: String(referenceIndex) }],
        }),
        backReferences.length > 0 &&
          backReferences.push({ type: "text", value: " " }),
        backReferences.push(backReference);
    }
    let tail = content3[content3.length - 1];
    if (tail && tail.type === "element" && tail.tagName === "p") {
      let tailTail = tail.children[tail.children.length - 1];
      tailTail && tailTail.type === "text"
        ? (tailTail.value += " ")
        : tail.children.push({ type: "text", value: " " }),
        tail.children.push(...backReferences);
    } else content3.push(...backReferences);
    let listItem3 = {
      type: "element",
      tagName: "li",
      properties: { id: h2.clobberPrefix + "fn-" + safeId },
      children: wrap2(content3, !0),
    };
    def.position && (listItem3.position = def.position),
      listItems.push(listItem3);
  }
  return listItems.length === 0
    ? null
    : {
        type: "element",
        tagName: "section",
        properties: { dataFootnotes: !0, className: ["footnotes"] },
        children: [
          {
            type: "element",
            tagName: "h2",
            properties: { id: "footnote-label", className: ["sr-only"] },
            children: [u("text", h2.footnoteLabel)],
          },
          {
            type: "text",
            value: `
`,
          },
          {
            type: "element",
            tagName: "ol",
            properties: {},
            children: wrap2(listItems, !0),
          },
          {
            type: "text",
            value: `
`,
          },
        ],
      };
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js
function blockquote(h2, node) {
  return h2(node, "blockquote", wrap2(all2(h2, node), !0));
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/break.js
function hardBreak(h2, node) {
  return [
    h2(node, "br"),
    u(
      "text",
      `
`
    ),
  ];
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/code.js
function code(h2, node) {
  let value = node.value
      ? node.value +
        `
`
      : "",
    lang = node.lang && node.lang.match(/^[^ \t]+(?=[ \t]|$)/),
    props = {};
  lang && (props.className = ["language-" + lang]);
  let code3 = h2(node, "code", props, [u("text", value)]);
  return (
    node.meta && (code3.data = { meta: node.meta }),
    h2(node.position, "pre", [code3])
  );
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/delete.js
function strikethrough(h2, node) {
  return h2(node, "del", all2(h2, node));
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js
function emphasis(h2, node) {
  return h2(node, "em", all2(h2, node));
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js
function footnoteReference(h2, node) {
  let id = String(node.identifier),
    safeId = sanitizeUri(id.toLowerCase()),
    index2 = h2.footnoteOrder.indexOf(id),
    counter;
  index2 === -1
    ? (h2.footnoteOrder.push(id),
      (h2.footnoteCounts[id] = 1),
      (counter = h2.footnoteOrder.length))
    : (h2.footnoteCounts[id]++, (counter = index2 + 1));
  let reuseCounter = h2.footnoteCounts[id];
  return h2(node, "sup", [
    h2(
      node.position,
      "a",
      {
        href: "#" + h2.clobberPrefix + "fn-" + safeId,
        id:
          h2.clobberPrefix +
          "fnref-" +
          safeId +
          (reuseCounter > 1 ? "-" + reuseCounter : ""),
        dataFootnoteRef: !0,
        ariaDescribedBy: "footnote-label",
      },
      [u("text", String(counter))]
    ),
  ]);
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/footnote.js
function footnote(h2, node) {
  let footnoteById = h2.footnoteById,
    no = 1;
  for (; no in footnoteById; ) no++;
  let identifier = String(no);
  return (
    (footnoteById[identifier] = {
      type: "footnoteDefinition",
      identifier,
      children: [{ type: "paragraph", children: node.children }],
      position: node.position,
    }),
    footnoteReference(h2, {
      type: "footnoteReference",
      identifier,
      position: node.position,
    })
  );
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/heading.js
function heading(h2, node) {
  return h2(node, "h" + node.depth, all2(h2, node));
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/html.js
function html(h2, node) {
  return h2.dangerous ? h2.augment(node, u("raw", node.value)) : null;
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
var import_encode = __toESM(require("mdurl/encode.js"), 1);

// ../../node_modules/mdast-util-to-hast/lib/revert.js
function revert(h2, node) {
  let subtype = node.referenceType,
    suffix = "]";
  if (
    (subtype === "collapsed"
      ? (suffix += "[]")
      : subtype === "full" &&
        (suffix += "[" + (node.label || node.identifier) + "]"),
    node.type === "imageReference")
  )
    return u("text", "![" + node.alt + suffix);
  let contents = all2(h2, node),
    head = contents[0];
  head && head.type === "text"
    ? (head.value = "[" + head.value)
    : contents.unshift(u("text", "["));
  let tail = contents[contents.length - 1];
  return (
    tail && tail.type === "text"
      ? (tail.value += suffix)
      : contents.push(u("text", suffix)),
    contents
  );
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
function imageReference(h2, node) {
  let def = h2.definition(node.identifier);
  if (!def) return revert(h2, node);
  let props = { src: (0, import_encode.default)(def.url || ""), alt: node.alt };
  return (
    def.title !== null && def.title !== void 0 && (props.title = def.title),
    h2(node, "img", props)
  );
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/image.js
var import_encode2 = __toESM(require("mdurl/encode.js"), 1);
function image(h2, node) {
  let props = { src: (0, import_encode2.default)(node.url), alt: node.alt };
  return (
    node.title !== null && node.title !== void 0 && (props.title = node.title),
    h2(node, "img", props)
  );
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js
function inlineCode(h2, node) {
  return h2(node, "code", [u("text", node.value.replace(/\r?\n|\r/g, " "))]);
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js
var import_encode3 = __toESM(require("mdurl/encode.js"), 1);
function linkReference(h2, node) {
  let def = h2.definition(node.identifier);
  if (!def) return revert(h2, node);
  let props = { href: (0, import_encode3.default)(def.url || "") };
  return (
    def.title !== null && def.title !== void 0 && (props.title = def.title),
    h2(node, "a", props, all2(h2, node))
  );
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/link.js
var import_encode4 = __toESM(require("mdurl/encode.js"), 1);
function link(h2, node) {
  let props = { href: (0, import_encode4.default)(node.url) };
  return (
    node.title !== null && node.title !== void 0 && (props.title = node.title),
    h2(node, "a", props, all2(h2, node))
  );
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js
function listItem(h2, node, parent) {
  let result = all2(h2, node),
    loose = parent ? listLoose(parent) : listItemLoose(node),
    props = {},
    wrapped = [];
  if (typeof node.checked == "boolean") {
    let paragraph2;
    result[0] && result[0].type === "element" && result[0].tagName === "p"
      ? (paragraph2 = result[0])
      : ((paragraph2 = h2(null, "p", [])), result.unshift(paragraph2)),
      paragraph2.children.length > 0 &&
        paragraph2.children.unshift(u("text", " ")),
      paragraph2.children.unshift(
        h2(null, "input", {
          type: "checkbox",
          checked: node.checked,
          disabled: !0,
        })
      ),
      (props.className = ["task-list-item"]);
  }
  let index2 = -1;
  for (; ++index2 < result.length; ) {
    let child = result[index2];
    (loose ||
      index2 !== 0 ||
      child.type !== "element" ||
      child.tagName !== "p") &&
      wrapped.push(
        u(
          "text",
          `
`
        )
      ),
      child.type === "element" && child.tagName === "p" && !loose
        ? wrapped.push(...child.children)
        : wrapped.push(child);
  }
  let tail = result[result.length - 1];
  return (
    tail &&
      (loose || !("tagName" in tail) || tail.tagName !== "p") &&
      wrapped.push(
        u(
          "text",
          `
`
        )
      ),
    h2(node, "li", props, wrapped)
  );
}
function listLoose(node) {
  let loose = node.spread,
    children = node.children,
    index2 = -1;
  for (; !loose && ++index2 < children.length; )
    loose = listItemLoose(children[index2]);
  return Boolean(loose);
}
function listItemLoose(node) {
  let spread = node.spread;
  return spread ?? node.children.length > 1;
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/list.js
function list2(h2, node) {
  let props = {},
    name = node.ordered ? "ol" : "ul",
    items = all2(h2, node),
    index2 = -1;
  for (
    typeof node.start == "number" &&
    node.start !== 1 &&
    (props.start = node.start);
    ++index2 < items.length;

  ) {
    let item = items[index2];
    if (
      item.type === "element" &&
      item.tagName === "li" &&
      item.properties &&
      Array.isArray(item.properties.className) &&
      item.properties.className.includes("task-list-item")
    ) {
      props.className = ["contains-task-list"];
      break;
    }
  }
  return h2(node, name, props, wrap2(items, !0));
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js
function paragraph(h2, node) {
  return h2(node, "p", all2(h2, node));
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/root.js
function root(h2, node) {
  return h2.augment(node, u("root", wrap2(all2(h2, node))));
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/strong.js
function strong(h2, node) {
  return h2(node, "strong", all2(h2, node));
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/table.js
function table(h2, node) {
  let rows = node.children,
    index2 = -1,
    align = node.align || [],
    result = [];
  for (; ++index2 < rows.length; ) {
    let row2 = rows[index2].children,
      name = index2 === 0 ? "th" : "td",
      out = [],
      cellIndex = -1,
      length = node.align ? align.length : row2.length;
    for (; ++cellIndex < length; ) {
      let cell2 = row2[cellIndex];
      out.push(
        h2(
          cell2,
          name,
          { align: align[cellIndex] },
          cell2 ? all2(h2, cell2) : []
        )
      );
    }
    result[index2] = h2(rows[index2], "tr", wrap2(out, !0));
  }
  return h2(
    node,
    "table",
    wrap2(
      [h2(result[0].position, "thead", wrap2([result[0]], !0))].concat(
        result[1]
          ? h2(
              {
                start: pointStart(result[1]),
                end: pointEnd(result[result.length - 1]),
              },
              "tbody",
              wrap2(result.slice(1), !0)
            )
          : []
      ),
      !0
    )
  );
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/text.js
function text3(h2, node) {
  return h2.augment(
    node,
    u("text", String(node.value).replace(/[ \t]*(\r?\n|\r)[ \t]*/g, "$1"))
  );
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js
function thematicBreak2(h2, node) {
  return h2(node, "hr");
}

// ../../node_modules/mdast-util-to-hast/lib/handlers/index.js
var handlers = {
  blockquote,
  break: hardBreak,
  code,
  delete: strikethrough,
  emphasis,
  footnoteReference,
  footnote,
  heading,
  html,
  imageReference,
  image,
  inlineCode,
  linkReference,
  link,
  listItem,
  list: list2,
  paragraph,
  root,
  strong,
  table,
  text: text3,
  thematicBreak: thematicBreak2,
  toml: ignore,
  yaml: ignore,
  definition: ignore,
  footnoteDefinition: ignore,
};
function ignore() {
  return null;
}

// ../../node_modules/mdast-util-to-hast/lib/index.js
var own7 = {}.hasOwnProperty;
function factory(tree, options) {
  let settings = options || {},
    dangerous = settings.allowDangerousHtml || !1,
    footnoteById = {};
  return (
    (h2.dangerous = dangerous),
    (h2.clobberPrefix =
      settings.clobberPrefix === void 0 || settings.clobberPrefix === null
        ? "user-content-"
        : settings.clobberPrefix),
    (h2.footnoteLabel = settings.footnoteLabel || "Footnotes"),
    (h2.footnoteBackLabel = settings.footnoteBackLabel || "Back to content"),
    (h2.definition = definitions(tree)),
    (h2.footnoteById = footnoteById),
    (h2.footnoteOrder = []),
    (h2.footnoteCounts = {}),
    (h2.augment = augment),
    (h2.handlers = { ...handlers, ...settings.handlers }),
    (h2.unknownHandler = settings.unknownHandler),
    (h2.passThrough = settings.passThrough),
    visit(tree, "footnoteDefinition", (definition2) => {
      let id = String(definition2.identifier).toUpperCase();
      own7.call(footnoteById, id) || (footnoteById[id] = definition2);
    }),
    h2
  );
  function augment(left, right) {
    if (left && "data" in left && left.data) {
      let data2 = left.data;
      data2.hName &&
        (right.type !== "element" &&
          (right = {
            type: "element",
            tagName: "",
            properties: {},
            children: [],
          }),
        (right.tagName = data2.hName)),
        right.type === "element" &&
          data2.hProperties &&
          (right.properties = { ...right.properties, ...data2.hProperties }),
        "children" in right &&
          right.children &&
          data2.hChildren &&
          (right.children = data2.hChildren);
    }
    if (left) {
      let ctx = "type" in left ? left : { position: left };
      generated(ctx) ||
        (right.position = { start: pointStart(ctx), end: pointEnd(ctx) });
    }
    return right;
  }
  function h2(node, tagName, props, children) {
    return (
      Array.isArray(props) && ((children = props), (props = {})),
      augment(node, {
        type: "element",
        tagName,
        properties: props || {},
        children: children || [],
      })
    );
  }
}
function toHast(tree, options) {
  let h2 = factory(tree, options),
    node = one2(h2, tree, null),
    foot = footer(h2);
  return (
    foot &&
      node.children.push(
        u(
          "text",
          `
`
        ),
        foot
      ),
    Array.isArray(node) ? { type: "root", children: node } : node
  );
}

// ../../node_modules/remark-rehype/lib/index.js
var remarkRehype = function (destination, options) {
    return destination && "run" in destination
      ? bridge(destination, options)
      : mutate(destination || options);
  },
  lib_default = remarkRehype;
function bridge(destination, options) {
  return (node, file, next) => {
    destination.run(toHast(node, options), file, (error2) => {
      next(error2);
    });
  };
}
function mutate(options) {
  return (node) => toHast(node, options);
}

// ../../node_modules/react-markdown/lib/react-markdown.js
var import_prop_types = __toESM(require("prop-types"), 1);

// ../../node_modules/property-information/lib/util/schema.js
var Schema = class {
  constructor(property, normal, space) {
    (this.property = property),
      (this.normal = normal),
      space && (this.space = space);
  }
};
Schema.prototype.property = {};
Schema.prototype.normal = {};
Schema.prototype.space = null;

// ../../node_modules/property-information/lib/util/merge.js
function merge2(definitions2, space) {
  let property = {},
    normal = {},
    index2 = -1;
  for (; ++index2 < definitions2.length; )
    Object.assign(property, definitions2[index2].property),
      Object.assign(normal, definitions2[index2].normal);
  return new Schema(property, normal, space);
}

// ../../node_modules/property-information/lib/normalize.js
function normalize5(value) {
  return value.toLowerCase();
}

// ../../node_modules/property-information/lib/util/info.js
var Info = class {
  constructor(property, attribute) {
    (this.property = property), (this.attribute = attribute);
  }
};
Info.prototype.space = null;
Info.prototype.boolean = !1;
Info.prototype.booleanish = !1;
Info.prototype.overloadedBoolean = !1;
Info.prototype.number = !1;
Info.prototype.commaSeparated = !1;
Info.prototype.spaceSeparated = !1;
Info.prototype.commaOrSpaceSeparated = !1;
Info.prototype.mustUseProperty = !1;
Info.prototype.defined = !1;

// ../../node_modules/property-information/lib/util/types.js
var types_exports = {};
__export(types_exports, {
  boolean: () => boolean,
  booleanish: () => booleanish,
  commaOrSpaceSeparated: () => commaOrSpaceSeparated,
  commaSeparated: () => commaSeparated,
  number: () => number,
  overloadedBoolean: () => overloadedBoolean,
  spaceSeparated: () => spaceSeparated,
});
var powers = 0,
  boolean = increment(),
  booleanish = increment(),
  overloadedBoolean = increment(),
  number = increment(),
  spaceSeparated = increment(),
  commaSeparated = increment(),
  commaOrSpaceSeparated = increment();
function increment() {
  return 2 ** ++powers;
}

// ../../node_modules/property-information/lib/util/defined-info.js
var checks = Object.keys(types_exports),
  DefinedInfo = class extends Info {
    constructor(property, attribute, mask, space) {
      let index2 = -1;
      if (
        (super(property, attribute),
        mark(this, "space", space),
        typeof mask == "number")
      )
        for (; ++index2 < checks.length; ) {
          let check = checks[index2];
          mark(
            this,
            checks[index2],
            (mask & types_exports[check]) === types_exports[check]
          );
        }
    }
  };
DefinedInfo.prototype.defined = !0;
function mark(values, key, value) {
  value && (values[key] = value);
}

// ../../node_modules/property-information/lib/util/create.js
var own8 = {}.hasOwnProperty;
function create(definition2) {
  let property = {},
    normal = {},
    prop;
  for (prop in definition2.properties)
    if (own8.call(definition2.properties, prop)) {
      let value = definition2.properties[prop],
        info2 = new DefinedInfo(
          prop,
          definition2.transform(definition2.attributes || {}, prop),
          value,
          definition2.space
        );
      definition2.mustUseProperty &&
        definition2.mustUseProperty.includes(prop) &&
        (info2.mustUseProperty = !0),
        (property[prop] = info2),
        (normal[normalize5(prop)] = prop),
        (normal[normalize5(info2.attribute)] = prop);
    }
  return new Schema(property, normal, definition2.space);
}

// ../../node_modules/property-information/lib/xlink.js
var xlink = create({
  space: "xlink",
  transform(_, prop) {
    return "xlink:" + prop.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null,
  },
});

// ../../node_modules/property-information/lib/xml.js
var xml = create({
  space: "xml",
  transform(_, prop) {
    return "xml:" + prop.slice(3).toLowerCase();
  },
  properties: { xmlLang: null, xmlBase: null, xmlSpace: null },
});

// ../../node_modules/property-information/lib/util/case-sensitive-transform.js
function caseSensitiveTransform(attributes2, attribute) {
  return attribute in attributes2 ? attributes2[attribute] : attribute;
}

// ../../node_modules/property-information/lib/util/case-insensitive-transform.js
function caseInsensitiveTransform(attributes2, property) {
  return caseSensitiveTransform(attributes2, property.toLowerCase());
}

// ../../node_modules/property-information/lib/xmlns.js
var xmlns = create({
  space: "xmlns",
  attributes: { xmlnsxlink: "xmlns:xlink" },
  transform: caseInsensitiveTransform,
  properties: { xmlns: null, xmlnsXLink: null },
});

// ../../node_modules/property-information/lib/aria.js
var aria = create({
  transform(_, prop) {
    return prop === "role" ? prop : "aria-" + prop.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: booleanish,
    ariaAutoComplete: null,
    ariaBusy: booleanish,
    ariaChecked: booleanish,
    ariaColCount: number,
    ariaColIndex: number,
    ariaColSpan: number,
    ariaControls: spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: spaceSeparated,
    ariaDetails: null,
    ariaDisabled: booleanish,
    ariaDropEffect: spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: booleanish,
    ariaFlowTo: spaceSeparated,
    ariaGrabbed: booleanish,
    ariaHasPopup: null,
    ariaHidden: booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: spaceSeparated,
    ariaLevel: number,
    ariaLive: null,
    ariaModal: booleanish,
    ariaMultiLine: booleanish,
    ariaMultiSelectable: booleanish,
    ariaOrientation: null,
    ariaOwns: spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: number,
    ariaPressed: booleanish,
    ariaReadOnly: booleanish,
    ariaRelevant: null,
    ariaRequired: booleanish,
    ariaRoleDescription: spaceSeparated,
    ariaRowCount: number,
    ariaRowIndex: number,
    ariaRowSpan: number,
    ariaSelected: booleanish,
    ariaSetSize: number,
    ariaSort: null,
    ariaValueMax: number,
    ariaValueMin: number,
    ariaValueNow: number,
    ariaValueText: null,
    role: null,
  },
});

// ../../node_modules/property-information/lib/html.js
var html2 = create({
  space: "html",
  attributes: {
    acceptcharset: "accept-charset",
    classname: "class",
    htmlfor: "for",
    httpequiv: "http-equiv",
  },
  transform: caseInsensitiveTransform,
  mustUseProperty: ["checked", "multiple", "muted", "selected"],
  properties: {
    abbr: null,
    accept: commaSeparated,
    acceptCharset: spaceSeparated,
    accessKey: spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: boolean,
    allowPaymentRequest: boolean,
    allowUserMedia: boolean,
    alt: null,
    as: null,
    async: boolean,
    autoCapitalize: null,
    autoComplete: spaceSeparated,
    autoFocus: boolean,
    autoPlay: boolean,
    capture: boolean,
    charSet: null,
    checked: boolean,
    cite: null,
    className: spaceSeparated,
    cols: number,
    colSpan: null,
    content: null,
    contentEditable: booleanish,
    controls: boolean,
    controlsList: spaceSeparated,
    coords: number | commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: boolean,
    defer: boolean,
    dir: null,
    dirName: null,
    disabled: boolean,
    download: overloadedBoolean,
    draggable: booleanish,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: boolean,
    formTarget: null,
    headers: spaceSeparated,
    height: number,
    hidden: boolean,
    high: number,
    href: null,
    hrefLang: null,
    htmlFor: spaceSeparated,
    httpEquiv: spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: boolean,
    itemId: null,
    itemProp: spaceSeparated,
    itemRef: spaceSeparated,
    itemScope: boolean,
    itemType: spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: boolean,
    low: number,
    manifest: null,
    max: null,
    maxLength: number,
    media: null,
    method: null,
    min: null,
    minLength: number,
    multiple: boolean,
    muted: boolean,
    name: null,
    nonce: null,
    noModule: boolean,
    noValidate: boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: boolean,
    optimum: number,
    pattern: null,
    ping: spaceSeparated,
    placeholder: null,
    playsInline: boolean,
    poster: null,
    preload: null,
    readOnly: boolean,
    referrerPolicy: null,
    rel: spaceSeparated,
    required: boolean,
    reversed: boolean,
    rows: number,
    rowSpan: number,
    sandbox: spaceSeparated,
    scope: null,
    scoped: boolean,
    seamless: boolean,
    selected: boolean,
    shape: null,
    size: number,
    sizes: null,
    slot: null,
    span: number,
    spellCheck: booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: number,
    step: null,
    style: null,
    tabIndex: number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: boolean,
    useMap: null,
    value: booleanish,
    width: number,
    wrap: null,
    align: null,
    aLink: null,
    archive: spaceSeparated,
    axis: null,
    background: null,
    bgColor: null,
    border: number,
    borderColor: null,
    bottomMargin: number,
    cellPadding: null,
    cellSpacing: null,
    char: null,
    charOff: null,
    classId: null,
    clear: null,
    code: null,
    codeBase: null,
    codeType: null,
    color: null,
    compact: boolean,
    declare: boolean,
    event: null,
    face: null,
    frame: null,
    frameBorder: null,
    hSpace: number,
    leftMargin: number,
    link: null,
    longDesc: null,
    lowSrc: null,
    marginHeight: number,
    marginWidth: number,
    noResize: boolean,
    noHref: boolean,
    noShade: boolean,
    noWrap: boolean,
    object: null,
    profile: null,
    prompt: null,
    rev: null,
    rightMargin: number,
    rules: null,
    scheme: null,
    scrolling: booleanish,
    standby: null,
    summary: null,
    text: null,
    topMargin: number,
    valueType: null,
    version: null,
    vAlign: null,
    vLink: null,
    vSpace: number,
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: boolean,
    disableRemotePlayback: boolean,
    prefix: null,
    property: null,
    results: number,
    security: null,
    unselectable: null,
  },
});

// ../../node_modules/property-information/lib/svg.js
var svg = create({
  space: "svg",
  attributes: {
    accentHeight: "accent-height",
    alignmentBaseline: "alignment-baseline",
    arabicForm: "arabic-form",
    baselineShift: "baseline-shift",
    capHeight: "cap-height",
    className: "class",
    clipPath: "clip-path",
    clipRule: "clip-rule",
    colorInterpolation: "color-interpolation",
    colorInterpolationFilters: "color-interpolation-filters",
    colorProfile: "color-profile",
    colorRendering: "color-rendering",
    crossOrigin: "crossorigin",
    dataType: "datatype",
    dominantBaseline: "dominant-baseline",
    enableBackground: "enable-background",
    fillOpacity: "fill-opacity",
    fillRule: "fill-rule",
    floodColor: "flood-color",
    floodOpacity: "flood-opacity",
    fontFamily: "font-family",
    fontSize: "font-size",
    fontSizeAdjust: "font-size-adjust",
    fontStretch: "font-stretch",
    fontStyle: "font-style",
    fontVariant: "font-variant",
    fontWeight: "font-weight",
    glyphName: "glyph-name",
    glyphOrientationHorizontal: "glyph-orientation-horizontal",
    glyphOrientationVertical: "glyph-orientation-vertical",
    hrefLang: "hreflang",
    horizAdvX: "horiz-adv-x",
    horizOriginX: "horiz-origin-x",
    horizOriginY: "horiz-origin-y",
    imageRendering: "image-rendering",
    letterSpacing: "letter-spacing",
    lightingColor: "lighting-color",
    markerEnd: "marker-end",
    markerMid: "marker-mid",
    markerStart: "marker-start",
    navDown: "nav-down",
    navDownLeft: "nav-down-left",
    navDownRight: "nav-down-right",
    navLeft: "nav-left",
    navNext: "nav-next",
    navPrev: "nav-prev",
    navRight: "nav-right",
    navUp: "nav-up",
    navUpLeft: "nav-up-left",
    navUpRight: "nav-up-right",
    onAbort: "onabort",
    onActivate: "onactivate",
    onAfterPrint: "onafterprint",
    onBeforePrint: "onbeforeprint",
    onBegin: "onbegin",
    onCancel: "oncancel",
    onCanPlay: "oncanplay",
    onCanPlayThrough: "oncanplaythrough",
    onChange: "onchange",
    onClick: "onclick",
    onClose: "onclose",
    onCopy: "oncopy",
    onCueChange: "oncuechange",
    onCut: "oncut",
    onDblClick: "ondblclick",
    onDrag: "ondrag",
    onDragEnd: "ondragend",
    onDragEnter: "ondragenter",
    onDragExit: "ondragexit",
    onDragLeave: "ondragleave",
    onDragOver: "ondragover",
    onDragStart: "ondragstart",
    onDrop: "ondrop",
    onDurationChange: "ondurationchange",
    onEmptied: "onemptied",
    onEnd: "onend",
    onEnded: "onended",
    onError: "onerror",
    onFocus: "onfocus",
    onFocusIn: "onfocusin",
    onFocusOut: "onfocusout",
    onHashChange: "onhashchange",
    onInput: "oninput",
    onInvalid: "oninvalid",
    onKeyDown: "onkeydown",
    onKeyPress: "onkeypress",
    onKeyUp: "onkeyup",
    onLoad: "onload",
    onLoadedData: "onloadeddata",
    onLoadedMetadata: "onloadedmetadata",
    onLoadStart: "onloadstart",
    onMessage: "onmessage",
    onMouseDown: "onmousedown",
    onMouseEnter: "onmouseenter",
    onMouseLeave: "onmouseleave",
    onMouseMove: "onmousemove",
    onMouseOut: "onmouseout",
    onMouseOver: "onmouseover",
    onMouseUp: "onmouseup",
    onMouseWheel: "onmousewheel",
    onOffline: "onoffline",
    onOnline: "ononline",
    onPageHide: "onpagehide",
    onPageShow: "onpageshow",
    onPaste: "onpaste",
    onPause: "onpause",
    onPlay: "onplay",
    onPlaying: "onplaying",
    onPopState: "onpopstate",
    onProgress: "onprogress",
    onRateChange: "onratechange",
    onRepeat: "onrepeat",
    onReset: "onreset",
    onResize: "onresize",
    onScroll: "onscroll",
    onSeeked: "onseeked",
    onSeeking: "onseeking",
    onSelect: "onselect",
    onShow: "onshow",
    onStalled: "onstalled",
    onStorage: "onstorage",
    onSubmit: "onsubmit",
    onSuspend: "onsuspend",
    onTimeUpdate: "ontimeupdate",
    onToggle: "ontoggle",
    onUnload: "onunload",
    onVolumeChange: "onvolumechange",
    onWaiting: "onwaiting",
    onZoom: "onzoom",
    overlinePosition: "overline-position",
    overlineThickness: "overline-thickness",
    paintOrder: "paint-order",
    panose1: "panose-1",
    pointerEvents: "pointer-events",
    referrerPolicy: "referrerpolicy",
    renderingIntent: "rendering-intent",
    shapeRendering: "shape-rendering",
    stopColor: "stop-color",
    stopOpacity: "stop-opacity",
    strikethroughPosition: "strikethrough-position",
    strikethroughThickness: "strikethrough-thickness",
    strokeDashArray: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeLineCap: "stroke-linecap",
    strokeLineJoin: "stroke-linejoin",
    strokeMiterLimit: "stroke-miterlimit",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    tabIndex: "tabindex",
    textAnchor: "text-anchor",
    textDecoration: "text-decoration",
    textRendering: "text-rendering",
    typeOf: "typeof",
    underlinePosition: "underline-position",
    underlineThickness: "underline-thickness",
    unicodeBidi: "unicode-bidi",
    unicodeRange: "unicode-range",
    unitsPerEm: "units-per-em",
    vAlphabetic: "v-alphabetic",
    vHanging: "v-hanging",
    vIdeographic: "v-ideographic",
    vMathematical: "v-mathematical",
    vectorEffect: "vector-effect",
    vertAdvY: "vert-adv-y",
    vertOriginX: "vert-origin-x",
    vertOriginY: "vert-origin-y",
    wordSpacing: "word-spacing",
    writingMode: "writing-mode",
    xHeight: "x-height",
    playbackOrder: "playbackorder",
    timelineBegin: "timelinebegin",
  },
  transform: caseSensitiveTransform,
  properties: {
    about: commaOrSpaceSeparated,
    accentHeight: number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: number,
    amplitude: number,
    arabicForm: null,
    ascent: number,
    attributeName: null,
    attributeType: null,
    azimuth: number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: number,
    by: null,
    calcMode: null,
    capHeight: number,
    className: spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: number,
    diffuseConstant: number,
    direction: null,
    display: null,
    dur: null,
    divisor: number,
    dominantBaseline: null,
    download: boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: commaSeparated,
    g2: commaSeparated,
    glyphName: commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: number,
    horizOriginX: number,
    horizOriginY: number,
    id: null,
    ideographic: number,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: number,
    k: number,
    k1: number,
    k2: number,
    k3: number,
    k4: number,
    kernelMatrix: commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    keySplines: null,
    keyTimes: null,
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: number,
    overlineThickness: number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: number,
    pointsAtY: number,
    pointsAtZ: number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: commaOrSpaceSeparated,
    rev: commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: commaOrSpaceSeparated,
    requiredFeatures: commaOrSpaceSeparated,
    requiredFonts: commaOrSpaceSeparated,
    requiredFormats: commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: number,
    specularExponent: number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: number,
    strikethroughThickness: number,
    string: null,
    stroke: null,
    strokeDashArray: commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: number,
    strokeOpacity: number,
    strokeWidth: null,
    style: null,
    surfaceScale: number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: commaOrSpaceSeparated,
    tabIndex: number,
    tableValues: null,
    target: null,
    targetX: number,
    targetY: number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: commaOrSpaceSeparated,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: number,
    underlineThickness: number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: number,
    values: null,
    vAlphabetic: number,
    vMathematical: number,
    vectorEffect: null,
    vHanging: number,
    vIdeographic: number,
    version: null,
    vertAdvY: number,
    vertOriginX: number,
    vertOriginY: number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null,
  },
});

// ../../node_modules/property-information/lib/find.js
var valid = /^data[-\w.:]+$/i,
  dash = /-[a-z]/g,
  cap = /[A-Z]/g;
function find(schema, value) {
  let normal = normalize5(value),
    prop = value,
    Type = Info;
  if (normal in schema.normal) return schema.property[schema.normal[normal]];
  if (normal.length > 4 && normal.slice(0, 4) === "data" && valid.test(value)) {
    if (value.charAt(4) === "-") {
      let rest = value.slice(5).replace(dash, camelcase);
      prop = "data" + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      let rest = value.slice(4);
      if (!dash.test(rest)) {
        let dashes = rest.replace(cap, kebab);
        dashes.charAt(0) !== "-" && (dashes = "-" + dashes),
          (value = "data" + dashes);
      }
    }
    Type = DefinedInfo;
  }
  return new Type(prop, value);
}
function kebab($0) {
  return "-" + $0.toLowerCase();
}
function camelcase($0) {
  return $0.charAt(1).toUpperCase();
}

// ../../node_modules/property-information/lib/hast-to-react.js
var hastToReact = {
  classId: "classID",
  dataType: "datatype",
  itemId: "itemID",
  strokeDashArray: "strokeDasharray",
  strokeDashOffset: "strokeDashoffset",
  strokeLineCap: "strokeLinecap",
  strokeLineJoin: "strokeLinejoin",
  strokeMiterLimit: "strokeMiterlimit",
  typeOf: "typeof",
  xLinkActuate: "xlinkActuate",
  xLinkArcRole: "xlinkArcrole",
  xLinkHref: "xlinkHref",
  xLinkRole: "xlinkRole",
  xLinkShow: "xlinkShow",
  xLinkTitle: "xlinkTitle",
  xLinkType: "xlinkType",
  xmlnsXLink: "xmlnsXlink",
};

// ../../node_modules/property-information/index.js
var html3 = merge2([xml, xlink, xmlns, aria, html2], "html"),
  svg2 = merge2([xml, xlink, xmlns, aria, svg], "svg");

// ../../node_modules/react-markdown/lib/rehype-filter.js
function rehypeFilter(options) {
  if (options.allowedElements && options.disallowedElements)
    throw new TypeError(
      "Only one of `allowedElements` and `disallowedElements` should be defined"
    );
  if (
    options.allowedElements ||
    options.disallowedElements ||
    options.allowElement
  )
    return (tree) => {
      visit(tree, "element", (node, index2, parent_) => {
        let parent = parent_,
          remove;
        if (
          (options.allowedElements
            ? (remove = !options.allowedElements.includes(node.tagName))
            : options.disallowedElements &&
              (remove = options.disallowedElements.includes(node.tagName)),
          !remove &&
            options.allowElement &&
            typeof index2 == "number" &&
            (remove = !options.allowElement(node, index2, parent)),
          remove && typeof index2 == "number")
        )
          return (
            options.unwrapDisallowed && node.children
              ? parent.children.splice(index2, 1, ...node.children)
              : parent.children.splice(index2, 1),
            index2
          );
      });
    };
}

// ../../node_modules/react-markdown/lib/ast-to-react.js
var import_react10 = __toESM(require("react"), 1),
  import_react_is = __toESM(require("react-is"), 1);

// ../../node_modules/hast-util-whitespace/index.js
function whitespace(thing) {
  var value =
    thing && typeof thing == "object" && thing.type === "text"
      ? thing.value || ""
      : thing;
  return typeof value == "string" && value.replace(/[ \t\n\f\r]/g, "") === "";
}

// ../../node_modules/space-separated-tokens/index.js
function parse2(value) {
  let input = String(value || "").trim();
  return input ? input.split(/[ \t\n\r\f]+/g) : [];
}
function stringify(values) {
  return values.join(" ").trim();
}

// ../../node_modules/comma-separated-tokens/index.js
function parse3(value) {
  for (
    var tokens = [],
      input = String(value || ""),
      index2 = input.indexOf(","),
      start = 0,
      end,
      token;
    !end;

  )
    index2 === -1 && ((index2 = input.length), (end = !0)),
      (token = input.slice(start, index2).trim()),
      (token || !end) && tokens.push(token),
      (start = index2 + 1),
      (index2 = input.indexOf(",", start));
  return tokens;
}
function stringify2(values, options) {
  var settings = options || {};
  return (
    values[values.length - 1] === "" && (values = values.concat("")),
    values
      .join(
        (settings.padRight ? " " : "") +
          "," +
          (settings.padLeft === !1 ? "" : " ")
      )
      .trim()
  );
}

// ../../node_modules/react-markdown/lib/ast-to-react.js
var import_style_to_object = __toESM(require("style-to-object"), 1),
  own9 = {}.hasOwnProperty,
  tableElements = /* @__PURE__ */ new Set([
    "table",
    "thead",
    "tbody",
    "tfoot",
    "tr",
  ]);
function childrenToReact(context, node) {
  let children = [],
    childIndex = -1,
    child;
  for (; ++childIndex < node.children.length; )
    (child = node.children[childIndex]),
      child.type === "element"
        ? children.push(toReact(context, child, childIndex, node))
        : child.type === "text"
        ? (node.type !== "element" ||
            !tableElements.has(node.tagName) ||
            !whitespace(child)) &&
          children.push(child.value)
        : child.type === "raw" &&
          !context.options.skipHtml &&
          children.push(child.value);
  return children;
}
function toReact(context, node, index2, parent) {
  let options = context.options,
    parentSchema = context.schema,
    name = node.tagName,
    properties = {},
    schema = parentSchema,
    property;
  if (
    (parentSchema.space === "html" &&
      name === "svg" &&
      ((schema = svg2), (context.schema = schema)),
    node.properties)
  )
    for (property in node.properties)
      own9.call(node.properties, property) &&
        addProperty(properties, property, node.properties[property], context);
  (name === "ol" || name === "ul") && context.listDepth++;
  let children = childrenToReact(context, node);
  (name === "ol" || name === "ul") && context.listDepth--,
    (context.schema = parentSchema);
  let position3 = node.position || {
      start: { line: null, column: null, offset: null },
      end: { line: null, column: null, offset: null },
    },
    component =
      options.components && own9.call(options.components, name)
        ? options.components[name]
        : name,
    basic =
      typeof component == "string" ||
      component === import_react10.default.Fragment;
  if (!import_react_is.default.isValidElementType(component))
    throw new TypeError(
      `Component for name \`${name}\` not defined or is not renderable`
    );
  if (
    ((properties.key = [
      name,
      position3.start.line,
      position3.start.column,
      index2,
    ].join("-")),
    name === "a" &&
      options.linkTarget &&
      (properties.target =
        typeof options.linkTarget == "function"
          ? options.linkTarget(
              String(properties.href || ""),
              node.children,
              typeof properties.title == "string" ? properties.title : null
            )
          : options.linkTarget),
    name === "a" &&
      options.transformLinkUri &&
      (properties.href = options.transformLinkUri(
        String(properties.href || ""),
        node.children,
        typeof properties.title == "string" ? properties.title : null
      )),
    !basic &&
      name === "code" &&
      parent.type === "element" &&
      parent.tagName !== "pre" &&
      (properties.inline = !0),
    !basic &&
      (name === "h1" ||
        name === "h2" ||
        name === "h3" ||
        name === "h4" ||
        name === "h5" ||
        name === "h6") &&
      (properties.level = Number.parseInt(name.charAt(1), 10)),
    name === "img" &&
      options.transformImageUri &&
      (properties.src = options.transformImageUri(
        String(properties.src || ""),
        String(properties.alt || ""),
        typeof properties.title == "string" ? properties.title : null
      )),
    !basic && name === "li" && parent.type === "element")
  ) {
    let input = getInputElement(node);
    (properties.checked =
      input && input.properties ? Boolean(input.properties.checked) : null),
      (properties.index = getElementsBeforeCount(parent, node)),
      (properties.ordered = parent.tagName === "ol");
  }
  return (
    !basic &&
      (name === "ol" || name === "ul") &&
      ((properties.ordered = name === "ol"),
      (properties.depth = context.listDepth)),
    (name === "td" || name === "th") &&
      (properties.align &&
        (properties.style || (properties.style = {}),
        (properties.style.textAlign = properties.align),
        delete properties.align),
      basic || (properties.isHeader = name === "th")),
    !basic &&
      name === "tr" &&
      parent.type === "element" &&
      (properties.isHeader = Boolean(parent.tagName === "thead")),
    options.sourcePos &&
      (properties["data-sourcepos"] = flattenPosition(position3)),
    !basic &&
      options.rawSourcePos &&
      (properties.sourcePosition = node.position),
    !basic &&
      options.includeElementIndex &&
      ((properties.index = getElementsBeforeCount(parent, node)),
      (properties.siblingCount = getElementsBeforeCount(parent))),
    basic || (properties.node = node),
    children.length > 0
      ? import_react10.default.createElement(component, properties, children)
      : import_react10.default.createElement(component, properties)
  );
}
function getInputElement(node) {
  let index2 = -1;
  for (; ++index2 < node.children.length; ) {
    let child = node.children[index2];
    if (child.type === "element" && child.tagName === "input") return child;
  }
  return null;
}
function getElementsBeforeCount(parent, node) {
  let index2 = -1,
    count = 0;
  for (
    ;
    ++index2 < parent.children.length && parent.children[index2] !== node;

  )
    parent.children[index2].type === "element" && count++;
  return count;
}
function addProperty(props, prop, value, ctx) {
  let info2 = find(ctx.schema, prop),
    result = value;
  result == null ||
    result !== result ||
    (Array.isArray(result) &&
      (result = info2.commaSeparated ? stringify2(result) : stringify(result)),
    info2.property === "style" &&
      typeof result == "string" &&
      (result = parseStyle(result)),
    info2.space && info2.property
      ? (props[
          own9.call(hastToReact, info2.property)
            ? hastToReact[info2.property]
            : info2.property
        ] = result)
      : info2.attribute && (props[info2.attribute] = result));
}
function parseStyle(value) {
  let result = {};
  try {
    (0, import_style_to_object.default)(value, iterator);
  } catch {}
  return result;
  function iterator(name, v) {
    let k = name.slice(0, 4) === "-ms-" ? `ms-${name.slice(4)}` : name;
    result[k.replace(/-([a-z])/g, styleReplacer)] = v;
  }
}
function styleReplacer(_, $1) {
  return $1.toUpperCase();
}
function flattenPosition(pos) {
  return [
    pos.start.line,
    ":",
    pos.start.column,
    "-",
    pos.end.line,
    ":",
    pos.end.column,
  ]
    .map((d) => String(d))
    .join("");
}

// ../../node_modules/react-markdown/lib/react-markdown.js
var own10 = {}.hasOwnProperty,
  changelog =
    "https://github.com/remarkjs/react-markdown/blob/main/changelog.md",
  deprecated = {
    plugins: { to: "plugins", id: "change-plugins-to-remarkplugins" },
    renderers: { to: "components", id: "change-renderers-to-components" },
    astPlugins: { id: "remove-buggy-html-in-markdown-parser" },
    allowDangerousHtml: { id: "remove-buggy-html-in-markdown-parser" },
    escapeHtml: { id: "remove-buggy-html-in-markdown-parser" },
    source: { to: "children", id: "change-source-to-children" },
    allowNode: {
      to: "allowElement",
      id: "replace-allownode-allowedtypes-and-disallowedtypes",
    },
    allowedTypes: {
      to: "allowedElements",
      id: "replace-allownode-allowedtypes-and-disallowedtypes",
    },
    disallowedTypes: {
      to: "disallowedElements",
      id: "replace-allownode-allowedtypes-and-disallowedtypes",
    },
    includeNodeIndex: {
      to: "includeElementIndex",
      id: "change-includenodeindex-to-includeelementindex",
    },
  };
function ReactMarkdown(options) {
  for (let key in deprecated)
    if (own10.call(deprecated, key) && own10.call(options, key)) {
      let deprecation = deprecated[key];
      console.warn(
        `[react-markdown] Warning: please ${
          deprecation.to ? `use \`${deprecation.to}\` instead of` : "remove"
        } \`${key}\` (see <${changelog}#${deprecation.id}> for more info)`
      ),
        delete deprecated[key];
    }
  let processor = unified()
      .use(remark_parse_default)
      .use(options.remarkPlugins || [])
      .use(lib_default, {
        ...options.remarkRehypeOptions,
        allowDangerousHtml: !0,
      })
      .use(options.rehypePlugins || [])
      .use(rehypeFilter, options),
    file = new VFile();
  typeof options.children == "string"
    ? (file.value = options.children)
    : options.children !== void 0 &&
      options.children !== null &&
      console.warn(
        `[react-markdown] Warning: please pass a string as \`children\` (not: \`${options.children}\`)`
      );
  let hastNode = processor.runSync(processor.parse(file), file);
  if (hastNode.type !== "root") throw new TypeError("Expected a `root` node");
  let result = import_react11.default.createElement(
    import_react11.default.Fragment,
    {},
    childrenToReact({ options, schema: html3, listDepth: 0 }, hastNode)
  );
  return (
    options.className &&
      (result = import_react11.default.createElement(
        "div",
        { className: options.className },
        result
      )),
    result
  );
}
ReactMarkdown.defaultProps = { transformLinkUri: uriTransformer };
ReactMarkdown.propTypes = {
  children: import_prop_types.default.string,
  className: import_prop_types.default.string,
  allowElement: import_prop_types.default.func,
  allowedElements: import_prop_types.default.arrayOf(
    import_prop_types.default.string
  ),
  disallowedElements: import_prop_types.default.arrayOf(
    import_prop_types.default.string
  ),
  unwrapDisallowed: import_prop_types.default.bool,
  remarkPlugins: import_prop_types.default.arrayOf(
    import_prop_types.default.oneOfType([
      import_prop_types.default.object,
      import_prop_types.default.func,
      import_prop_types.default.arrayOf(
        import_prop_types.default.oneOfType([
          import_prop_types.default.object,
          import_prop_types.default.func,
        ])
      ),
    ])
  ),
  rehypePlugins: import_prop_types.default.arrayOf(
    import_prop_types.default.oneOfType([
      import_prop_types.default.object,
      import_prop_types.default.func,
      import_prop_types.default.arrayOf(
        import_prop_types.default.oneOfType([
          import_prop_types.default.object,
          import_prop_types.default.func,
        ])
      ),
    ])
  ),
  sourcePos: import_prop_types.default.bool,
  rawSourcePos: import_prop_types.default.bool,
  skipHtml: import_prop_types.default.bool,
  includeElementIndex: import_prop_types.default.bool,
  transformLinkUri: import_prop_types.default.oneOfType([
    import_prop_types.default.func,
    import_prop_types.default.bool,
  ]),
  linkTarget: import_prop_types.default.oneOfType([
    import_prop_types.default.func,
    import_prop_types.default.string,
  ]),
  transformImageUri: import_prop_types.default.func,
  components: import_prop_types.default.object,
};

// ../../node_modules/micromark-extension-math/lib/math-flow.js
var mathFlow = {
    tokenize: tokenizeMathFenced,
    concrete: !0,
  },
  nonLazyLine = {
    tokenize: tokenizeNonLazyLine,
    partial: !0,
  };
function tokenizeMathFenced(effects, ok2, nok) {
  let self = this,
    tail = self.events[self.events.length - 1],
    initialSize =
      tail && tail[1].type === "linePrefix"
        ? tail[2].sliceSerialize(tail[1], !0).length
        : 0,
    sizeOpen = 0;
  return start;
  function start(code3) {
    return (
      effects.enter("mathFlow"),
      effects.enter("mathFlowFence"),
      effects.enter("mathFlowFenceSequence"),
      sequenceOpen(code3)
    );
  }
  function sequenceOpen(code3) {
    return code3 === 36
      ? (effects.consume(code3), sizeOpen++, sequenceOpen)
      : (effects.exit("mathFlowFenceSequence"),
        sizeOpen < 2
          ? nok(code3)
          : factorySpace(effects, metaOpen, "whitespace")(code3));
  }
  function metaOpen(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? openAfter(code3)
      : (effects.enter("mathFlowFenceMeta"),
        effects.enter("chunkString", {
          contentType: "string",
        }),
        meta44(code3));
  }
  function meta44(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? (effects.exit("chunkString"),
        effects.exit("mathFlowFenceMeta"),
        openAfter(code3))
      : code3 === 36
      ? nok(code3)
      : (effects.consume(code3), meta44);
  }
  function openAfter(code3) {
    return (
      effects.exit("mathFlowFence"),
      self.interrupt ? ok2(code3) : contentStart(code3)
    );
  }
  function contentStart(code3) {
    return code3 === null
      ? after(code3)
      : markdownLineEnding(code3)
      ? effects.attempt(
          nonLazyLine,
          effects.attempt(
            {
              tokenize: tokenizeClosingFence,
              partial: !0,
            },
            after,
            initialSize
              ? factorySpace(
                  effects,
                  contentStart,
                  "linePrefix",
                  initialSize + 1
                )
              : contentStart
          ),
          after
        )(code3)
      : (effects.enter("mathFlowValue"), contentContinue(code3));
  }
  function contentContinue(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? (effects.exit("mathFlowValue"), contentStart(code3))
      : (effects.consume(code3), contentContinue);
  }
  function after(code3) {
    return effects.exit("mathFlow"), ok2(code3);
  }
  function tokenizeClosingFence(effects2, ok3, nok2) {
    let size = 0;
    return factorySpace(effects2, closingPrefixAfter, "linePrefix", 4);
    function closingPrefixAfter(code3) {
      return (
        effects2.enter("mathFlowFence"),
        effects2.enter("mathFlowFenceSequence"),
        closingSequence(code3)
      );
    }
    function closingSequence(code3) {
      return code3 === 36
        ? (effects2.consume(code3), size++, closingSequence)
        : size < sizeOpen
        ? nok2(code3)
        : (effects2.exit("mathFlowFenceSequence"),
          factorySpace(effects2, closingSequenceEnd, "whitespace")(code3));
    }
    function closingSequenceEnd(code3) {
      return code3 === null || markdownLineEnding(code3)
        ? (effects2.exit("mathFlowFence"), ok3(code3))
        : nok2(code3);
    }
  }
}
function tokenizeNonLazyLine(effects, ok2, nok) {
  let self = this;
  return start;
  function start(code3) {
    return (
      effects.enter("lineEnding"),
      effects.consume(code3),
      effects.exit("lineEnding"),
      lineStart
    );
  }
  function lineStart(code3) {
    return self.parser.lazy[self.now().line] ? nok(code3) : ok2(code3);
  }
}

// ../../node_modules/micromark-extension-math/lib/math-text.js
function mathText(options = {}) {
  let single = options.singleDollarTextMath;
  return (
    single == null && (single = !0),
    {
      tokenize: tokenizeMathText,
      resolve: resolveMathText,
      previous: previous2,
    }
  );
  function tokenizeMathText(effects, ok2, nok) {
    let self = this,
      sizeOpen = 0,
      size,
      token;
    return start;
    function start(code3) {
      return (
        effects.enter("mathText"),
        effects.enter("mathTextSequence"),
        openingSequence(code3)
      );
    }
    function openingSequence(code3) {
      return code3 === 36
        ? (effects.consume(code3), sizeOpen++, openingSequence)
        : sizeOpen < 2 && !single
        ? nok(code3)
        : (effects.exit("mathTextSequence"), gap(code3));
    }
    function gap(code3) {
      return code3 === null
        ? nok(code3)
        : code3 === 36
        ? ((token = effects.enter("mathTextSequence")),
          (size = 0),
          closingSequence(code3))
        : code3 === 32
        ? (effects.enter("space"),
          effects.consume(code3),
          effects.exit("space"),
          gap)
        : markdownLineEnding(code3)
        ? (effects.enter("lineEnding"),
          effects.consume(code3),
          effects.exit("lineEnding"),
          gap)
        : (effects.enter("mathTextData"), data2(code3));
    }
    function data2(code3) {
      return code3 === null ||
        code3 === 32 ||
        code3 === 36 ||
        markdownLineEnding(code3)
        ? (effects.exit("mathTextData"), gap(code3))
        : (effects.consume(code3), data2);
    }
    function closingSequence(code3) {
      return code3 === 36
        ? (effects.consume(code3), size++, closingSequence)
        : size === sizeOpen
        ? (effects.exit("mathTextSequence"),
          effects.exit("mathText"),
          ok2(code3))
        : ((token.type = "mathTextData"), data2(code3));
    }
  }
}
function resolveMathText(events) {
  let tailExitIndex = events.length - 4,
    headEnterIndex = 3,
    index2,
    enter;
  if (
    (events[headEnterIndex][1].type === "lineEnding" ||
      events[headEnterIndex][1].type === "space") &&
    (events[tailExitIndex][1].type === "lineEnding" ||
      events[tailExitIndex][1].type === "space")
  ) {
    for (index2 = headEnterIndex; ++index2 < tailExitIndex; )
      if (events[index2][1].type === "mathTextData") {
        (events[tailExitIndex][1].type = "mathTextPadding"),
          (events[headEnterIndex][1].type = "mathTextPadding"),
          (headEnterIndex += 2),
          (tailExitIndex -= 2);
        break;
      }
  }
  for (
    index2 = headEnterIndex - 1, tailExitIndex++;
    ++index2 <= tailExitIndex;

  )
    enter === void 0
      ? index2 !== tailExitIndex &&
        events[index2][1].type !== "lineEnding" &&
        (enter = index2)
      : (index2 === tailExitIndex || events[index2][1].type === "lineEnding") &&
        ((events[enter][1].type = "mathTextData"),
        index2 !== enter + 2 &&
          ((events[enter][1].end = events[index2 - 1][1].end),
          events.splice(enter + 2, index2 - enter - 2),
          (tailExitIndex -= index2 - enter - 2),
          (index2 = enter + 2)),
        (enter = void 0));
  return events;
}
function previous2(code3) {
  return (
    code3 !== 36 ||
    this.events[this.events.length - 1][1].type === "characterEscape"
  );
}

// ../../node_modules/micromark-extension-math/lib/syntax.js
function math(options) {
  return {
    flow: {
      [36]: mathFlow,
    },
    text: {
      [36]: mathText(options),
    },
  };
}

// ../../node_modules/longest-streak/index.js
function longestStreak(value, character) {
  let source2 = String(value),
    index2 = source2.indexOf(character),
    expected = index2,
    count = 0,
    max = 0;
  if (typeof character != "string" || character.length !== 1)
    throw new Error("Expected character");
  for (; index2 !== -1; )
    index2 === expected ? ++count > max && (max = count) : (count = 1),
      (expected = index2 + 1),
      (index2 = source2.indexOf(character, expected));
  return max;
}

// ../../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js
function patternCompile(pattern) {
  if (!pattern._compiled) {
    let before =
      (pattern.atBreak ? "[\\r\\n][\\t ]*" : "") +
      (pattern.before ? "(?:" + pattern.before + ")" : "");
    pattern._compiled = new RegExp(
      (before ? "(" + before + ")" : "") +
        (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? "\\" : "") +
        pattern.character +
        (pattern.after ? "(?:" + pattern.after + ")" : ""),
      "g"
    );
  }
  return pattern._compiled;
}

// ../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
function patternInScope(stack, pattern) {
  return (
    listInScope(stack, pattern.inConstruct, !0) &&
    !listInScope(stack, pattern.notInConstruct, !1)
  );
}
function listInScope(stack, list3, none) {
  if (!list3) return none;
  typeof list3 == "string" && (list3 = [list3]);
  let index2 = -1;
  for (; ++index2 < list3.length; )
    if (stack.includes(list3[index2])) return !0;
  return !1;
}

// ../../node_modules/mdast-util-to-markdown/lib/util/safe.js
function safe(context, input, config) {
  let value = (config.before || "") + (input || "") + (config.after || ""),
    positions = [],
    result = [],
    infos = {},
    index2 = -1;
  for (; ++index2 < context.unsafe.length; ) {
    let pattern = context.unsafe[index2];
    if (!patternInScope(context.stack, pattern)) continue;
    let expression = patternCompile(pattern),
      match;
    for (; (match = expression.exec(value)); ) {
      let before = "before" in pattern || Boolean(pattern.atBreak),
        after = "after" in pattern,
        position3 = match.index + (before ? match[1].length : 0);
      positions.includes(position3)
        ? (infos[position3].before && !before && (infos[position3].before = !1),
          infos[position3].after && !after && (infos[position3].after = !1))
        : (positions.push(position3), (infos[position3] = { before, after }));
    }
  }
  positions.sort(numerical);
  let start = config.before ? config.before.length : 0,
    end = value.length - (config.after ? config.after.length : 0);
  for (index2 = -1; ++index2 < positions.length; ) {
    let position3 = positions[index2];
    position3 < start ||
      position3 >= end ||
      (position3 + 1 < end &&
        positions[index2 + 1] === position3 + 1 &&
        infos[position3].after &&
        !infos[position3 + 1].before &&
        !infos[position3 + 1].after) ||
      (positions[index2 - 1] === position3 - 1 &&
        infos[position3].before &&
        !infos[position3 - 1].before &&
        !infos[position3 - 1].after) ||
      (start !== position3 &&
        result.push(escapeBackslashes(value.slice(start, position3), "\\")),
      (start = position3),
      /[!-/:-@[-`{-~]/.test(value.charAt(position3)) &&
      (!config.encode || !config.encode.includes(value.charAt(position3)))
        ? result.push("\\")
        : (result.push(
            "&#x" + value.charCodeAt(position3).toString(16).toUpperCase() + ";"
          ),
          start++));
  }
  return (
    result.push(escapeBackslashes(value.slice(start, end), config.after)),
    result.join("")
  );
}
function numerical(a, b) {
  return a - b;
}
function escapeBackslashes(value, after) {
  let expression = /\\(?=[!-/:-@[-`{-~])/g,
    positions = [],
    results = [],
    whole = value + after,
    index2 = -1,
    start = 0,
    match;
  for (; (match = expression.exec(whole)); ) positions.push(match.index);
  for (; ++index2 < positions.length; )
    start !== positions[index2] &&
      results.push(value.slice(start, positions[index2])),
      results.push("\\"),
      (start = positions[index2]);
  return results.push(value.slice(start)), results.join("");
}

// ../../node_modules/mdast-util-to-markdown/lib/util/track.js
function track(options_) {
  let options = options_ || {},
    now = options.now || {},
    lineShift = options.lineShift || 0,
    line = now.line || 1,
    column = now.column || 1;
  return { move, current, shift };
  function current() {
    return { now: { line, column }, lineShift };
  }
  function shift(value) {
    lineShift += value;
  }
  function move(value = "") {
    let chunks = value.split(/\r?\n|\r/g),
      tail = chunks[chunks.length - 1];
    return (
      (line += chunks.length - 1),
      (column =
        chunks.length === 1
          ? column + tail.length
          : 1 + tail.length + lineShift),
      value
    );
  }
}

// ../../node_modules/mdast-util-math/index.js
function mathFromMarkdown() {
  return {
    enter: {
      mathFlow: enterMathFlow,
      mathFlowFenceMeta: enterMathFlowMeta,
      mathText: enterMathText,
    },
    exit: {
      mathFlow: exitMathFlow,
      mathFlowFence: exitMathFlowFence,
      mathFlowFenceMeta: exitMathFlowMeta,
      mathFlowValue: exitMathData,
      mathText: exitMathText,
      mathTextData: exitMathData,
    },
  };
  function enterMathFlow(token) {
    this.enter(
      {
        type: "math",
        meta: null,
        value: "",
        data: {
          hName: "div",
          hProperties: { className: ["math", "math-display"] },
          hChildren: [{ type: "text", value: "" }],
        },
      },
      token
    );
  }
  function enterMathFlowMeta() {
    this.buffer();
  }
  function exitMathFlowMeta() {
    let data2 = this.resume(),
      node = this.stack[this.stack.length - 1];
    node.meta = data2;
  }
  function exitMathFlowFence() {
    this.getData("mathFlowInside") ||
      (this.buffer(), this.setData("mathFlowInside", !0));
  }
  function exitMathFlow(token) {
    let data2 = this.resume().replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, ""),
      node = this.exit(token);
    (node.value = data2),
      (node.data.hChildren[0].value = data2),
      this.setData("mathFlowInside");
  }
  function enterMathText(token) {
    this.enter(
      {
        type: "inlineMath",
        value: "",
        data: {
          hName: "span",
          hProperties: { className: ["math", "math-inline"] },
          hChildren: [{ type: "text", value: "" }],
        },
      },
      token
    ),
      this.buffer();
  }
  function exitMathText(token) {
    let data2 = this.resume(),
      node = this.exit(token);
    (node.value = data2), (node.data.hChildren[0].value = data2);
  }
  function exitMathData(token) {
    this.config.enter.data.call(this, token),
      this.config.exit.data.call(this, token);
  }
}
function mathToMarkdown(options = {}) {
  let single = options.singleDollarTextMath;
  return (
    single == null && (single = !0),
    (inlineMath.peek = inlineMathPeek),
    {
      unsafe: [
        { character: "\r", inConstruct: ["mathFlowMeta"] },
        { character: "\r", inConstruct: ["mathFlowMeta"] },
        single
          ? { character: "$", inConstruct: ["mathFlowMeta", "phrasing"] }
          : {
              character: "$",
              after: "\\$",
              inConstruct: ["mathFlowMeta", "phrasing"],
            },
        { atBreak: !0, character: "$", after: "\\$" },
      ],
      handlers: { math: math2, inlineMath },
    }
  );
  function math2(node, _, context, safeOptions) {
    let raw2 = node.value || "",
      sequence = "$".repeat(Math.max(longestStreak(raw2, "$") + 1, 2)),
      exit3 = context.enter("mathFlow"),
      tracker = track(safeOptions),
      value = tracker.move(sequence);
    if (node.meta) {
      let subexit = context.enter("mathFlowMeta");
      (value += tracker.move(
        safe(context, node.meta, {
          ...tracker.current(),
          before: value,
          after: " ",
          encode: ["$"],
        })
      )),
        subexit();
    }
    return (
      (value += tracker.move(`
`)),
      raw2 &&
        (value += tracker.move(
          raw2 +
            `
`
        )),
      (value += tracker.move(sequence)),
      exit3(),
      value
    );
  }
  function inlineMath(node) {
    let value = node.value || "",
      size = 1,
      pad = "";
    for (
      single || size++;
      new RegExp("(^|[^$])" + "\\$".repeat(size) + "([^$]|$)").test(value);

    )
      size++;
    /[^ \r\n]/.test(value) &&
      (/[ \r\n$]/.test(value.charAt(0)) ||
        /[ \r\n$]/.test(value.charAt(value.length - 1))) &&
      (pad = " ");
    let sequence = "$".repeat(size);
    return sequence + pad + value + pad + sequence;
  }
  function inlineMathPeek() {
    return "$";
  }
}

// ../../node_modules/remark-math/index.js
function remarkMath(options = {}) {
  let data2 = this.data();
  add("micromarkExtensions", math(options)),
    add("fromMarkdownExtensions", mathFromMarkdown()),
    add("toMarkdownExtensions", mathToMarkdown(options));
  function add(field, value) {
    (data2[field] ? data2[field] : (data2[field] = [])).push(value);
  }
}

// ../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js
var www = {
    tokenize: tokenizeWww,
    partial: !0,
  },
  domain = {
    tokenize: tokenizeDomain,
    partial: !0,
  },
  path = {
    tokenize: tokenizePath,
    partial: !0,
  },
  punctuation = {
    tokenize: tokenizePunctuation,
    partial: !0,
  },
  namedCharacterReference = {
    tokenize: tokenizeNamedCharacterReference,
    partial: !0,
  },
  wwwAutolink = {
    tokenize: tokenizeWwwAutolink,
    previous: previousWww,
  },
  httpAutolink = {
    tokenize: tokenizeHttpAutolink,
    previous: previousHttp,
  },
  emailAutolink = {
    tokenize: tokenizeEmailAutolink,
    previous: previousEmail,
  },
  text4 = {},
  gfmAutolinkLiteral = {
    text: text4,
  },
  code2 = 48;
for (; code2 < 123; )
  (text4[code2] = emailAutolink),
    code2++,
    code2 === 58 ? (code2 = 65) : code2 === 91 && (code2 = 97);
text4[43] = emailAutolink;
text4[45] = emailAutolink;
text4[46] = emailAutolink;
text4[95] = emailAutolink;
text4[72] = [emailAutolink, httpAutolink];
text4[104] = [emailAutolink, httpAutolink];
text4[87] = [emailAutolink, wwwAutolink];
text4[119] = [emailAutolink, wwwAutolink];
function tokenizeEmailAutolink(effects, ok2, nok) {
  let self = this,
    hasDot,
    hasDigitInLastSegment;
  return start;
  function start(code3) {
    return !gfmAtext(code3) ||
      !previousEmail(self.previous) ||
      previousUnbalanced(self.events)
      ? nok(code3)
      : (effects.enter("literalAutolink"),
        effects.enter("literalAutolinkEmail"),
        atext(code3));
  }
  function atext(code3) {
    return gfmAtext(code3)
      ? (effects.consume(code3), atext)
      : code3 === 64
      ? (effects.consume(code3), label)
      : nok(code3);
  }
  function label(code3) {
    return code3 === 46
      ? effects.check(punctuation, done, dotContinuation)(code3)
      : code3 === 45 || code3 === 95
      ? effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code3)
      : asciiAlphanumeric(code3)
      ? (!hasDigitInLastSegment &&
          asciiDigit(code3) &&
          (hasDigitInLastSegment = !0),
        effects.consume(code3),
        label)
      : done(code3);
  }
  function dotContinuation(code3) {
    return (
      effects.consume(code3),
      (hasDot = !0),
      (hasDigitInLastSegment = void 0),
      label
    );
  }
  function dashOrUnderscoreContinuation(code3) {
    return effects.consume(code3), afterDashOrUnderscore;
  }
  function afterDashOrUnderscore(code3) {
    return code3 === 46
      ? effects.check(punctuation, nok, dotContinuation)(code3)
      : label(code3);
  }
  function done(code3) {
    return hasDot && !hasDigitInLastSegment
      ? (effects.exit("literalAutolinkEmail"),
        effects.exit("literalAutolink"),
        ok2(code3))
      : nok(code3);
  }
}
function tokenizeWwwAutolink(effects, ok2, nok) {
  let self = this;
  return start;
  function start(code3) {
    return (code3 !== 87 && code3 !== 119) ||
      !previousWww(self.previous) ||
      previousUnbalanced(self.events)
      ? nok(code3)
      : (effects.enter("literalAutolink"),
        effects.enter("literalAutolinkWww"),
        effects.check(
          www,
          effects.attempt(domain, effects.attempt(path, done), nok),
          nok
        )(code3));
  }
  function done(code3) {
    return (
      effects.exit("literalAutolinkWww"),
      effects.exit("literalAutolink"),
      ok2(code3)
    );
  }
}
function tokenizeHttpAutolink(effects, ok2, nok) {
  let self = this;
  return start;
  function start(code3) {
    return (code3 !== 72 && code3 !== 104) ||
      !previousHttp(self.previous) ||
      previousUnbalanced(self.events)
      ? nok(code3)
      : (effects.enter("literalAutolink"),
        effects.enter("literalAutolinkHttp"),
        effects.consume(code3),
        t1);
  }
  function t1(code3) {
    return code3 === 84 || code3 === 116
      ? (effects.consume(code3), t2)
      : nok(code3);
  }
  function t2(code3) {
    return code3 === 84 || code3 === 116
      ? (effects.consume(code3), p2)
      : nok(code3);
  }
  function p2(code3) {
    return code3 === 80 || code3 === 112
      ? (effects.consume(code3), s2)
      : nok(code3);
  }
  function s2(code3) {
    return code3 === 83 || code3 === 115
      ? (effects.consume(code3), colon)
      : colon(code3);
  }
  function colon(code3) {
    return code3 === 58 ? (effects.consume(code3), slash1) : nok(code3);
  }
  function slash1(code3) {
    return code3 === 47 ? (effects.consume(code3), slash2) : nok(code3);
  }
  function slash2(code3) {
    return code3 === 47 ? (effects.consume(code3), after) : nok(code3);
  }
  function after(code3) {
    return code3 === null ||
      asciiControl(code3) ||
      unicodeWhitespace(code3) ||
      unicodePunctuation(code3)
      ? nok(code3)
      : effects.attempt(domain, effects.attempt(path, done), nok)(code3);
  }
  function done(code3) {
    return (
      effects.exit("literalAutolinkHttp"),
      effects.exit("literalAutolink"),
      ok2(code3)
    );
  }
}
function tokenizeWww(effects, ok2, nok) {
  return start;
  function start(code3) {
    return effects.consume(code3), w2;
  }
  function w2(code3) {
    return code3 === 87 || code3 === 119
      ? (effects.consume(code3), w3)
      : nok(code3);
  }
  function w3(code3) {
    return code3 === 87 || code3 === 119
      ? (effects.consume(code3), dot)
      : nok(code3);
  }
  function dot(code3) {
    return code3 === 46 ? (effects.consume(code3), after) : nok(code3);
  }
  function after(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? nok(code3)
      : ok2(code3);
  }
}
function tokenizeDomain(effects, ok2, nok) {
  let hasUnderscoreInLastSegment, hasUnderscoreInLastLastSegment;
  return domain2;
  function domain2(code3) {
    return code3 === 38
      ? effects.check(
          namedCharacterReference,
          done,
          punctuationContinuation
        )(code3)
      : code3 === 46 || code3 === 95
      ? effects.check(punctuation, done, punctuationContinuation)(code3)
      : code3 === null ||
        asciiControl(code3) ||
        unicodeWhitespace(code3) ||
        (code3 !== 45 && unicodePunctuation(code3))
      ? done(code3)
      : (effects.consume(code3), domain2);
  }
  function punctuationContinuation(code3) {
    return code3 === 46
      ? ((hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment),
        (hasUnderscoreInLastSegment = void 0),
        effects.consume(code3),
        domain2)
      : (code3 === 95 && (hasUnderscoreInLastSegment = !0),
        effects.consume(code3),
        domain2);
  }
  function done(code3) {
    return !hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment
      ? ok2(code3)
      : nok(code3);
  }
}
function tokenizePath(effects, ok2) {
  let balance = 0;
  return inPath;
  function inPath(code3) {
    return code3 === 38
      ? effects.check(namedCharacterReference, ok2, continuedPunctuation)(code3)
      : (code3 === 40 && balance++,
        code3 === 41
          ? effects.check(
              punctuation,
              parenAtPathEnd,
              continuedPunctuation
            )(code3)
          : pathEnd(code3)
          ? ok2(code3)
          : trailingPunctuation(code3)
          ? effects.check(punctuation, ok2, continuedPunctuation)(code3)
          : (effects.consume(code3), inPath));
  }
  function continuedPunctuation(code3) {
    return effects.consume(code3), inPath;
  }
  function parenAtPathEnd(code3) {
    return balance--, balance < 0 ? ok2(code3) : continuedPunctuation(code3);
  }
}
function tokenizeNamedCharacterReference(effects, ok2, nok) {
  return start;
  function start(code3) {
    return effects.consume(code3), inside;
  }
  function inside(code3) {
    return asciiAlpha(code3)
      ? (effects.consume(code3), inside)
      : code3 === 59
      ? (effects.consume(code3), after)
      : nok(code3);
  }
  function after(code3) {
    return pathEnd(code3) ? ok2(code3) : nok(code3);
  }
}
function tokenizePunctuation(effects, ok2, nok) {
  return start;
  function start(code3) {
    return effects.consume(code3), after;
  }
  function after(code3) {
    return trailingPunctuation(code3)
      ? (effects.consume(code3), after)
      : pathEnd(code3)
      ? ok2(code3)
      : nok(code3);
  }
}
function trailingPunctuation(code3) {
  return (
    code3 === 33 ||
    code3 === 34 ||
    code3 === 39 ||
    code3 === 41 ||
    code3 === 42 ||
    code3 === 44 ||
    code3 === 46 ||
    code3 === 58 ||
    code3 === 59 ||
    code3 === 60 ||
    code3 === 63 ||
    code3 === 95 ||
    code3 === 126
  );
}
function pathEnd(code3) {
  return code3 === null || code3 === 60 || markdownLineEndingOrSpace(code3);
}
function gfmAtext(code3) {
  return (
    code3 === 43 ||
    code3 === 45 ||
    code3 === 46 ||
    code3 === 95 ||
    asciiAlphanumeric(code3)
  );
}
function previousWww(code3) {
  return (
    code3 === null ||
    code3 === 40 ||
    code3 === 42 ||
    code3 === 95 ||
    code3 === 126 ||
    markdownLineEndingOrSpace(code3)
  );
}
function previousHttp(code3) {
  return code3 === null || !asciiAlpha(code3);
}
function previousEmail(code3) {
  return code3 !== 47 && previousHttp(code3);
}
function previousUnbalanced(events) {
  let index2 = events.length,
    result = !1;
  for (; index2--; ) {
    let token = events[index2][1];
    if (
      (token.type === "labelLink" || token.type === "labelImage") &&
      !token._balanced
    ) {
      result = !0;
      break;
    }
    if (token._gfmAutolinkLiteralWalkedInto) {
      result = !1;
      break;
    }
  }
  return (
    events.length > 0 &&
      !result &&
      (events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = !0),
    result
  );
}

// ../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js
var indent = {
  tokenize: tokenizeIndent2,
  partial: !0,
};
function gfmFootnote() {
  return {
    document: {
      [91]: {
        tokenize: tokenizeDefinitionStart,
        continuation: {
          tokenize: tokenizeDefinitionContinuation,
        },
        exit: gfmFootnoteDefinitionEnd,
      },
    },
    text: {
      [91]: {
        tokenize: tokenizeGfmFootnoteCall,
      },
      [93]: {
        add: "after",
        tokenize: tokenizePotentialGfmFootnoteCall,
        resolveTo: resolveToPotentialGfmFootnoteCall,
      },
    },
  };
}
function tokenizePotentialGfmFootnoteCall(effects, ok2, nok) {
  let self = this,
    index2 = self.events.length,
    defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []),
    labelStart;
  for (; index2--; ) {
    let token = self.events[index2][1];
    if (token.type === "labelImage") {
      labelStart = token;
      break;
    }
    if (
      token.type === "gfmFootnoteCall" ||
      token.type === "labelLink" ||
      token.type === "label" ||
      token.type === "image" ||
      token.type === "link"
    )
      break;
  }
  return start;
  function start(code3) {
    if (!labelStart || !labelStart._balanced) return nok(code3);
    let id = normalizeIdentifier(
      self.sliceSerialize({
        start: labelStart.end,
        end: self.now(),
      })
    );
    return id.charCodeAt(0) !== 94 || !defined.includes(id.slice(1))
      ? nok(code3)
      : (effects.enter("gfmFootnoteCallLabelMarker"),
        effects.consume(code3),
        effects.exit("gfmFootnoteCallLabelMarker"),
        ok2(code3));
  }
}
function resolveToPotentialGfmFootnoteCall(events, context) {
  let index2 = events.length,
    labelStart;
  for (; index2--; )
    if (
      events[index2][1].type === "labelImage" &&
      events[index2][0] === "enter"
    ) {
      labelStart = events[index2][1];
      break;
    }
  (events[index2 + 1][1].type = "data"),
    (events[index2 + 3][1].type = "gfmFootnoteCallLabelMarker");
  let call = {
      type: "gfmFootnoteCall",
      start: Object.assign({}, events[index2 + 3][1].start),
      end: Object.assign({}, events[events.length - 1][1].end),
    },
    marker = {
      type: "gfmFootnoteCallMarker",
      start: Object.assign({}, events[index2 + 3][1].end),
      end: Object.assign({}, events[index2 + 3][1].end),
    };
  marker.end.column++, marker.end.offset++, marker.end._bufferIndex++;
  let string3 = {
      type: "gfmFootnoteCallString",
      start: Object.assign({}, marker.end),
      end: Object.assign({}, events[events.length - 1][1].start),
    },
    chunk = {
      type: "chunkString",
      contentType: "string",
      start: Object.assign({}, string3.start),
      end: Object.assign({}, string3.end),
    },
    replacement = [
      events[index2 + 1],
      events[index2 + 2],
      ["enter", call, context],
      events[index2 + 3],
      events[index2 + 4],
      ["enter", marker, context],
      ["exit", marker, context],
      ["enter", string3, context],
      ["enter", chunk, context],
      ["exit", chunk, context],
      ["exit", string3, context],
      events[events.length - 2],
      events[events.length - 1],
      ["exit", call, context],
    ];
  return (
    events.splice(index2, events.length - index2 + 1, ...replacement), events
  );
}
function tokenizeGfmFootnoteCall(effects, ok2, nok) {
  let self = this,
    defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []),
    size = 0,
    data2;
  return start;
  function start(code3) {
    return (
      effects.enter("gfmFootnoteCall"),
      effects.enter("gfmFootnoteCallLabelMarker"),
      effects.consume(code3),
      effects.exit("gfmFootnoteCallLabelMarker"),
      callStart
    );
  }
  function callStart(code3) {
    return code3 !== 94
      ? nok(code3)
      : (effects.enter("gfmFootnoteCallMarker"),
        effects.consume(code3),
        effects.exit("gfmFootnoteCallMarker"),
        effects.enter("gfmFootnoteCallString"),
        (effects.enter("chunkString").contentType = "string"),
        callData);
  }
  function callData(code3) {
    let token;
    return code3 === null || code3 === 91 || size++ > 999
      ? nok(code3)
      : code3 === 93
      ? data2
        ? (effects.exit("chunkString"),
          (token = effects.exit("gfmFootnoteCallString")),
          defined.includes(normalizeIdentifier(self.sliceSerialize(token)))
            ? end(code3)
            : nok(code3))
        : nok(code3)
      : (effects.consume(code3),
        markdownLineEndingOrSpace(code3) || (data2 = !0),
        code3 === 92 ? callEscape : callData);
  }
  function callEscape(code3) {
    return code3 === 91 || code3 === 92 || code3 === 93
      ? (effects.consume(code3), size++, callData)
      : callData(code3);
  }
  function end(code3) {
    return (
      effects.enter("gfmFootnoteCallLabelMarker"),
      effects.consume(code3),
      effects.exit("gfmFootnoteCallLabelMarker"),
      effects.exit("gfmFootnoteCall"),
      ok2
    );
  }
}
function tokenizeDefinitionStart(effects, ok2, nok) {
  let self = this,
    defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []),
    identifier,
    size = 0,
    data2;
  return start;
  function start(code3) {
    return (
      (effects.enter("gfmFootnoteDefinition")._container = !0),
      effects.enter("gfmFootnoteDefinitionLabel"),
      effects.enter("gfmFootnoteDefinitionLabelMarker"),
      effects.consume(code3),
      effects.exit("gfmFootnoteDefinitionLabelMarker"),
      labelStart
    );
  }
  function labelStart(code3) {
    return code3 === 94
      ? (effects.enter("gfmFootnoteDefinitionMarker"),
        effects.consume(code3),
        effects.exit("gfmFootnoteDefinitionMarker"),
        effects.enter("gfmFootnoteDefinitionLabelString"),
        atBreak)
      : nok(code3);
  }
  function atBreak(code3) {
    let token;
    return code3 === null || code3 === 91 || size > 999
      ? nok(code3)
      : code3 === 93
      ? data2
        ? ((token = effects.exit("gfmFootnoteDefinitionLabelString")),
          (identifier = normalizeIdentifier(self.sliceSerialize(token))),
          effects.enter("gfmFootnoteDefinitionLabelMarker"),
          effects.consume(code3),
          effects.exit("gfmFootnoteDefinitionLabelMarker"),
          effects.exit("gfmFootnoteDefinitionLabel"),
          labelAfter)
        : nok(code3)
      : markdownLineEnding(code3)
      ? (effects.enter("lineEnding"),
        effects.consume(code3),
        effects.exit("lineEnding"),
        size++,
        atBreak)
      : ((effects.enter("chunkString").contentType = "string"), label(code3));
  }
  function label(code3) {
    return code3 === null ||
      markdownLineEnding(code3) ||
      code3 === 91 ||
      code3 === 93 ||
      size > 999
      ? (effects.exit("chunkString"), atBreak(code3))
      : (markdownLineEndingOrSpace(code3) || (data2 = !0),
        size++,
        effects.consume(code3),
        code3 === 92 ? labelEscape : label);
  }
  function labelEscape(code3) {
    return code3 === 91 || code3 === 92 || code3 === 93
      ? (effects.consume(code3), size++, label)
      : label(code3);
  }
  function labelAfter(code3) {
    return code3 === 58
      ? (effects.enter("definitionMarker"),
        effects.consume(code3),
        effects.exit("definitionMarker"),
        factorySpace(effects, done, "gfmFootnoteDefinitionWhitespace"))
      : nok(code3);
  }
  function done(code3) {
    return defined.includes(identifier) || defined.push(identifier), ok2(code3);
  }
}
function tokenizeDefinitionContinuation(effects, ok2, nok) {
  return effects.check(blankLine, ok2, effects.attempt(indent, ok2, nok));
}
function gfmFootnoteDefinitionEnd(effects) {
  effects.exit("gfmFootnoteDefinition");
}
function tokenizeIndent2(effects, ok2, nok) {
  let self = this;
  return factorySpace(
    effects,
    afterPrefix,
    "gfmFootnoteDefinitionIndent",
    4 + 1
  );
  function afterPrefix(code3) {
    let tail = self.events[self.events.length - 1];
    return tail &&
      tail[1].type === "gfmFootnoteDefinitionIndent" &&
      tail[2].sliceSerialize(tail[1], !0).length === 4
      ? ok2(code3)
      : nok(code3);
  }
}

// ../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js
function gfmStrikethrough(options = {}) {
  let single = options.singleTilde,
    tokenizer = {
      tokenize: tokenizeStrikethrough,
      resolveAll: resolveAllStrikethrough,
    };
  return (
    single == null && (single = !0),
    {
      text: {
        [126]: tokenizer,
      },
      insideSpan: {
        null: [tokenizer],
      },
      attentionMarkers: {
        null: [126],
      },
    }
  );
  function resolveAllStrikethrough(events, context) {
    let index2 = -1;
    for (; ++index2 < events.length; )
      if (
        events[index2][0] === "enter" &&
        events[index2][1].type === "strikethroughSequenceTemporary" &&
        events[index2][1]._close
      ) {
        let open = index2;
        for (; open--; )
          if (
            events[open][0] === "exit" &&
            events[open][1].type === "strikethroughSequenceTemporary" &&
            events[open][1]._open &&
            events[index2][1].end.offset - events[index2][1].start.offset ===
              events[open][1].end.offset - events[open][1].start.offset
          ) {
            (events[index2][1].type = "strikethroughSequence"),
              (events[open][1].type = "strikethroughSequence");
            let strikethrough2 = {
                type: "strikethrough",
                start: Object.assign({}, events[open][1].start),
                end: Object.assign({}, events[index2][1].end),
              },
              text8 = {
                type: "strikethroughText",
                start: Object.assign({}, events[open][1].end),
                end: Object.assign({}, events[index2][1].start),
              },
              nextEvents = [
                ["enter", strikethrough2, context],
                ["enter", events[open][1], context],
                ["exit", events[open][1], context],
                ["enter", text8, context],
              ];
            splice(
              nextEvents,
              nextEvents.length,
              0,
              resolveAll(
                context.parser.constructs.insideSpan.null,
                events.slice(open + 1, index2),
                context
              )
            ),
              splice(nextEvents, nextEvents.length, 0, [
                ["exit", text8, context],
                ["enter", events[index2][1], context],
                ["exit", events[index2][1], context],
                ["exit", strikethrough2, context],
              ]),
              splice(events, open - 1, index2 - open + 3, nextEvents),
              (index2 = open + nextEvents.length - 2);
            break;
          }
      }
    for (index2 = -1; ++index2 < events.length; )
      events[index2][1].type === "strikethroughSequenceTemporary" &&
        (events[index2][1].type = "data");
    return events;
  }
  function tokenizeStrikethrough(effects, ok2, nok) {
    let previous4 = this.previous,
      events = this.events,
      size = 0;
    return start;
    function start(code3) {
      return previous4 === 126 &&
        events[events.length - 1][1].type !== "characterEscape"
        ? nok(code3)
        : (effects.enter("strikethroughSequenceTemporary"), more(code3));
    }
    function more(code3) {
      let before = classifyCharacter(previous4);
      if (code3 === 126)
        return size > 1 ? nok(code3) : (effects.consume(code3), size++, more);
      if (size < 2 && !single) return nok(code3);
      let token = effects.exit("strikethroughSequenceTemporary"),
        after = classifyCharacter(code3);
      return (
        (token._open = !after || (after === 2 && Boolean(before))),
        (token._close = !before || (before === 2 && Boolean(after))),
        ok2(code3)
      );
    }
  }
}

// ../../node_modules/micromark-extension-gfm-table/lib/syntax.js
var gfmTable = {
    flow: {
      null: {
        tokenize: tokenizeTable,
        resolve: resolveTable,
      },
    },
  },
  nextPrefixedOrBlank = {
    tokenize: tokenizeNextPrefixedOrBlank,
    partial: !0,
  };
function resolveTable(events, context) {
  let index2 = -1,
    inHead,
    inDelimiterRow,
    inRow,
    contentStart,
    contentEnd,
    cellStart,
    seenCellInRow;
  for (; ++index2 < events.length; ) {
    let token = events[index2][1];
    if (
      inRow &&
      (token.type === "temporaryTableCellContent" &&
        ((contentStart = contentStart || index2), (contentEnd = index2)),
      (token.type === "tableCellDivider" || token.type === "tableRow") &&
        contentEnd)
    ) {
      let content3 = {
          type: "tableContent",
          start: events[contentStart][1].start,
          end: events[contentEnd][1].end,
        },
        text8 = {
          type: "chunkText",
          start: content3.start,
          end: content3.end,
          contentType: "text",
        };
      events.splice(
        contentStart,
        contentEnd - contentStart + 1,
        ["enter", content3, context],
        ["enter", text8, context],
        ["exit", text8, context],
        ["exit", content3, context]
      ),
        (index2 -= contentEnd - contentStart - 3),
        (contentStart = void 0),
        (contentEnd = void 0);
    }
    if (
      events[index2][0] === "exit" &&
      cellStart !== void 0 &&
      cellStart + (seenCellInRow ? 0 : 1) < index2 &&
      (token.type === "tableCellDivider" ||
        (token.type === "tableRow" &&
          (cellStart + 3 < index2 ||
            events[cellStart][1].type !== "whitespace")))
    ) {
      let cell2 = {
        type: inDelimiterRow
          ? "tableDelimiter"
          : inHead
          ? "tableHeader"
          : "tableData",
        start: events[cellStart][1].start,
        end: events[index2][1].end,
      };
      events.splice(index2 + (token.type === "tableCellDivider" ? 1 : 0), 0, [
        "exit",
        cell2,
        context,
      ]),
        events.splice(cellStart, 0, ["enter", cell2, context]),
        (index2 += 2),
        (cellStart = index2 + 1),
        (seenCellInRow = !0);
    }
    token.type === "tableRow" &&
      ((inRow = events[index2][0] === "enter"),
      inRow && ((cellStart = index2 + 1), (seenCellInRow = !1))),
      token.type === "tableDelimiterRow" &&
        ((inDelimiterRow = events[index2][0] === "enter"),
        inDelimiterRow && ((cellStart = index2 + 1), (seenCellInRow = !1))),
      token.type === "tableHead" && (inHead = events[index2][0] === "enter");
  }
  return events;
}
function tokenizeTable(effects, ok2, nok) {
  let self = this,
    align = [],
    tableHeaderCount = 0,
    seenDelimiter,
    hasDash;
  return start;
  function start(code3) {
    return (
      (effects.enter("table")._align = align),
      effects.enter("tableHead"),
      effects.enter("tableRow"),
      code3 === 124
        ? cellDividerHead(code3)
        : (tableHeaderCount++,
          effects.enter("temporaryTableCellContent"),
          inCellContentHead(code3))
    );
  }
  function cellDividerHead(code3) {
    return (
      effects.enter("tableCellDivider"),
      effects.consume(code3),
      effects.exit("tableCellDivider"),
      (seenDelimiter = !0),
      cellBreakHead
    );
  }
  function cellBreakHead(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? atRowEndHead(code3)
      : markdownSpace(code3)
      ? (effects.enter("whitespace"), effects.consume(code3), inWhitespaceHead)
      : (seenDelimiter && ((seenDelimiter = void 0), tableHeaderCount++),
        code3 === 124
          ? cellDividerHead(code3)
          : (effects.enter("temporaryTableCellContent"),
            inCellContentHead(code3)));
  }
  function inWhitespaceHead(code3) {
    return markdownSpace(code3)
      ? (effects.consume(code3), inWhitespaceHead)
      : (effects.exit("whitespace"), cellBreakHead(code3));
  }
  function inCellContentHead(code3) {
    return code3 === null || code3 === 124 || markdownLineEndingOrSpace(code3)
      ? (effects.exit("temporaryTableCellContent"), cellBreakHead(code3))
      : (effects.consume(code3),
        code3 === 92 ? inCellContentEscapeHead : inCellContentHead);
  }
  function inCellContentEscapeHead(code3) {
    return code3 === 92 || code3 === 124
      ? (effects.consume(code3), inCellContentHead)
      : inCellContentHead(code3);
  }
  function atRowEndHead(code3) {
    if (code3 === null) return nok(code3);
    effects.exit("tableRow"), effects.exit("tableHead");
    let originalInterrupt = self.interrupt;
    return (
      (self.interrupt = !0),
      effects.attempt(
        {
          tokenize: tokenizeRowEnd,
          partial: !0,
        },
        function (code4) {
          return (
            (self.interrupt = originalInterrupt),
            effects.enter("tableDelimiterRow"),
            atDelimiterRowBreak(code4)
          );
        },
        function (code4) {
          return (self.interrupt = originalInterrupt), nok(code4);
        }
      )(code3)
    );
  }
  function atDelimiterRowBreak(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? rowEndDelimiter(code3)
      : markdownSpace(code3)
      ? (effects.enter("whitespace"),
        effects.consume(code3),
        inWhitespaceDelimiter)
      : code3 === 45
      ? (effects.enter("tableDelimiterFiller"),
        effects.consume(code3),
        (hasDash = !0),
        align.push("none"),
        inFillerDelimiter)
      : code3 === 58
      ? (effects.enter("tableDelimiterAlignment"),
        effects.consume(code3),
        effects.exit("tableDelimiterAlignment"),
        align.push("left"),
        afterLeftAlignment)
      : code3 === 124
      ? (effects.enter("tableCellDivider"),
        effects.consume(code3),
        effects.exit("tableCellDivider"),
        atDelimiterRowBreak)
      : nok(code3);
  }
  function inWhitespaceDelimiter(code3) {
    return markdownSpace(code3)
      ? (effects.consume(code3), inWhitespaceDelimiter)
      : (effects.exit("whitespace"), atDelimiterRowBreak(code3));
  }
  function inFillerDelimiter(code3) {
    return code3 === 45
      ? (effects.consume(code3), inFillerDelimiter)
      : (effects.exit("tableDelimiterFiller"),
        code3 === 58
          ? (effects.enter("tableDelimiterAlignment"),
            effects.consume(code3),
            effects.exit("tableDelimiterAlignment"),
            (align[align.length - 1] =
              align[align.length - 1] === "left" ? "center" : "right"),
            afterRightAlignment)
          : atDelimiterRowBreak(code3));
  }
  function afterLeftAlignment(code3) {
    return code3 === 45
      ? (effects.enter("tableDelimiterFiller"),
        effects.consume(code3),
        (hasDash = !0),
        inFillerDelimiter)
      : nok(code3);
  }
  function afterRightAlignment(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? rowEndDelimiter(code3)
      : markdownSpace(code3)
      ? (effects.enter("whitespace"),
        effects.consume(code3),
        inWhitespaceDelimiter)
      : code3 === 124
      ? (effects.enter("tableCellDivider"),
        effects.consume(code3),
        effects.exit("tableCellDivider"),
        atDelimiterRowBreak)
      : nok(code3);
  }
  function rowEndDelimiter(code3) {
    return (
      effects.exit("tableDelimiterRow"),
      !hasDash || tableHeaderCount !== align.length
        ? nok(code3)
        : code3 === null
        ? tableClose(code3)
        : effects.check(
            nextPrefixedOrBlank,
            tableClose,
            effects.attempt(
              {
                tokenize: tokenizeRowEnd,
                partial: !0,
              },
              factorySpace(effects, bodyStart, "linePrefix", 4),
              tableClose
            )
          )(code3)
    );
  }
  function tableClose(code3) {
    return effects.exit("table"), ok2(code3);
  }
  function bodyStart(code3) {
    return effects.enter("tableBody"), rowStartBody(code3);
  }
  function rowStartBody(code3) {
    return (
      effects.enter("tableRow"),
      code3 === 124
        ? cellDividerBody(code3)
        : (effects.enter("temporaryTableCellContent"), inCellContentBody(code3))
    );
  }
  function cellDividerBody(code3) {
    return (
      effects.enter("tableCellDivider"),
      effects.consume(code3),
      effects.exit("tableCellDivider"),
      cellBreakBody
    );
  }
  function cellBreakBody(code3) {
    return code3 === null || markdownLineEnding(code3)
      ? atRowEndBody(code3)
      : markdownSpace(code3)
      ? (effects.enter("whitespace"), effects.consume(code3), inWhitespaceBody)
      : code3 === 124
      ? cellDividerBody(code3)
      : (effects.enter("temporaryTableCellContent"), inCellContentBody(code3));
  }
  function inWhitespaceBody(code3) {
    return markdownSpace(code3)
      ? (effects.consume(code3), inWhitespaceBody)
      : (effects.exit("whitespace"), cellBreakBody(code3));
  }
  function inCellContentBody(code3) {
    return code3 === null || code3 === 124 || markdownLineEndingOrSpace(code3)
      ? (effects.exit("temporaryTableCellContent"), cellBreakBody(code3))
      : (effects.consume(code3),
        code3 === 92 ? inCellContentEscapeBody : inCellContentBody);
  }
  function inCellContentEscapeBody(code3) {
    return code3 === 92 || code3 === 124
      ? (effects.consume(code3), inCellContentBody)
      : inCellContentBody(code3);
  }
  function atRowEndBody(code3) {
    return (
      effects.exit("tableRow"),
      code3 === null
        ? tableBodyClose(code3)
        : effects.check(
            nextPrefixedOrBlank,
            tableBodyClose,
            effects.attempt(
              {
                tokenize: tokenizeRowEnd,
                partial: !0,
              },
              factorySpace(effects, rowStartBody, "linePrefix", 4),
              tableBodyClose
            )
          )(code3)
    );
  }
  function tableBodyClose(code3) {
    return effects.exit("tableBody"), tableClose(code3);
  }
  function tokenizeRowEnd(effects2, ok3, nok2) {
    return start2;
    function start2(code3) {
      return (
        effects2.enter("lineEnding"),
        effects2.consume(code3),
        effects2.exit("lineEnding"),
        factorySpace(effects2, prefixed, "linePrefix")
      );
    }
    function prefixed(code3) {
      if (
        self.parser.lazy[self.now().line] ||
        code3 === null ||
        markdownLineEnding(code3)
      )
        return nok2(code3);
      let tail = self.events[self.events.length - 1];
      return !self.parser.constructs.disable.null.includes("codeIndented") &&
        tail &&
        tail[1].type === "linePrefix" &&
        tail[2].sliceSerialize(tail[1], !0).length >= 4
        ? nok2(code3)
        : ((self._gfmTableDynamicInterruptHack = !0),
          effects2.check(
            self.parser.constructs.flow,
            function (code4) {
              return (self._gfmTableDynamicInterruptHack = !1), nok2(code4);
            },
            function (code4) {
              return (self._gfmTableDynamicInterruptHack = !1), ok3(code4);
            }
          )(code3));
    }
  }
}
function tokenizeNextPrefixedOrBlank(effects, ok2, nok) {
  let size = 0;
  return start;
  function start(code3) {
    return effects.enter("check"), effects.consume(code3), whitespace2;
  }
  function whitespace2(code3) {
    return code3 === -1 || code3 === 32
      ? (effects.consume(code3), size++, size === 4 ? ok2 : whitespace2)
      : code3 === null || markdownLineEndingOrSpace(code3)
      ? ok2(code3)
      : nok(code3);
  }
}

// ../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js
var tasklistCheck = {
    tokenize: tokenizeTasklistCheck,
  },
  gfmTaskListItem = {
    text: {
      [91]: tasklistCheck,
    },
  };
function tokenizeTasklistCheck(effects, ok2, nok) {
  let self = this;
  return open;
  function open(code3) {
    return self.previous !== null || !self._gfmTasklistFirstContentOfListItem
      ? nok(code3)
      : (effects.enter("taskListCheck"),
        effects.enter("taskListCheckMarker"),
        effects.consume(code3),
        effects.exit("taskListCheckMarker"),
        inside);
  }
  function inside(code3) {
    return markdownLineEndingOrSpace(code3)
      ? (effects.enter("taskListCheckValueUnchecked"),
        effects.consume(code3),
        effects.exit("taskListCheckValueUnchecked"),
        close)
      : code3 === 88 || code3 === 120
      ? (effects.enter("taskListCheckValueChecked"),
        effects.consume(code3),
        effects.exit("taskListCheckValueChecked"),
        close)
      : nok(code3);
  }
  function close(code3) {
    return code3 === 93
      ? (effects.enter("taskListCheckMarker"),
        effects.consume(code3),
        effects.exit("taskListCheckMarker"),
        effects.exit("taskListCheck"),
        effects.check(
          {
            tokenize: spaceThenNonSpace,
          },
          ok2,
          nok
        ))
      : nok(code3);
  }
}
function spaceThenNonSpace(effects, ok2, nok) {
  let self = this;
  return factorySpace(effects, after, "whitespace");
  function after(code3) {
    let tail = self.events[self.events.length - 1];
    return ((tail && tail[1].type === "whitespace") ||
      markdownLineEnding(code3)) &&
      code3 !== null
      ? ok2(code3)
      : nok(code3);
  }
}

// ../../node_modules/micromark-extension-gfm/index.js
function gfm(options) {
  return combineExtensions([
    gfmAutolinkLiteral,
    gfmFootnote(),
    gfmStrikethrough(options),
    gfmTable,
    gfmTaskListItem,
  ]);
}

// ../../node_modules/ccount/index.js
function ccount(value, character) {
  let source2 = String(value);
  if (typeof character != "string") throw new TypeError("Expected character");
  let count = 0,
    index2 = source2.indexOf(character);
  for (; index2 !== -1; )
    count++, (index2 = source2.indexOf(character, index2 + character.length));
  return count;
}

// ../../node_modules/mdast-util-find-and-replace/index.js
var import_escape_string_regexp = __toESM(require("escape-string-regexp"), 1);
var own11 = {}.hasOwnProperty,
  findAndReplace = function (tree, find3, replace2, options) {
    let settings, schema;
    typeof find3 == "string" || find3 instanceof RegExp
      ? ((schema = [[find3, replace2]]), (settings = options))
      : ((schema = find3), (settings = replace2)),
      settings || (settings = {});
    let ignored = convert(settings.ignore || []),
      pairs = toPairs(schema),
      pairIndex = -1;
    for (; ++pairIndex < pairs.length; ) visitParents2(tree, "text", visitor);
    return tree;
    function visitor(node, parents) {
      let index2 = -1,
        grandparent;
      for (; ++index2 < parents.length; ) {
        let parent = parents[index2];
        if (
          ignored(
            parent,
            grandparent ? grandparent.children.indexOf(parent) : void 0,
            grandparent
          )
        )
          return;
        grandparent = parent;
      }
      if (grandparent) return handler2(node, grandparent);
    }
    function handler2(node, parent) {
      let find4 = pairs[pairIndex][0],
        replace3 = pairs[pairIndex][1],
        start = 0,
        index2 = parent.children.indexOf(node),
        nodes2 = [],
        position3;
      find4.lastIndex = 0;
      let match = find4.exec(node.value);
      for (; match; ) {
        position3 = match.index;
        let value = replace3(...match, {
          index: match.index,
          input: match.input,
        });
        if (
          (typeof value == "string" &&
            (value = value.length > 0 ? { type: "text", value } : void 0),
          value !== !1 &&
            (start !== position3 &&
              nodes2.push({
                type: "text",
                value: node.value.slice(start, position3),
              }),
            Array.isArray(value)
              ? nodes2.push(...value)
              : value && nodes2.push(value),
            (start = position3 + match[0].length)),
          !find4.global)
        )
          break;
        match = find4.exec(node.value);
      }
      return (
        position3 === void 0
          ? ((nodes2 = [node]), index2--)
          : (start < node.value.length &&
              nodes2.push({ type: "text", value: node.value.slice(start) }),
            parent.children.splice(index2, 1, ...nodes2)),
        index2 + nodes2.length + 1
      );
    }
  };
function toPairs(schema) {
  let result = [];
  if (typeof schema != "object")
    throw new TypeError("Expected array or object as schema");
  if (Array.isArray(schema)) {
    let index2 = -1;
    for (; ++index2 < schema.length; )
      result.push([
        toExpression(schema[index2][0]),
        toFunction(schema[index2][1]),
      ]);
  } else {
    let key;
    for (key in schema)
      own11.call(schema, key) &&
        result.push([toExpression(key), toFunction(schema[key])]);
  }
  return result;
}
function toExpression(find3) {
  return typeof find3 == "string"
    ? new RegExp((0, import_escape_string_regexp.default)(find3), "g")
    : find3;
}
function toFunction(replace2) {
  return typeof replace2 == "function" ? replace2 : () => replace2;
}

// ../../node_modules/mdast-util-gfm-autolink-literal/index.js
var inConstruct = "phrasing",
  notInConstruct = ["autolink", "link", "image", "label"],
  gfmAutolinkLiteralFromMarkdown = {
    transforms: [transformGfmAutolinkLiterals],
    enter: {
      literalAutolink: enterLiteralAutolink,
      literalAutolinkEmail: enterLiteralAutolinkValue,
      literalAutolinkHttp: enterLiteralAutolinkValue,
      literalAutolinkWww: enterLiteralAutolinkValue,
    },
    exit: {
      literalAutolink: exitLiteralAutolink,
      literalAutolinkEmail: exitLiteralAutolinkEmail,
      literalAutolinkHttp: exitLiteralAutolinkHttp,
      literalAutolinkWww: exitLiteralAutolinkWww,
    },
  },
  gfmAutolinkLiteralToMarkdown = {
    unsafe: [
      {
        character: "@",
        before: "[+\\-.\\w]",
        after: "[\\-.\\w]",
        inConstruct,
        notInConstruct,
      },
      {
        character: ".",
        before: "[Ww]",
        after: "[\\-.\\w]",
        inConstruct,
        notInConstruct,
      },
      {
        character: ":",
        before: "[ps]",
        after: "\\/",
        inConstruct,
        notInConstruct,
      },
    ],
  };
function enterLiteralAutolink(token) {
  this.enter({ type: "link", title: null, url: "", children: [] }, token);
}
function enterLiteralAutolinkValue(token) {
  this.config.enter.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkHttp(token) {
  this.config.exit.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkWww(token) {
  this.config.exit.data.call(this, token);
  let node = this.stack[this.stack.length - 1];
  node.url = "http://" + this.sliceSerialize(token);
}
function exitLiteralAutolinkEmail(token) {
  this.config.exit.autolinkEmail.call(this, token);
}
function exitLiteralAutolink(token) {
  this.exit(token);
}
function transformGfmAutolinkLiterals(tree) {
  findAndReplace(
    tree,
    [
      [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl],
      [/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g, findEmail],
    ],
    { ignore: ["link", "linkReference"] }
  );
}
function findUrl(_, protocol, domain2, path2, match) {
  let prefix = "";
  if (
    !previous3(match) ||
    (/^w/i.test(protocol) &&
      ((domain2 = protocol + domain2), (protocol = ""), (prefix = "http://")),
    !isCorrectDomain(domain2))
  )
    return !1;
  let parts = splitUrl(domain2 + path2);
  if (!parts[0]) return !1;
  let result = {
    type: "link",
    title: null,
    url: prefix + protocol + parts[0],
    children: [{ type: "text", value: protocol + parts[0] }],
  };
  return parts[1] ? [result, { type: "text", value: parts[1] }] : result;
}
function findEmail(_, atext, label, match) {
  return !previous3(match, !0) || /[_-\d]$/.test(label)
    ? !1
    : {
        type: "link",
        title: null,
        url: "mailto:" + atext + "@" + label,
        children: [{ type: "text", value: atext + "@" + label }],
      };
}
function isCorrectDomain(domain2) {
  let parts = domain2.split(".");
  return !(
    parts.length < 2 ||
    (parts[parts.length - 1] &&
      (/_/.test(parts[parts.length - 1]) ||
        !/[a-zA-Z\d]/.test(parts[parts.length - 1]))) ||
    (parts[parts.length - 2] &&
      (/_/.test(parts[parts.length - 2]) ||
        !/[a-zA-Z\d]/.test(parts[parts.length - 2])))
  );
}
function splitUrl(url) {
  let trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url),
    closingParenIndex,
    openingParens,
    closingParens,
    trail;
  if (trailExec)
    for (
      url = url.slice(0, trailExec.index),
        trail = trailExec[0],
        closingParenIndex = trail.indexOf(")"),
        openingParens = ccount(url, "("),
        closingParens = ccount(url, ")");
      closingParenIndex !== -1 && openingParens > closingParens;

    )
      (url += trail.slice(0, closingParenIndex + 1)),
        (trail = trail.slice(closingParenIndex + 1)),
        (closingParenIndex = trail.indexOf(")")),
        closingParens++;
  return [url, trail];
}
function previous3(match, email) {
  let code3 = match.input.charCodeAt(match.index - 1);
  return (
    (match.index === 0 ||
      unicodeWhitespace(code3) ||
      unicodePunctuation(code3)) &&
    (!email || code3 !== 47)
  );
}

// ../../node_modules/mdast-util-to-markdown/lib/util/association.js
function association(node) {
  return node.label || !node.identifier
    ? node.label || ""
    : decodeString(node.identifier);
}

// ../../node_modules/mdast-util-to-markdown/lib/util/container-flow.js
function containerFlow(parent, context, safeOptions) {
  let indexStack = context.indexStack,
    children = parent.children || [],
    tracker = track(safeOptions),
    results = [],
    index2 = -1;
  for (indexStack.push(-1); ++index2 < children.length; ) {
    let child = children[index2];
    (indexStack[indexStack.length - 1] = index2),
      results.push(
        tracker.move(
          context.handle(child, parent, context, {
            before: `
`,
            after: `
`,
            ...tracker.current(),
          })
        )
      ),
      child.type !== "list" && (context.bulletLastUsed = void 0),
      index2 < children.length - 1 &&
        results.push(tracker.move(between(child, children[index2 + 1])));
  }
  return indexStack.pop(), results.join("");
  function between(left, right) {
    let index3 = context.join.length;
    for (; index3--; ) {
      let result = context.join[index3](left, right, parent, context);
      if (result === !0 || result === 1) break;
      if (typeof result == "number")
        return `
`.repeat(1 + result);
      if (result === !1)
        return `

<!---->

`;
    }
    return `

`;
  }
}

// ../../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js
var eol = /\r?\n|\r/g;
function indentLines(value, map3) {
  let result = [],
    start = 0,
    line = 0,
    match;
  for (; (match = eol.exec(value)); )
    one5(value.slice(start, match.index)),
      result.push(match[0]),
      (start = match.index + match[0].length),
      line++;
  return one5(value.slice(start)), result.join("");
  function one5(value2) {
    result.push(map3(value2, line, !value2));
  }
}

// ../../node_modules/mdast-util-gfm-footnote/index.js
function gfmFootnoteFromMarkdown() {
  return {
    enter: {
      gfmFootnoteDefinition: enterFootnoteDefinition,
      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
      gfmFootnoteCall: enterFootnoteCall,
      gfmFootnoteCallString: enterFootnoteCallString,
    },
    exit: {
      gfmFootnoteDefinition: exitFootnoteDefinition,
      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
      gfmFootnoteCall: exitFootnoteCall,
      gfmFootnoteCallString: exitFootnoteCallString,
    },
  };
  function enterFootnoteDefinition(token) {
    this.enter(
      { type: "footnoteDefinition", identifier: "", label: "", children: [] },
      token
    );
  }
  function enterFootnoteDefinitionLabelString() {
    this.buffer();
  }
  function exitFootnoteDefinitionLabelString(token) {
    let label = this.resume(),
      node = this.stack[this.stack.length - 1];
    (node.label = label),
      (node.identifier = normalizeIdentifier(
        this.sliceSerialize(token)
      ).toLowerCase());
  }
  function exitFootnoteDefinition(token) {
    this.exit(token);
  }
  function enterFootnoteCall(token) {
    this.enter({ type: "footnoteReference", identifier: "", label: "" }, token);
  }
  function enterFootnoteCallString() {
    this.buffer();
  }
  function exitFootnoteCallString(token) {
    let label = this.resume(),
      node = this.stack[this.stack.length - 1];
    (node.label = label),
      (node.identifier = normalizeIdentifier(
        this.sliceSerialize(token)
      ).toLowerCase());
  }
  function exitFootnoteCall(token) {
    this.exit(token);
  }
}
function gfmFootnoteToMarkdown() {
  return (
    (footnoteReference2.peek = footnoteReferencePeek),
    {
      unsafe: [
        { character: "[", inConstruct: ["phrasing", "label", "reference"] },
      ],
      handlers: { footnoteDefinition, footnoteReference: footnoteReference2 },
    }
  );
  function footnoteReference2(node, _, context, safeOptions) {
    let tracker = track(safeOptions),
      value = tracker.move("[^"),
      exit3 = context.enter("footnoteReference"),
      subexit = context.enter("reference");
    return (
      (value += tracker.move(
        safe(context, association(node), {
          ...tracker.current(),
          before: value,
          after: "]",
        })
      )),
      subexit(),
      exit3(),
      (value += tracker.move("]")),
      value
    );
  }
  function footnoteReferencePeek() {
    return "[";
  }
  function footnoteDefinition(node, _, context, safeOptions) {
    let tracker = track(safeOptions),
      value = tracker.move("[^"),
      exit3 = context.enter("footnoteDefinition"),
      subexit = context.enter("label");
    return (
      (value += tracker.move(
        safe(context, association(node), {
          ...tracker.current(),
          before: value,
          after: "]",
        })
      )),
      subexit(),
      (value += tracker.move(
        "]:" + (node.children && node.children.length > 0 ? " " : "")
      )),
      tracker.shift(4),
      (value += tracker.move(
        indentLines(containerFlow(node, context, tracker.current()), map3)
      )),
      exit3(),
      value
    );
    function map3(line, index2, blank) {
      return index2 ? (blank ? "" : "    ") + line : line;
    }
  }
}

// ../../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js
function containerPhrasing(parent, context, safeOptions) {
  let indexStack = context.indexStack,
    children = parent.children || [],
    results = [],
    index2 = -1,
    before = safeOptions.before;
  indexStack.push(-1);
  let tracker = track(safeOptions);
  for (; ++index2 < children.length; ) {
    let child = children[index2],
      after;
    if (
      ((indexStack[indexStack.length - 1] = index2),
      index2 + 1 < children.length)
    ) {
      let handle = context.handle.handlers[children[index2 + 1].type];
      handle && handle.peek && (handle = handle.peek),
        (after = handle
          ? handle(children[index2 + 1], parent, context, {
              before: "",
              after: "",
              ...tracker.current(),
            }).charAt(0)
          : "");
    } else after = safeOptions.after;
    results.length > 0 &&
      (before === "\r" ||
        before ===
          `
`) &&
      child.type === "html" &&
      ((results[results.length - 1] = results[results.length - 1].replace(
        /(\r?\n|\r)$/,
        " "
      )),
      (before = " "),
      (tracker = track(safeOptions)),
      tracker.move(results.join(""))),
      results.push(
        tracker.move(
          context.handle(child, parent, context, {
            ...tracker.current(),
            before,
            after,
          })
        )
      ),
      (before = results[results.length - 1].slice(-1));
  }
  return indexStack.pop(), results.join("");
}

// ../../node_modules/mdast-util-gfm-strikethrough/index.js
var gfmStrikethroughFromMarkdown = {
    canContainEols: ["delete"],
    enter: { strikethrough: enterStrikethrough },
    exit: { strikethrough: exitStrikethrough },
  },
  gfmStrikethroughToMarkdown = {
    unsafe: [{ character: "~", inConstruct: "phrasing" }],
    handlers: { delete: handleDelete },
  };
handleDelete.peek = peekDelete;
function enterStrikethrough(token) {
  this.enter({ type: "delete", children: [] }, token);
}
function exitStrikethrough(token) {
  this.exit(token);
}
function handleDelete(node, _, context, safeOptions) {
  let tracker = track(safeOptions),
    exit3 = context.enter("emphasis"),
    value = tracker.move("~~");
  return (
    (value += containerPhrasing(node, context, {
      ...tracker.current(),
      before: value,
      after: "~",
    })),
    (value += tracker.move("~~")),
    exit3(),
    value
  );
}
function peekDelete() {
  return "~";
}

// ../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
inlineCode2.peek = inlineCodePeek;
function inlineCode2(node, _, context) {
  let value = node.value || "",
    sequence = "`",
    index2 = -1;
  for (; new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value); )
    sequence += "`";
  for (
    /[^ \r\n]/.test(value) &&
    ((/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value)) ||
      /^`|`$/.test(value)) &&
    (value = " " + value + " ");
    ++index2 < context.unsafe.length;

  ) {
    let pattern = context.unsafe[index2],
      expression = patternCompile(pattern),
      match;
    if (!!pattern.atBreak)
      for (; (match = expression.exec(value)); ) {
        let position3 = match.index;
        value.charCodeAt(position3) === 10 &&
          value.charCodeAt(position3 - 1) === 13 &&
          position3--,
          (value =
            value.slice(0, position3) + " " + value.slice(match.index + 1));
      }
  }
  return sequence + value + sequence;
}
function inlineCodePeek() {
  return "`";
}

// ../../node_modules/markdown-table/index.js
function markdownTable(table2, options = {}) {
  let align = (options.align || []).concat(),
    stringLength = options.stringLength || defaultStringLength,
    alignments = [],
    cellMatrix = [],
    sizeMatrix = [],
    longestCellByColumn = [],
    mostCellsPerRow = 0,
    rowIndex = -1;
  for (; ++rowIndex < table2.length; ) {
    let row3 = [],
      sizes2 = [],
      columnIndex2 = -1;
    for (
      table2[rowIndex].length > mostCellsPerRow &&
      (mostCellsPerRow = table2[rowIndex].length);
      ++columnIndex2 < table2[rowIndex].length;

    ) {
      let cell2 = serialize(table2[rowIndex][columnIndex2]);
      if (options.alignDelimiters !== !1) {
        let size = stringLength(cell2);
        (sizes2[columnIndex2] = size),
          (longestCellByColumn[columnIndex2] === void 0 ||
            size > longestCellByColumn[columnIndex2]) &&
            (longestCellByColumn[columnIndex2] = size);
      }
      row3.push(cell2);
    }
    (cellMatrix[rowIndex] = row3), (sizeMatrix[rowIndex] = sizes2);
  }
  let columnIndex = -1;
  if (typeof align == "object" && "length" in align)
    for (; ++columnIndex < mostCellsPerRow; )
      alignments[columnIndex] = toAlignment(align[columnIndex]);
  else {
    let code3 = toAlignment(align);
    for (; ++columnIndex < mostCellsPerRow; ) alignments[columnIndex] = code3;
  }
  columnIndex = -1;
  let row2 = [],
    sizes = [];
  for (; ++columnIndex < mostCellsPerRow; ) {
    let code3 = alignments[columnIndex],
      before = "",
      after = "";
    code3 === 99
      ? ((before = ":"), (after = ":"))
      : code3 === 108
      ? (before = ":")
      : code3 === 114 && (after = ":");
    let size =
        options.alignDelimiters === !1
          ? 1
          : Math.max(
              1,
              longestCellByColumn[columnIndex] - before.length - after.length
            ),
      cell2 = before + "-".repeat(size) + after;
    options.alignDelimiters !== !1 &&
      ((size = before.length + size + after.length),
      size > longestCellByColumn[columnIndex] &&
        (longestCellByColumn[columnIndex] = size),
      (sizes[columnIndex] = size)),
      (row2[columnIndex] = cell2);
  }
  cellMatrix.splice(1, 0, row2),
    sizeMatrix.splice(1, 0, sizes),
    (rowIndex = -1);
  let lines = [];
  for (; ++rowIndex < cellMatrix.length; ) {
    let row3 = cellMatrix[rowIndex],
      sizes2 = sizeMatrix[rowIndex];
    columnIndex = -1;
    let line = [];
    for (; ++columnIndex < mostCellsPerRow; ) {
      let cell2 = row3[columnIndex] || "",
        before = "",
        after = "";
      if (options.alignDelimiters !== !1) {
        let size =
            longestCellByColumn[columnIndex] - (sizes2[columnIndex] || 0),
          code3 = alignments[columnIndex];
        code3 === 114
          ? (before = " ".repeat(size))
          : code3 === 99
          ? size % 2
            ? ((before = " ".repeat(size / 2 + 0.5)),
              (after = " ".repeat(size / 2 - 0.5)))
            : ((before = " ".repeat(size / 2)), (after = before))
          : (after = " ".repeat(size));
      }
      options.delimiterStart !== !1 && !columnIndex && line.push("|"),
        options.padding !== !1 &&
          !(options.alignDelimiters === !1 && cell2 === "") &&
          (options.delimiterStart !== !1 || columnIndex) &&
          line.push(" "),
        options.alignDelimiters !== !1 && line.push(before),
        line.push(cell2),
        options.alignDelimiters !== !1 && line.push(after),
        options.padding !== !1 && line.push(" "),
        (options.delimiterEnd !== !1 || columnIndex !== mostCellsPerRow - 1) &&
          line.push("|");
    }
    lines.push(
      options.delimiterEnd === !1
        ? line.join("").replace(/ +$/, "")
        : line.join("")
    );
  }
  return lines.join(`
`);
}
function serialize(value) {
  return value == null ? "" : String(value);
}
function defaultStringLength(value) {
  return value.length;
}
function toAlignment(value) {
  let code3 = typeof value == "string" ? value.codePointAt(0) : 0;
  return code3 === 67 || code3 === 99
    ? 99
    : code3 === 76 || code3 === 108
    ? 108
    : code3 === 82 || code3 === 114
    ? 114
    : 0;
}

// ../../node_modules/mdast-util-gfm-table/lib/index.js
var gfmTableFromMarkdown = {
  enter: {
    table: enterTable,
    tableData: enterCell,
    tableHeader: enterCell,
    tableRow: enterRow,
  },
  exit: {
    codeText: exitCodeText,
    table: exitTable,
    tableData: exit2,
    tableHeader: exit2,
    tableRow: exit2,
  },
};
function enterTable(token) {
  let align = token._align;
  this.enter(
    {
      type: "table",
      align: align.map((d) => (d === "none" ? null : d)),
      children: [],
    },
    token
  ),
    this.setData("inTable", !0);
}
function exitTable(token) {
  this.exit(token), this.setData("inTable");
}
function enterRow(token) {
  this.enter({ type: "tableRow", children: [] }, token);
}
function exit2(token) {
  this.exit(token);
}
function enterCell(token) {
  this.enter({ type: "tableCell", children: [] }, token);
}
function exitCodeText(token) {
  let value = this.resume();
  this.getData("inTable") && (value = value.replace(/\\([\\|])/g, replace));
  let node = this.stack[this.stack.length - 1];
  (node.value = value), this.exit(token);
}
function replace($0, $1) {
  return $1 === "|" ? $1 : $0;
}
function gfmTableToMarkdown(options) {
  let settings = options || {},
    padding = settings.tableCellPadding,
    alignDelimiters = settings.tablePipeAlign,
    stringLength = settings.stringLength,
    around = padding ? " " : "|";
  return {
    unsafe: [
      { character: "\r", inConstruct: "tableCell" },
      {
        character: `
`,
        inConstruct: "tableCell",
      },
      { atBreak: !0, character: "|", after: "[	 :-]" },
      { character: "|", inConstruct: "tableCell" },
      { atBreak: !0, character: ":", after: "-" },
      { atBreak: !0, character: "-", after: "[:|-]" },
    ],
    handlers: {
      table: handleTable,
      tableRow: handleTableRow,
      tableCell: handleTableCell,
      inlineCode: inlineCodeWithTable,
    },
  };
  function handleTable(node, _, context, safeOptions) {
    return serializeData(
      handleTableAsData(node, context, safeOptions),
      node.align
    );
  }
  function handleTableRow(node, _, context, safeOptions) {
    let row2 = handleTableRowAsData(node, context, safeOptions),
      value = serializeData([row2]);
    return value.slice(
      0,
      value.indexOf(`
`)
    );
  }
  function handleTableCell(node, _, context, safeOptions) {
    let exit3 = context.enter("tableCell"),
      subexit = context.enter("phrasing"),
      value = containerPhrasing(node, context, {
        ...safeOptions,
        before: around,
        after: around,
      });
    return subexit(), exit3(), value;
  }
  function serializeData(matrix, align) {
    return markdownTable(matrix, {
      align,
      alignDelimiters,
      padding,
      stringLength,
    });
  }
  function handleTableAsData(node, context, safeOptions) {
    let children = node.children,
      index2 = -1,
      result = [],
      subexit = context.enter("table");
    for (; ++index2 < children.length; )
      result[index2] = handleTableRowAsData(
        children[index2],
        context,
        safeOptions
      );
    return subexit(), result;
  }
  function handleTableRowAsData(node, context, safeOptions) {
    let children = node.children,
      index2 = -1,
      result = [],
      subexit = context.enter("tableRow");
    for (; ++index2 < children.length; )
      result[index2] = handleTableCell(
        children[index2],
        node,
        context,
        safeOptions
      );
    return subexit(), result;
  }
  function inlineCodeWithTable(node, parent, context) {
    let value = inlineCode2(node, parent, context);
    return (
      context.stack.includes("tableCell") &&
        (value = value.replace(/\|/g, "\\$&")),
      value
    );
  }
}

// ../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
function checkBullet(context) {
  let marker = context.options.bullet || "*";
  if (marker !== "*" && marker !== "+" && marker !== "-")
    throw new Error(
      "Cannot serialize items with `" +
        marker +
        "` for `options.bullet`, expected `*`, `+`, or `-`"
    );
  return marker;
}

// ../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
function checkListItemIndent(context) {
  let style4 = context.options.listItemIndent || "tab";
  if (style4 === 1 || style4 === "1") return "one";
  if (style4 !== "tab" && style4 !== "one" && style4 !== "mixed")
    throw new Error(
      "Cannot serialize items with `" +
        style4 +
        "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
    );
  return style4;
}

// ../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js
function listItem2(node, parent, context, safeOptions) {
  let listItemIndent = checkListItemIndent(context),
    bullet = context.bulletCurrent || checkBullet(context);
  parent &&
    parent.type === "list" &&
    parent.ordered &&
    (bullet =
      (typeof parent.start == "number" && parent.start > -1
        ? parent.start
        : 1) +
      (context.options.incrementListMarker === !1
        ? 0
        : parent.children.indexOf(node)) +
      bullet);
  let size = bullet.length + 1;
  (listItemIndent === "tab" ||
    (listItemIndent === "mixed" &&
      ((parent && parent.type === "list" && parent.spread) || node.spread))) &&
    (size = Math.ceil(size / 4) * 4);
  let tracker = track(safeOptions);
  tracker.move(bullet + " ".repeat(size - bullet.length)), tracker.shift(size);
  let exit3 = context.enter("listItem"),
    value = indentLines(containerFlow(node, context, tracker.current()), map3);
  return exit3(), value;
  function map3(line, index2, blank) {
    return index2
      ? (blank ? "" : " ".repeat(size)) + line
      : (blank ? bullet : bullet + " ".repeat(size - bullet.length)) + line;
  }
}

// ../../node_modules/mdast-util-gfm-task-list-item/index.js
var gfmTaskListItemFromMarkdown = {
    exit: {
      taskListCheckValueChecked: exitCheck,
      taskListCheckValueUnchecked: exitCheck,
      paragraph: exitParagraphWithTaskListItem,
    },
  },
  gfmTaskListItemToMarkdown = {
    unsafe: [{ atBreak: !0, character: "-", after: "[:|-]" }],
    handlers: { listItem: listItemWithTaskListItem },
  };
function exitCheck(token) {
  let node = this.stack[this.stack.length - 2];
  node.checked = token.type === "taskListCheckValueChecked";
}
function exitParagraphWithTaskListItem(token) {
  let parent = this.stack[this.stack.length - 2],
    node = this.stack[this.stack.length - 1],
    siblings = parent.children,
    head = node.children[0],
    index2 = -1,
    firstParaghraph;
  if (
    parent &&
    parent.type === "listItem" &&
    typeof parent.checked == "boolean" &&
    head &&
    head.type === "text"
  ) {
    for (; ++index2 < siblings.length; ) {
      let sibling = siblings[index2];
      if (sibling.type === "paragraph") {
        firstParaghraph = sibling;
        break;
      }
    }
    firstParaghraph === node &&
      ((head.value = head.value.slice(1)),
      head.value.length === 0
        ? node.children.shift()
        : node.position &&
          head.position &&
          typeof head.position.start.offset == "number" &&
          (head.position.start.column++,
          head.position.start.offset++,
          (node.position.start = Object.assign({}, head.position.start))));
  }
  this.exit(token);
}
function listItemWithTaskListItem(node, parent, context, safeOptions) {
  let head = node.children[0],
    checkable =
      typeof node.checked == "boolean" && head && head.type === "paragraph",
    checkbox = "[" + (node.checked ? "x" : " ") + "] ",
    tracker = track(safeOptions);
  checkable && tracker.move(checkbox);
  let value = listItem2(node, parent, context, {
    ...safeOptions,
    ...tracker.current(),
  });
  return (
    checkable &&
      (value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check)),
    value
  );
  function check($0) {
    return $0 + checkbox;
  }
}

// ../../node_modules/mdast-util-gfm/lib/index.js
function gfmFromMarkdown() {
  return [
    gfmAutolinkLiteralFromMarkdown,
    gfmFootnoteFromMarkdown(),
    gfmStrikethroughFromMarkdown,
    gfmTableFromMarkdown,
    gfmTaskListItemFromMarkdown,
  ];
}
function gfmToMarkdown(options) {
  return {
    extensions: [
      gfmAutolinkLiteralToMarkdown,
      gfmFootnoteToMarkdown(),
      gfmStrikethroughToMarkdown,
      gfmTableToMarkdown(options),
      gfmTaskListItemToMarkdown,
    ],
  };
}

// ../../node_modules/remark-gfm/index.js
function remarkGfm(options = {}) {
  let data2 = this.data();
  add("micromarkExtensions", gfm(options)),
    add("fromMarkdownExtensions", gfmFromMarkdown()),
    add("toMarkdownExtensions", gfmToMarkdown(options));
  function add(field, value) {
    (data2[field] ? data2[field] : (data2[field] = [])).push(value);
  }
}

// ../../node_modules/gemoji/index.js
var nameToEmoji = {
  100: "\u{1F4AF}",
  1234: "\u{1F522}",
  grinning: "\u{1F600}",
  smiley: "\u{1F603}",
  smile: "\u{1F604}",
  grin: "\u{1F601}",
  laughing: "\u{1F606}",
  satisfied: "\u{1F606}",
  sweat_smile: "\u{1F605}",
  rofl: "\u{1F923}",
  joy: "\u{1F602}",
  slightly_smiling_face: "\u{1F642}",
  upside_down_face: "\u{1F643}",
  wink: "\u{1F609}",
  blush: "\u{1F60A}",
  innocent: "\u{1F607}",
  smiling_face_with_three_hearts: "\u{1F970}",
  heart_eyes: "\u{1F60D}",
  star_struck: "\u{1F929}",
  kissing_heart: "\u{1F618}",
  kissing: "\u{1F617}",
  relaxed: "\u263A\uFE0F",
  kissing_closed_eyes: "\u{1F61A}",
  kissing_smiling_eyes: "\u{1F619}",
  smiling_face_with_tear: "\u{1F972}",
  yum: "\u{1F60B}",
  stuck_out_tongue: "\u{1F61B}",
  stuck_out_tongue_winking_eye: "\u{1F61C}",
  zany_face: "\u{1F92A}",
  stuck_out_tongue_closed_eyes: "\u{1F61D}",
  money_mouth_face: "\u{1F911}",
  hugs: "\u{1F917}",
  hand_over_mouth: "\u{1F92D}",
  shushing_face: "\u{1F92B}",
  thinking: "\u{1F914}",
  zipper_mouth_face: "\u{1F910}",
  raised_eyebrow: "\u{1F928}",
  neutral_face: "\u{1F610}",
  expressionless: "\u{1F611}",
  no_mouth: "\u{1F636}",
  face_in_clouds: "\u{1F636}\u200D\u{1F32B}\uFE0F",
  smirk: "\u{1F60F}",
  unamused: "\u{1F612}",
  roll_eyes: "\u{1F644}",
  grimacing: "\u{1F62C}",
  face_exhaling: "\u{1F62E}\u200D\u{1F4A8}",
  lying_face: "\u{1F925}",
  relieved: "\u{1F60C}",
  pensive: "\u{1F614}",
  sleepy: "\u{1F62A}",
  drooling_face: "\u{1F924}",
  sleeping: "\u{1F634}",
  mask: "\u{1F637}",
  face_with_thermometer: "\u{1F912}",
  face_with_head_bandage: "\u{1F915}",
  nauseated_face: "\u{1F922}",
  vomiting_face: "\u{1F92E}",
  sneezing_face: "\u{1F927}",
  hot_face: "\u{1F975}",
  cold_face: "\u{1F976}",
  woozy_face: "\u{1F974}",
  dizzy_face: "\u{1F635}",
  face_with_spiral_eyes: "\u{1F635}\u200D\u{1F4AB}",
  exploding_head: "\u{1F92F}",
  cowboy_hat_face: "\u{1F920}",
  partying_face: "\u{1F973}",
  disguised_face: "\u{1F978}",
  sunglasses: "\u{1F60E}",
  nerd_face: "\u{1F913}",
  monocle_face: "\u{1F9D0}",
  confused: "\u{1F615}",
  worried: "\u{1F61F}",
  slightly_frowning_face: "\u{1F641}",
  frowning_face: "\u2639\uFE0F",
  open_mouth: "\u{1F62E}",
  hushed: "\u{1F62F}",
  astonished: "\u{1F632}",
  flushed: "\u{1F633}",
  pleading_face: "\u{1F97A}",
  frowning: "\u{1F626}",
  anguished: "\u{1F627}",
  fearful: "\u{1F628}",
  cold_sweat: "\u{1F630}",
  disappointed_relieved: "\u{1F625}",
  cry: "\u{1F622}",
  sob: "\u{1F62D}",
  scream: "\u{1F631}",
  confounded: "\u{1F616}",
  persevere: "\u{1F623}",
  disappointed: "\u{1F61E}",
  sweat: "\u{1F613}",
  weary: "\u{1F629}",
  tired_face: "\u{1F62B}",
  yawning_face: "\u{1F971}",
  triumph: "\u{1F624}",
  rage: "\u{1F621}",
  pout: "\u{1F621}",
  angry: "\u{1F620}",
  cursing_face: "\u{1F92C}",
  smiling_imp: "\u{1F608}",
  imp: "\u{1F47F}",
  skull: "\u{1F480}",
  skull_and_crossbones: "\u2620\uFE0F",
  hankey: "\u{1F4A9}",
  poop: "\u{1F4A9}",
  shit: "\u{1F4A9}",
  clown_face: "\u{1F921}",
  japanese_ogre: "\u{1F479}",
  japanese_goblin: "\u{1F47A}",
  ghost: "\u{1F47B}",
  alien: "\u{1F47D}",
  space_invader: "\u{1F47E}",
  robot: "\u{1F916}",
  smiley_cat: "\u{1F63A}",
  smile_cat: "\u{1F638}",
  joy_cat: "\u{1F639}",
  heart_eyes_cat: "\u{1F63B}",
  smirk_cat: "\u{1F63C}",
  kissing_cat: "\u{1F63D}",
  scream_cat: "\u{1F640}",
  crying_cat_face: "\u{1F63F}",
  pouting_cat: "\u{1F63E}",
  see_no_evil: "\u{1F648}",
  hear_no_evil: "\u{1F649}",
  speak_no_evil: "\u{1F64A}",
  kiss: "\u{1F48B}",
  love_letter: "\u{1F48C}",
  cupid: "\u{1F498}",
  gift_heart: "\u{1F49D}",
  sparkling_heart: "\u{1F496}",
  heartpulse: "\u{1F497}",
  heartbeat: "\u{1F493}",
  revolving_hearts: "\u{1F49E}",
  two_hearts: "\u{1F495}",
  heart_decoration: "\u{1F49F}",
  heavy_heart_exclamation: "\u2763\uFE0F",
  broken_heart: "\u{1F494}",
  heart_on_fire: "\u2764\uFE0F\u200D\u{1F525}",
  mending_heart: "\u2764\uFE0F\u200D\u{1FA79}",
  heart: "\u2764\uFE0F",
  orange_heart: "\u{1F9E1}",
  yellow_heart: "\u{1F49B}",
  green_heart: "\u{1F49A}",
  blue_heart: "\u{1F499}",
  purple_heart: "\u{1F49C}",
  brown_heart: "\u{1F90E}",
  black_heart: "\u{1F5A4}",
  white_heart: "\u{1F90D}",
  anger: "\u{1F4A2}",
  boom: "\u{1F4A5}",
  collision: "\u{1F4A5}",
  dizzy: "\u{1F4AB}",
  sweat_drops: "\u{1F4A6}",
  dash: "\u{1F4A8}",
  hole: "\u{1F573}\uFE0F",
  bomb: "\u{1F4A3}",
  speech_balloon: "\u{1F4AC}",
  eye_speech_bubble: "\u{1F441}\uFE0F\u200D\u{1F5E8}\uFE0F",
  left_speech_bubble: "\u{1F5E8}\uFE0F",
  right_anger_bubble: "\u{1F5EF}\uFE0F",
  thought_balloon: "\u{1F4AD}",
  zzz: "\u{1F4A4}",
  wave: "\u{1F44B}",
  raised_back_of_hand: "\u{1F91A}",
  raised_hand_with_fingers_splayed: "\u{1F590}\uFE0F",
  hand: "\u270B",
  raised_hand: "\u270B",
  vulcan_salute: "\u{1F596}",
  ok_hand: "\u{1F44C}",
  pinched_fingers: "\u{1F90C}",
  pinching_hand: "\u{1F90F}",
  v: "\u270C\uFE0F",
  crossed_fingers: "\u{1F91E}",
  love_you_gesture: "\u{1F91F}",
  metal: "\u{1F918}",
  call_me_hand: "\u{1F919}",
  point_left: "\u{1F448}",
  point_right: "\u{1F449}",
  point_up_2: "\u{1F446}",
  middle_finger: "\u{1F595}",
  fu: "\u{1F595}",
  point_down: "\u{1F447}",
  point_up: "\u261D\uFE0F",
  "+1": "\u{1F44D}",
  thumbsup: "\u{1F44D}",
  "-1": "\u{1F44E}",
  thumbsdown: "\u{1F44E}",
  fist_raised: "\u270A",
  fist: "\u270A",
  fist_oncoming: "\u{1F44A}",
  facepunch: "\u{1F44A}",
  punch: "\u{1F44A}",
  fist_left: "\u{1F91B}",
  fist_right: "\u{1F91C}",
  clap: "\u{1F44F}",
  raised_hands: "\u{1F64C}",
  open_hands: "\u{1F450}",
  palms_up_together: "\u{1F932}",
  handshake: "\u{1F91D}",
  pray: "\u{1F64F}",
  writing_hand: "\u270D\uFE0F",
  nail_care: "\u{1F485}",
  selfie: "\u{1F933}",
  muscle: "\u{1F4AA}",
  mechanical_arm: "\u{1F9BE}",
  mechanical_leg: "\u{1F9BF}",
  leg: "\u{1F9B5}",
  foot: "\u{1F9B6}",
  ear: "\u{1F442}",
  ear_with_hearing_aid: "\u{1F9BB}",
  nose: "\u{1F443}",
  brain: "\u{1F9E0}",
  anatomical_heart: "\u{1FAC0}",
  lungs: "\u{1FAC1}",
  tooth: "\u{1F9B7}",
  bone: "\u{1F9B4}",
  eyes: "\u{1F440}",
  eye: "\u{1F441}\uFE0F",
  tongue: "\u{1F445}",
  lips: "\u{1F444}",
  baby: "\u{1F476}",
  child: "\u{1F9D2}",
  boy: "\u{1F466}",
  girl: "\u{1F467}",
  adult: "\u{1F9D1}",
  blond_haired_person: "\u{1F471}",
  man: "\u{1F468}",
  bearded_person: "\u{1F9D4}",
  man_beard: "\u{1F9D4}\u200D\u2642\uFE0F",
  woman_beard: "\u{1F9D4}\u200D\u2640\uFE0F",
  red_haired_man: "\u{1F468}\u200D\u{1F9B0}",
  curly_haired_man: "\u{1F468}\u200D\u{1F9B1}",
  white_haired_man: "\u{1F468}\u200D\u{1F9B3}",
  bald_man: "\u{1F468}\u200D\u{1F9B2}",
  woman: "\u{1F469}",
  red_haired_woman: "\u{1F469}\u200D\u{1F9B0}",
  person_red_hair: "\u{1F9D1}\u200D\u{1F9B0}",
  curly_haired_woman: "\u{1F469}\u200D\u{1F9B1}",
  person_curly_hair: "\u{1F9D1}\u200D\u{1F9B1}",
  white_haired_woman: "\u{1F469}\u200D\u{1F9B3}",
  person_white_hair: "\u{1F9D1}\u200D\u{1F9B3}",
  bald_woman: "\u{1F469}\u200D\u{1F9B2}",
  person_bald: "\u{1F9D1}\u200D\u{1F9B2}",
  blond_haired_woman: "\u{1F471}\u200D\u2640\uFE0F",
  blonde_woman: "\u{1F471}\u200D\u2640\uFE0F",
  blond_haired_man: "\u{1F471}\u200D\u2642\uFE0F",
  older_adult: "\u{1F9D3}",
  older_man: "\u{1F474}",
  older_woman: "\u{1F475}",
  frowning_person: "\u{1F64D}",
  frowning_man: "\u{1F64D}\u200D\u2642\uFE0F",
  frowning_woman: "\u{1F64D}\u200D\u2640\uFE0F",
  pouting_face: "\u{1F64E}",
  pouting_man: "\u{1F64E}\u200D\u2642\uFE0F",
  pouting_woman: "\u{1F64E}\u200D\u2640\uFE0F",
  no_good: "\u{1F645}",
  no_good_man: "\u{1F645}\u200D\u2642\uFE0F",
  ng_man: "\u{1F645}\u200D\u2642\uFE0F",
  no_good_woman: "\u{1F645}\u200D\u2640\uFE0F",
  ng_woman: "\u{1F645}\u200D\u2640\uFE0F",
  ok_person: "\u{1F646}",
  ok_man: "\u{1F646}\u200D\u2642\uFE0F",
  ok_woman: "\u{1F646}\u200D\u2640\uFE0F",
  tipping_hand_person: "\u{1F481}",
  information_desk_person: "\u{1F481}",
  tipping_hand_man: "\u{1F481}\u200D\u2642\uFE0F",
  sassy_man: "\u{1F481}\u200D\u2642\uFE0F",
  tipping_hand_woman: "\u{1F481}\u200D\u2640\uFE0F",
  sassy_woman: "\u{1F481}\u200D\u2640\uFE0F",
  raising_hand: "\u{1F64B}",
  raising_hand_man: "\u{1F64B}\u200D\u2642\uFE0F",
  raising_hand_woman: "\u{1F64B}\u200D\u2640\uFE0F",
  deaf_person: "\u{1F9CF}",
  deaf_man: "\u{1F9CF}\u200D\u2642\uFE0F",
  deaf_woman: "\u{1F9CF}\u200D\u2640\uFE0F",
  bow: "\u{1F647}",
  bowing_man: "\u{1F647}\u200D\u2642\uFE0F",
  bowing_woman: "\u{1F647}\u200D\u2640\uFE0F",
  facepalm: "\u{1F926}",
  man_facepalming: "\u{1F926}\u200D\u2642\uFE0F",
  woman_facepalming: "\u{1F926}\u200D\u2640\uFE0F",
  shrug: "\u{1F937}",
  man_shrugging: "\u{1F937}\u200D\u2642\uFE0F",
  woman_shrugging: "\u{1F937}\u200D\u2640\uFE0F",
  health_worker: "\u{1F9D1}\u200D\u2695\uFE0F",
  man_health_worker: "\u{1F468}\u200D\u2695\uFE0F",
  woman_health_worker: "\u{1F469}\u200D\u2695\uFE0F",
  student: "\u{1F9D1}\u200D\u{1F393}",
  man_student: "\u{1F468}\u200D\u{1F393}",
  woman_student: "\u{1F469}\u200D\u{1F393}",
  teacher: "\u{1F9D1}\u200D\u{1F3EB}",
  man_teacher: "\u{1F468}\u200D\u{1F3EB}",
  woman_teacher: "\u{1F469}\u200D\u{1F3EB}",
  judge: "\u{1F9D1}\u200D\u2696\uFE0F",
  man_judge: "\u{1F468}\u200D\u2696\uFE0F",
  woman_judge: "\u{1F469}\u200D\u2696\uFE0F",
  farmer: "\u{1F9D1}\u200D\u{1F33E}",
  man_farmer: "\u{1F468}\u200D\u{1F33E}",
  woman_farmer: "\u{1F469}\u200D\u{1F33E}",
  cook: "\u{1F9D1}\u200D\u{1F373}",
  man_cook: "\u{1F468}\u200D\u{1F373}",
  woman_cook: "\u{1F469}\u200D\u{1F373}",
  mechanic: "\u{1F9D1}\u200D\u{1F527}",
  man_mechanic: "\u{1F468}\u200D\u{1F527}",
  woman_mechanic: "\u{1F469}\u200D\u{1F527}",
  factory_worker: "\u{1F9D1}\u200D\u{1F3ED}",
  man_factory_worker: "\u{1F468}\u200D\u{1F3ED}",
  woman_factory_worker: "\u{1F469}\u200D\u{1F3ED}",
  office_worker: "\u{1F9D1}\u200D\u{1F4BC}",
  man_office_worker: "\u{1F468}\u200D\u{1F4BC}",
  woman_office_worker: "\u{1F469}\u200D\u{1F4BC}",
  scientist: "\u{1F9D1}\u200D\u{1F52C}",
  man_scientist: "\u{1F468}\u200D\u{1F52C}",
  woman_scientist: "\u{1F469}\u200D\u{1F52C}",
  technologist: "\u{1F9D1}\u200D\u{1F4BB}",
  man_technologist: "\u{1F468}\u200D\u{1F4BB}",
  woman_technologist: "\u{1F469}\u200D\u{1F4BB}",
  singer: "\u{1F9D1}\u200D\u{1F3A4}",
  man_singer: "\u{1F468}\u200D\u{1F3A4}",
  woman_singer: "\u{1F469}\u200D\u{1F3A4}",
  artist: "\u{1F9D1}\u200D\u{1F3A8}",
  man_artist: "\u{1F468}\u200D\u{1F3A8}",
  woman_artist: "\u{1F469}\u200D\u{1F3A8}",
  pilot: "\u{1F9D1}\u200D\u2708\uFE0F",
  man_pilot: "\u{1F468}\u200D\u2708\uFE0F",
  woman_pilot: "\u{1F469}\u200D\u2708\uFE0F",
  astronaut: "\u{1F9D1}\u200D\u{1F680}",
  man_astronaut: "\u{1F468}\u200D\u{1F680}",
  woman_astronaut: "\u{1F469}\u200D\u{1F680}",
  firefighter: "\u{1F9D1}\u200D\u{1F692}",
  man_firefighter: "\u{1F468}\u200D\u{1F692}",
  woman_firefighter: "\u{1F469}\u200D\u{1F692}",
  police_officer: "\u{1F46E}",
  cop: "\u{1F46E}",
  policeman: "\u{1F46E}\u200D\u2642\uFE0F",
  policewoman: "\u{1F46E}\u200D\u2640\uFE0F",
  detective: "\u{1F575}\uFE0F",
  male_detective: "\u{1F575}\uFE0F\u200D\u2642\uFE0F",
  female_detective: "\u{1F575}\uFE0F\u200D\u2640\uFE0F",
  guard: "\u{1F482}",
  guardsman: "\u{1F482}\u200D\u2642\uFE0F",
  guardswoman: "\u{1F482}\u200D\u2640\uFE0F",
  ninja: "\u{1F977}",
  construction_worker: "\u{1F477}",
  construction_worker_man: "\u{1F477}\u200D\u2642\uFE0F",
  construction_worker_woman: "\u{1F477}\u200D\u2640\uFE0F",
  prince: "\u{1F934}",
  princess: "\u{1F478}",
  person_with_turban: "\u{1F473}",
  man_with_turban: "\u{1F473}\u200D\u2642\uFE0F",
  woman_with_turban: "\u{1F473}\u200D\u2640\uFE0F",
  man_with_gua_pi_mao: "\u{1F472}",
  woman_with_headscarf: "\u{1F9D5}",
  person_in_tuxedo: "\u{1F935}",
  man_in_tuxedo: "\u{1F935}\u200D\u2642\uFE0F",
  woman_in_tuxedo: "\u{1F935}\u200D\u2640\uFE0F",
  person_with_veil: "\u{1F470}",
  man_with_veil: "\u{1F470}\u200D\u2642\uFE0F",
  woman_with_veil: "\u{1F470}\u200D\u2640\uFE0F",
  bride_with_veil: "\u{1F470}\u200D\u2640\uFE0F",
  pregnant_woman: "\u{1F930}",
  breast_feeding: "\u{1F931}",
  woman_feeding_baby: "\u{1F469}\u200D\u{1F37C}",
  man_feeding_baby: "\u{1F468}\u200D\u{1F37C}",
  person_feeding_baby: "\u{1F9D1}\u200D\u{1F37C}",
  angel: "\u{1F47C}",
  santa: "\u{1F385}",
  mrs_claus: "\u{1F936}",
  mx_claus: "\u{1F9D1}\u200D\u{1F384}",
  superhero: "\u{1F9B8}",
  superhero_man: "\u{1F9B8}\u200D\u2642\uFE0F",
  superhero_woman: "\u{1F9B8}\u200D\u2640\uFE0F",
  supervillain: "\u{1F9B9}",
  supervillain_man: "\u{1F9B9}\u200D\u2642\uFE0F",
  supervillain_woman: "\u{1F9B9}\u200D\u2640\uFE0F",
  mage: "\u{1F9D9}",
  mage_man: "\u{1F9D9}\u200D\u2642\uFE0F",
  mage_woman: "\u{1F9D9}\u200D\u2640\uFE0F",
  fairy: "\u{1F9DA}",
  fairy_man: "\u{1F9DA}\u200D\u2642\uFE0F",
  fairy_woman: "\u{1F9DA}\u200D\u2640\uFE0F",
  vampire: "\u{1F9DB}",
  vampire_man: "\u{1F9DB}\u200D\u2642\uFE0F",
  vampire_woman: "\u{1F9DB}\u200D\u2640\uFE0F",
  merperson: "\u{1F9DC}",
  merman: "\u{1F9DC}\u200D\u2642\uFE0F",
  mermaid: "\u{1F9DC}\u200D\u2640\uFE0F",
  elf: "\u{1F9DD}",
  elf_man: "\u{1F9DD}\u200D\u2642\uFE0F",
  elf_woman: "\u{1F9DD}\u200D\u2640\uFE0F",
  genie: "\u{1F9DE}",
  genie_man: "\u{1F9DE}\u200D\u2642\uFE0F",
  genie_woman: "\u{1F9DE}\u200D\u2640\uFE0F",
  zombie: "\u{1F9DF}",
  zombie_man: "\u{1F9DF}\u200D\u2642\uFE0F",
  zombie_woman: "\u{1F9DF}\u200D\u2640\uFE0F",
  massage: "\u{1F486}",
  massage_man: "\u{1F486}\u200D\u2642\uFE0F",
  massage_woman: "\u{1F486}\u200D\u2640\uFE0F",
  haircut: "\u{1F487}",
  haircut_man: "\u{1F487}\u200D\u2642\uFE0F",
  haircut_woman: "\u{1F487}\u200D\u2640\uFE0F",
  walking: "\u{1F6B6}",
  walking_man: "\u{1F6B6}\u200D\u2642\uFE0F",
  walking_woman: "\u{1F6B6}\u200D\u2640\uFE0F",
  standing_person: "\u{1F9CD}",
  standing_man: "\u{1F9CD}\u200D\u2642\uFE0F",
  standing_woman: "\u{1F9CD}\u200D\u2640\uFE0F",
  kneeling_person: "\u{1F9CE}",
  kneeling_man: "\u{1F9CE}\u200D\u2642\uFE0F",
  kneeling_woman: "\u{1F9CE}\u200D\u2640\uFE0F",
  person_with_probing_cane: "\u{1F9D1}\u200D\u{1F9AF}",
  man_with_probing_cane: "\u{1F468}\u200D\u{1F9AF}",
  woman_with_probing_cane: "\u{1F469}\u200D\u{1F9AF}",
  person_in_motorized_wheelchair: "\u{1F9D1}\u200D\u{1F9BC}",
  man_in_motorized_wheelchair: "\u{1F468}\u200D\u{1F9BC}",
  woman_in_motorized_wheelchair: "\u{1F469}\u200D\u{1F9BC}",
  person_in_manual_wheelchair: "\u{1F9D1}\u200D\u{1F9BD}",
  man_in_manual_wheelchair: "\u{1F468}\u200D\u{1F9BD}",
  woman_in_manual_wheelchair: "\u{1F469}\u200D\u{1F9BD}",
  runner: "\u{1F3C3}",
  running: "\u{1F3C3}",
  running_man: "\u{1F3C3}\u200D\u2642\uFE0F",
  running_woman: "\u{1F3C3}\u200D\u2640\uFE0F",
  woman_dancing: "\u{1F483}",
  dancer: "\u{1F483}",
  man_dancing: "\u{1F57A}",
  business_suit_levitating: "\u{1F574}\uFE0F",
  dancers: "\u{1F46F}",
  dancing_men: "\u{1F46F}\u200D\u2642\uFE0F",
  dancing_women: "\u{1F46F}\u200D\u2640\uFE0F",
  sauna_person: "\u{1F9D6}",
  sauna_man: "\u{1F9D6}\u200D\u2642\uFE0F",
  sauna_woman: "\u{1F9D6}\u200D\u2640\uFE0F",
  climbing: "\u{1F9D7}",
  climbing_man: "\u{1F9D7}\u200D\u2642\uFE0F",
  climbing_woman: "\u{1F9D7}\u200D\u2640\uFE0F",
  person_fencing: "\u{1F93A}",
  horse_racing: "\u{1F3C7}",
  skier: "\u26F7\uFE0F",
  snowboarder: "\u{1F3C2}",
  golfing: "\u{1F3CC}\uFE0F",
  golfing_man: "\u{1F3CC}\uFE0F\u200D\u2642\uFE0F",
  golfing_woman: "\u{1F3CC}\uFE0F\u200D\u2640\uFE0F",
  surfer: "\u{1F3C4}",
  surfing_man: "\u{1F3C4}\u200D\u2642\uFE0F",
  surfing_woman: "\u{1F3C4}\u200D\u2640\uFE0F",
  rowboat: "\u{1F6A3}",
  rowing_man: "\u{1F6A3}\u200D\u2642\uFE0F",
  rowing_woman: "\u{1F6A3}\u200D\u2640\uFE0F",
  swimmer: "\u{1F3CA}",
  swimming_man: "\u{1F3CA}\u200D\u2642\uFE0F",
  swimming_woman: "\u{1F3CA}\u200D\u2640\uFE0F",
  bouncing_ball_person: "\u26F9\uFE0F",
  bouncing_ball_man: "\u26F9\uFE0F\u200D\u2642\uFE0F",
  basketball_man: "\u26F9\uFE0F\u200D\u2642\uFE0F",
  bouncing_ball_woman: "\u26F9\uFE0F\u200D\u2640\uFE0F",
  basketball_woman: "\u26F9\uFE0F\u200D\u2640\uFE0F",
  weight_lifting: "\u{1F3CB}\uFE0F",
  weight_lifting_man: "\u{1F3CB}\uFE0F\u200D\u2642\uFE0F",
  weight_lifting_woman: "\u{1F3CB}\uFE0F\u200D\u2640\uFE0F",
  bicyclist: "\u{1F6B4}",
  biking_man: "\u{1F6B4}\u200D\u2642\uFE0F",
  biking_woman: "\u{1F6B4}\u200D\u2640\uFE0F",
  mountain_bicyclist: "\u{1F6B5}",
  mountain_biking_man: "\u{1F6B5}\u200D\u2642\uFE0F",
  mountain_biking_woman: "\u{1F6B5}\u200D\u2640\uFE0F",
  cartwheeling: "\u{1F938}",
  man_cartwheeling: "\u{1F938}\u200D\u2642\uFE0F",
  woman_cartwheeling: "\u{1F938}\u200D\u2640\uFE0F",
  wrestling: "\u{1F93C}",
  men_wrestling: "\u{1F93C}\u200D\u2642\uFE0F",
  women_wrestling: "\u{1F93C}\u200D\u2640\uFE0F",
  water_polo: "\u{1F93D}",
  man_playing_water_polo: "\u{1F93D}\u200D\u2642\uFE0F",
  woman_playing_water_polo: "\u{1F93D}\u200D\u2640\uFE0F",
  handball_person: "\u{1F93E}",
  man_playing_handball: "\u{1F93E}\u200D\u2642\uFE0F",
  woman_playing_handball: "\u{1F93E}\u200D\u2640\uFE0F",
  juggling_person: "\u{1F939}",
  man_juggling: "\u{1F939}\u200D\u2642\uFE0F",
  woman_juggling: "\u{1F939}\u200D\u2640\uFE0F",
  lotus_position: "\u{1F9D8}",
  lotus_position_man: "\u{1F9D8}\u200D\u2642\uFE0F",
  lotus_position_woman: "\u{1F9D8}\u200D\u2640\uFE0F",
  bath: "\u{1F6C0}",
  sleeping_bed: "\u{1F6CC}",
  people_holding_hands: "\u{1F9D1}\u200D\u{1F91D}\u200D\u{1F9D1}",
  two_women_holding_hands: "\u{1F46D}",
  couple: "\u{1F46B}",
  two_men_holding_hands: "\u{1F46C}",
  couplekiss: "\u{1F48F}",
  couplekiss_man_woman:
    "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}",
  couplekiss_man_man:
    "\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}",
  couplekiss_woman_woman:
    "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}",
  couple_with_heart: "\u{1F491}",
  couple_with_heart_woman_man: "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F468}",
  couple_with_heart_man_man: "\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F468}",
  couple_with_heart_woman_woman: "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F469}",
  family: "\u{1F46A}",
  family_man_woman_boy: "\u{1F468}\u200D\u{1F469}\u200D\u{1F466}",
  family_man_woman_girl: "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}",
  family_man_woman_girl_boy:
    "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}",
  family_man_woman_boy_boy:
    "\u{1F468}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}",
  family_man_woman_girl_girl:
    "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}",
  family_man_man_boy: "\u{1F468}\u200D\u{1F468}\u200D\u{1F466}",
  family_man_man_girl: "\u{1F468}\u200D\u{1F468}\u200D\u{1F467}",
  family_man_man_girl_boy:
    "\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F466}",
  family_man_man_boy_boy:
    "\u{1F468}\u200D\u{1F468}\u200D\u{1F466}\u200D\u{1F466}",
  family_man_man_girl_girl:
    "\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F467}",
  family_woman_woman_boy: "\u{1F469}\u200D\u{1F469}\u200D\u{1F466}",
  family_woman_woman_girl: "\u{1F469}\u200D\u{1F469}\u200D\u{1F467}",
  family_woman_woman_girl_boy:
    "\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}",
  family_woman_woman_boy_boy:
    "\u{1F469}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}",
  family_woman_woman_girl_girl:
    "\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}",
  family_man_boy: "\u{1F468}\u200D\u{1F466}",
  family_man_boy_boy: "\u{1F468}\u200D\u{1F466}\u200D\u{1F466}",
  family_man_girl: "\u{1F468}\u200D\u{1F467}",
  family_man_girl_boy: "\u{1F468}\u200D\u{1F467}\u200D\u{1F466}",
  family_man_girl_girl: "\u{1F468}\u200D\u{1F467}\u200D\u{1F467}",
  family_woman_boy: "\u{1F469}\u200D\u{1F466}",
  family_woman_boy_boy: "\u{1F469}\u200D\u{1F466}\u200D\u{1F466}",
  family_woman_girl: "\u{1F469}\u200D\u{1F467}",
  family_woman_girl_boy: "\u{1F469}\u200D\u{1F467}\u200D\u{1F466}",
  family_woman_girl_girl: "\u{1F469}\u200D\u{1F467}\u200D\u{1F467}",
  speaking_head: "\u{1F5E3}\uFE0F",
  bust_in_silhouette: "\u{1F464}",
  busts_in_silhouette: "\u{1F465}",
  people_hugging: "\u{1FAC2}",
  footprints: "\u{1F463}",
  monkey_face: "\u{1F435}",
  monkey: "\u{1F412}",
  gorilla: "\u{1F98D}",
  orangutan: "\u{1F9A7}",
  dog: "\u{1F436}",
  dog2: "\u{1F415}",
  guide_dog: "\u{1F9AE}",
  service_dog: "\u{1F415}\u200D\u{1F9BA}",
  poodle: "\u{1F429}",
  wolf: "\u{1F43A}",
  fox_face: "\u{1F98A}",
  raccoon: "\u{1F99D}",
  cat: "\u{1F431}",
  cat2: "\u{1F408}",
  black_cat: "\u{1F408}\u200D\u2B1B",
  lion: "\u{1F981}",
  tiger: "\u{1F42F}",
  tiger2: "\u{1F405}",
  leopard: "\u{1F406}",
  horse: "\u{1F434}",
  racehorse: "\u{1F40E}",
  unicorn: "\u{1F984}",
  zebra: "\u{1F993}",
  deer: "\u{1F98C}",
  bison: "\u{1F9AC}",
  cow: "\u{1F42E}",
  ox: "\u{1F402}",
  water_buffalo: "\u{1F403}",
  cow2: "\u{1F404}",
  pig: "\u{1F437}",
  pig2: "\u{1F416}",
  boar: "\u{1F417}",
  pig_nose: "\u{1F43D}",
  ram: "\u{1F40F}",
  sheep: "\u{1F411}",
  goat: "\u{1F410}",
  dromedary_camel: "\u{1F42A}",
  camel: "\u{1F42B}",
  llama: "\u{1F999}",
  giraffe: "\u{1F992}",
  elephant: "\u{1F418}",
  mammoth: "\u{1F9A3}",
  rhinoceros: "\u{1F98F}",
  hippopotamus: "\u{1F99B}",
  mouse: "\u{1F42D}",
  mouse2: "\u{1F401}",
  rat: "\u{1F400}",
  hamster: "\u{1F439}",
  rabbit: "\u{1F430}",
  rabbit2: "\u{1F407}",
  chipmunk: "\u{1F43F}\uFE0F",
  beaver: "\u{1F9AB}",
  hedgehog: "\u{1F994}",
  bat: "\u{1F987}",
  bear: "\u{1F43B}",
  polar_bear: "\u{1F43B}\u200D\u2744\uFE0F",
  koala: "\u{1F428}",
  panda_face: "\u{1F43C}",
  sloth: "\u{1F9A5}",
  otter: "\u{1F9A6}",
  skunk: "\u{1F9A8}",
  kangaroo: "\u{1F998}",
  badger: "\u{1F9A1}",
  feet: "\u{1F43E}",
  paw_prints: "\u{1F43E}",
  turkey: "\u{1F983}",
  chicken: "\u{1F414}",
  rooster: "\u{1F413}",
  hatching_chick: "\u{1F423}",
  baby_chick: "\u{1F424}",
  hatched_chick: "\u{1F425}",
  bird: "\u{1F426}",
  penguin: "\u{1F427}",
  dove: "\u{1F54A}\uFE0F",
  eagle: "\u{1F985}",
  duck: "\u{1F986}",
  swan: "\u{1F9A2}",
  owl: "\u{1F989}",
  dodo: "\u{1F9A4}",
  feather: "\u{1FAB6}",
  flamingo: "\u{1F9A9}",
  peacock: "\u{1F99A}",
  parrot: "\u{1F99C}",
  frog: "\u{1F438}",
  crocodile: "\u{1F40A}",
  turtle: "\u{1F422}",
  lizard: "\u{1F98E}",
  snake: "\u{1F40D}",
  dragon_face: "\u{1F432}",
  dragon: "\u{1F409}",
  sauropod: "\u{1F995}",
  "t-rex": "\u{1F996}",
  whale: "\u{1F433}",
  whale2: "\u{1F40B}",
  dolphin: "\u{1F42C}",
  flipper: "\u{1F42C}",
  seal: "\u{1F9AD}",
  fish: "\u{1F41F}",
  tropical_fish: "\u{1F420}",
  blowfish: "\u{1F421}",
  shark: "\u{1F988}",
  octopus: "\u{1F419}",
  shell: "\u{1F41A}",
  snail: "\u{1F40C}",
  butterfly: "\u{1F98B}",
  bug: "\u{1F41B}",
  ant: "\u{1F41C}",
  bee: "\u{1F41D}",
  honeybee: "\u{1F41D}",
  beetle: "\u{1FAB2}",
  lady_beetle: "\u{1F41E}",
  cricket: "\u{1F997}",
  cockroach: "\u{1FAB3}",
  spider: "\u{1F577}\uFE0F",
  spider_web: "\u{1F578}\uFE0F",
  scorpion: "\u{1F982}",
  mosquito: "\u{1F99F}",
  fly: "\u{1FAB0}",
  worm: "\u{1FAB1}",
  microbe: "\u{1F9A0}",
  bouquet: "\u{1F490}",
  cherry_blossom: "\u{1F338}",
  white_flower: "\u{1F4AE}",
  rosette: "\u{1F3F5}\uFE0F",
  rose: "\u{1F339}",
  wilted_flower: "\u{1F940}",
  hibiscus: "\u{1F33A}",
  sunflower: "\u{1F33B}",
  blossom: "\u{1F33C}",
  tulip: "\u{1F337}",
  seedling: "\u{1F331}",
  potted_plant: "\u{1FAB4}",
  evergreen_tree: "\u{1F332}",
  deciduous_tree: "\u{1F333}",
  palm_tree: "\u{1F334}",
  cactus: "\u{1F335}",
  ear_of_rice: "\u{1F33E}",
  herb: "\u{1F33F}",
  shamrock: "\u2618\uFE0F",
  four_leaf_clover: "\u{1F340}",
  maple_leaf: "\u{1F341}",
  fallen_leaf: "\u{1F342}",
  leaves: "\u{1F343}",
  grapes: "\u{1F347}",
  melon: "\u{1F348}",
  watermelon: "\u{1F349}",
  tangerine: "\u{1F34A}",
  orange: "\u{1F34A}",
  mandarin: "\u{1F34A}",
  lemon: "\u{1F34B}",
  banana: "\u{1F34C}",
  pineapple: "\u{1F34D}",
  mango: "\u{1F96D}",
  apple: "\u{1F34E}",
  green_apple: "\u{1F34F}",
  pear: "\u{1F350}",
  peach: "\u{1F351}",
  cherries: "\u{1F352}",
  strawberry: "\u{1F353}",
  blueberries: "\u{1FAD0}",
  kiwi_fruit: "\u{1F95D}",
  tomato: "\u{1F345}",
  olive: "\u{1FAD2}",
  coconut: "\u{1F965}",
  avocado: "\u{1F951}",
  eggplant: "\u{1F346}",
  potato: "\u{1F954}",
  carrot: "\u{1F955}",
  corn: "\u{1F33D}",
  hot_pepper: "\u{1F336}\uFE0F",
  bell_pepper: "\u{1FAD1}",
  cucumber: "\u{1F952}",
  leafy_green: "\u{1F96C}",
  broccoli: "\u{1F966}",
  garlic: "\u{1F9C4}",
  onion: "\u{1F9C5}",
  mushroom: "\u{1F344}",
  peanuts: "\u{1F95C}",
  chestnut: "\u{1F330}",
  bread: "\u{1F35E}",
  croissant: "\u{1F950}",
  baguette_bread: "\u{1F956}",
  flatbread: "\u{1FAD3}",
  pretzel: "\u{1F968}",
  bagel: "\u{1F96F}",
  pancakes: "\u{1F95E}",
  waffle: "\u{1F9C7}",
  cheese: "\u{1F9C0}",
  meat_on_bone: "\u{1F356}",
  poultry_leg: "\u{1F357}",
  cut_of_meat: "\u{1F969}",
  bacon: "\u{1F953}",
  hamburger: "\u{1F354}",
  fries: "\u{1F35F}",
  pizza: "\u{1F355}",
  hotdog: "\u{1F32D}",
  sandwich: "\u{1F96A}",
  taco: "\u{1F32E}",
  burrito: "\u{1F32F}",
  tamale: "\u{1FAD4}",
  stuffed_flatbread: "\u{1F959}",
  falafel: "\u{1F9C6}",
  egg: "\u{1F95A}",
  fried_egg: "\u{1F373}",
  shallow_pan_of_food: "\u{1F958}",
  stew: "\u{1F372}",
  fondue: "\u{1FAD5}",
  bowl_with_spoon: "\u{1F963}",
  green_salad: "\u{1F957}",
  popcorn: "\u{1F37F}",
  butter: "\u{1F9C8}",
  salt: "\u{1F9C2}",
  canned_food: "\u{1F96B}",
  bento: "\u{1F371}",
  rice_cracker: "\u{1F358}",
  rice_ball: "\u{1F359}",
  rice: "\u{1F35A}",
  curry: "\u{1F35B}",
  ramen: "\u{1F35C}",
  spaghetti: "\u{1F35D}",
  sweet_potato: "\u{1F360}",
  oden: "\u{1F362}",
  sushi: "\u{1F363}",
  fried_shrimp: "\u{1F364}",
  fish_cake: "\u{1F365}",
  moon_cake: "\u{1F96E}",
  dango: "\u{1F361}",
  dumpling: "\u{1F95F}",
  fortune_cookie: "\u{1F960}",
  takeout_box: "\u{1F961}",
  crab: "\u{1F980}",
  lobster: "\u{1F99E}",
  shrimp: "\u{1F990}",
  squid: "\u{1F991}",
  oyster: "\u{1F9AA}",
  icecream: "\u{1F366}",
  shaved_ice: "\u{1F367}",
  ice_cream: "\u{1F368}",
  doughnut: "\u{1F369}",
  cookie: "\u{1F36A}",
  birthday: "\u{1F382}",
  cake: "\u{1F370}",
  cupcake: "\u{1F9C1}",
  pie: "\u{1F967}",
  chocolate_bar: "\u{1F36B}",
  candy: "\u{1F36C}",
  lollipop: "\u{1F36D}",
  custard: "\u{1F36E}",
  honey_pot: "\u{1F36F}",
  baby_bottle: "\u{1F37C}",
  milk_glass: "\u{1F95B}",
  coffee: "\u2615",
  teapot: "\u{1FAD6}",
  tea: "\u{1F375}",
  sake: "\u{1F376}",
  champagne: "\u{1F37E}",
  wine_glass: "\u{1F377}",
  cocktail: "\u{1F378}",
  tropical_drink: "\u{1F379}",
  beer: "\u{1F37A}",
  beers: "\u{1F37B}",
  clinking_glasses: "\u{1F942}",
  tumbler_glass: "\u{1F943}",
  cup_with_straw: "\u{1F964}",
  bubble_tea: "\u{1F9CB}",
  beverage_box: "\u{1F9C3}",
  mate: "\u{1F9C9}",
  ice_cube: "\u{1F9CA}",
  chopsticks: "\u{1F962}",
  plate_with_cutlery: "\u{1F37D}\uFE0F",
  fork_and_knife: "\u{1F374}",
  spoon: "\u{1F944}",
  hocho: "\u{1F52A}",
  knife: "\u{1F52A}",
  amphora: "\u{1F3FA}",
  earth_africa: "\u{1F30D}",
  earth_americas: "\u{1F30E}",
  earth_asia: "\u{1F30F}",
  globe_with_meridians: "\u{1F310}",
  world_map: "\u{1F5FA}\uFE0F",
  japan: "\u{1F5FE}",
  compass: "\u{1F9ED}",
  mountain_snow: "\u{1F3D4}\uFE0F",
  mountain: "\u26F0\uFE0F",
  volcano: "\u{1F30B}",
  mount_fuji: "\u{1F5FB}",
  camping: "\u{1F3D5}\uFE0F",
  beach_umbrella: "\u{1F3D6}\uFE0F",
  desert: "\u{1F3DC}\uFE0F",
  desert_island: "\u{1F3DD}\uFE0F",
  national_park: "\u{1F3DE}\uFE0F",
  stadium: "\u{1F3DF}\uFE0F",
  classical_building: "\u{1F3DB}\uFE0F",
  building_construction: "\u{1F3D7}\uFE0F",
  bricks: "\u{1F9F1}",
  rock: "\u{1FAA8}",
  wood: "\u{1FAB5}",
  hut: "\u{1F6D6}",
  houses: "\u{1F3D8}\uFE0F",
  derelict_house: "\u{1F3DA}\uFE0F",
  house: "\u{1F3E0}",
  house_with_garden: "\u{1F3E1}",
  office: "\u{1F3E2}",
  post_office: "\u{1F3E3}",
  european_post_office: "\u{1F3E4}",
  hospital: "\u{1F3E5}",
  bank: "\u{1F3E6}",
  hotel: "\u{1F3E8}",
  love_hotel: "\u{1F3E9}",
  convenience_store: "\u{1F3EA}",
  school: "\u{1F3EB}",
  department_store: "\u{1F3EC}",
  factory: "\u{1F3ED}",
  japanese_castle: "\u{1F3EF}",
  european_castle: "\u{1F3F0}",
  wedding: "\u{1F492}",
  tokyo_tower: "\u{1F5FC}",
  statue_of_liberty: "\u{1F5FD}",
  church: "\u26EA",
  mosque: "\u{1F54C}",
  hindu_temple: "\u{1F6D5}",
  synagogue: "\u{1F54D}",
  shinto_shrine: "\u26E9\uFE0F",
  kaaba: "\u{1F54B}",
  fountain: "\u26F2",
  tent: "\u26FA",
  foggy: "\u{1F301}",
  night_with_stars: "\u{1F303}",
  cityscape: "\u{1F3D9}\uFE0F",
  sunrise_over_mountains: "\u{1F304}",
  sunrise: "\u{1F305}",
  city_sunset: "\u{1F306}",
  city_sunrise: "\u{1F307}",
  bridge_at_night: "\u{1F309}",
  hotsprings: "\u2668\uFE0F",
  carousel_horse: "\u{1F3A0}",
  ferris_wheel: "\u{1F3A1}",
  roller_coaster: "\u{1F3A2}",
  barber: "\u{1F488}",
  circus_tent: "\u{1F3AA}",
  steam_locomotive: "\u{1F682}",
  railway_car: "\u{1F683}",
  bullettrain_side: "\u{1F684}",
  bullettrain_front: "\u{1F685}",
  train2: "\u{1F686}",
  metro: "\u{1F687}",
  light_rail: "\u{1F688}",
  station: "\u{1F689}",
  tram: "\u{1F68A}",
  monorail: "\u{1F69D}",
  mountain_railway: "\u{1F69E}",
  train: "\u{1F68B}",
  bus: "\u{1F68C}",
  oncoming_bus: "\u{1F68D}",
  trolleybus: "\u{1F68E}",
  minibus: "\u{1F690}",
  ambulance: "\u{1F691}",
  fire_engine: "\u{1F692}",
  police_car: "\u{1F693}",
  oncoming_police_car: "\u{1F694}",
  taxi: "\u{1F695}",
  oncoming_taxi: "\u{1F696}",
  car: "\u{1F697}",
  red_car: "\u{1F697}",
  oncoming_automobile: "\u{1F698}",
  blue_car: "\u{1F699}",
  pickup_truck: "\u{1F6FB}",
  truck: "\u{1F69A}",
  articulated_lorry: "\u{1F69B}",
  tractor: "\u{1F69C}",
  racing_car: "\u{1F3CE}\uFE0F",
  motorcycle: "\u{1F3CD}\uFE0F",
  motor_scooter: "\u{1F6F5}",
  manual_wheelchair: "\u{1F9BD}",
  motorized_wheelchair: "\u{1F9BC}",
  auto_rickshaw: "\u{1F6FA}",
  bike: "\u{1F6B2}",
  kick_scooter: "\u{1F6F4}",
  skateboard: "\u{1F6F9}",
  roller_skate: "\u{1F6FC}",
  busstop: "\u{1F68F}",
  motorway: "\u{1F6E3}\uFE0F",
  railway_track: "\u{1F6E4}\uFE0F",
  oil_drum: "\u{1F6E2}\uFE0F",
  fuelpump: "\u26FD",
  rotating_light: "\u{1F6A8}",
  traffic_light: "\u{1F6A5}",
  vertical_traffic_light: "\u{1F6A6}",
  stop_sign: "\u{1F6D1}",
  construction: "\u{1F6A7}",
  anchor: "\u2693",
  boat: "\u26F5",
  sailboat: "\u26F5",
  canoe: "\u{1F6F6}",
  speedboat: "\u{1F6A4}",
  passenger_ship: "\u{1F6F3}\uFE0F",
  ferry: "\u26F4\uFE0F",
  motor_boat: "\u{1F6E5}\uFE0F",
  ship: "\u{1F6A2}",
  airplane: "\u2708\uFE0F",
  small_airplane: "\u{1F6E9}\uFE0F",
  flight_departure: "\u{1F6EB}",
  flight_arrival: "\u{1F6EC}",
  parachute: "\u{1FA82}",
  seat: "\u{1F4BA}",
  helicopter: "\u{1F681}",
  suspension_railway: "\u{1F69F}",
  mountain_cableway: "\u{1F6A0}",
  aerial_tramway: "\u{1F6A1}",
  artificial_satellite: "\u{1F6F0}\uFE0F",
  rocket: "\u{1F680}",
  flying_saucer: "\u{1F6F8}",
  bellhop_bell: "\u{1F6CE}\uFE0F",
  luggage: "\u{1F9F3}",
  hourglass: "\u231B",
  hourglass_flowing_sand: "\u23F3",
  watch: "\u231A",
  alarm_clock: "\u23F0",
  stopwatch: "\u23F1\uFE0F",
  timer_clock: "\u23F2\uFE0F",
  mantelpiece_clock: "\u{1F570}\uFE0F",
  clock12: "\u{1F55B}",
  clock1230: "\u{1F567}",
  clock1: "\u{1F550}",
  clock130: "\u{1F55C}",
  clock2: "\u{1F551}",
  clock230: "\u{1F55D}",
  clock3: "\u{1F552}",
  clock330: "\u{1F55E}",
  clock4: "\u{1F553}",
  clock430: "\u{1F55F}",
  clock5: "\u{1F554}",
  clock530: "\u{1F560}",
  clock6: "\u{1F555}",
  clock630: "\u{1F561}",
  clock7: "\u{1F556}",
  clock730: "\u{1F562}",
  clock8: "\u{1F557}",
  clock830: "\u{1F563}",
  clock9: "\u{1F558}",
  clock930: "\u{1F564}",
  clock10: "\u{1F559}",
  clock1030: "\u{1F565}",
  clock11: "\u{1F55A}",
  clock1130: "\u{1F566}",
  new_moon: "\u{1F311}",
  waxing_crescent_moon: "\u{1F312}",
  first_quarter_moon: "\u{1F313}",
  moon: "\u{1F314}",
  waxing_gibbous_moon: "\u{1F314}",
  full_moon: "\u{1F315}",
  waning_gibbous_moon: "\u{1F316}",
  last_quarter_moon: "\u{1F317}",
  waning_crescent_moon: "\u{1F318}",
  crescent_moon: "\u{1F319}",
  new_moon_with_face: "\u{1F31A}",
  first_quarter_moon_with_face: "\u{1F31B}",
  last_quarter_moon_with_face: "\u{1F31C}",
  thermometer: "\u{1F321}\uFE0F",
  sunny: "\u2600\uFE0F",
  full_moon_with_face: "\u{1F31D}",
  sun_with_face: "\u{1F31E}",
  ringed_planet: "\u{1FA90}",
  star: "\u2B50",
  star2: "\u{1F31F}",
  stars: "\u{1F320}",
  milky_way: "\u{1F30C}",
  cloud: "\u2601\uFE0F",
  partly_sunny: "\u26C5",
  cloud_with_lightning_and_rain: "\u26C8\uFE0F",
  sun_behind_small_cloud: "\u{1F324}\uFE0F",
  sun_behind_large_cloud: "\u{1F325}\uFE0F",
  sun_behind_rain_cloud: "\u{1F326}\uFE0F",
  cloud_with_rain: "\u{1F327}\uFE0F",
  cloud_with_snow: "\u{1F328}\uFE0F",
  cloud_with_lightning: "\u{1F329}\uFE0F",
  tornado: "\u{1F32A}\uFE0F",
  fog: "\u{1F32B}\uFE0F",
  wind_face: "\u{1F32C}\uFE0F",
  cyclone: "\u{1F300}",
  rainbow: "\u{1F308}",
  closed_umbrella: "\u{1F302}",
  open_umbrella: "\u2602\uFE0F",
  umbrella: "\u2614",
  parasol_on_ground: "\u26F1\uFE0F",
  zap: "\u26A1",
  snowflake: "\u2744\uFE0F",
  snowman_with_snow: "\u2603\uFE0F",
  snowman: "\u26C4",
  comet: "\u2604\uFE0F",
  fire: "\u{1F525}",
  droplet: "\u{1F4A7}",
  ocean: "\u{1F30A}",
  jack_o_lantern: "\u{1F383}",
  christmas_tree: "\u{1F384}",
  fireworks: "\u{1F386}",
  sparkler: "\u{1F387}",
  firecracker: "\u{1F9E8}",
  sparkles: "\u2728",
  balloon: "\u{1F388}",
  tada: "\u{1F389}",
  confetti_ball: "\u{1F38A}",
  tanabata_tree: "\u{1F38B}",
  bamboo: "\u{1F38D}",
  dolls: "\u{1F38E}",
  flags: "\u{1F38F}",
  wind_chime: "\u{1F390}",
  rice_scene: "\u{1F391}",
  red_envelope: "\u{1F9E7}",
  ribbon: "\u{1F380}",
  gift: "\u{1F381}",
  reminder_ribbon: "\u{1F397}\uFE0F",
  tickets: "\u{1F39F}\uFE0F",
  ticket: "\u{1F3AB}",
  medal_military: "\u{1F396}\uFE0F",
  trophy: "\u{1F3C6}",
  medal_sports: "\u{1F3C5}",
  "1st_place_medal": "\u{1F947}",
  "2nd_place_medal": "\u{1F948}",
  "3rd_place_medal": "\u{1F949}",
  soccer: "\u26BD",
  baseball: "\u26BE",
  softball: "\u{1F94E}",
  basketball: "\u{1F3C0}",
  volleyball: "\u{1F3D0}",
  football: "\u{1F3C8}",
  rugby_football: "\u{1F3C9}",
  tennis: "\u{1F3BE}",
  flying_disc: "\u{1F94F}",
  bowling: "\u{1F3B3}",
  cricket_game: "\u{1F3CF}",
  field_hockey: "\u{1F3D1}",
  ice_hockey: "\u{1F3D2}",
  lacrosse: "\u{1F94D}",
  ping_pong: "\u{1F3D3}",
  badminton: "\u{1F3F8}",
  boxing_glove: "\u{1F94A}",
  martial_arts_uniform: "\u{1F94B}",
  goal_net: "\u{1F945}",
  golf: "\u26F3",
  ice_skate: "\u26F8\uFE0F",
  fishing_pole_and_fish: "\u{1F3A3}",
  diving_mask: "\u{1F93F}",
  running_shirt_with_sash: "\u{1F3BD}",
  ski: "\u{1F3BF}",
  sled: "\u{1F6F7}",
  curling_stone: "\u{1F94C}",
  dart: "\u{1F3AF}",
  yo_yo: "\u{1FA80}",
  kite: "\u{1FA81}",
  "8ball": "\u{1F3B1}",
  crystal_ball: "\u{1F52E}",
  magic_wand: "\u{1FA84}",
  nazar_amulet: "\u{1F9FF}",
  video_game: "\u{1F3AE}",
  joystick: "\u{1F579}\uFE0F",
  slot_machine: "\u{1F3B0}",
  game_die: "\u{1F3B2}",
  jigsaw: "\u{1F9E9}",
  teddy_bear: "\u{1F9F8}",
  pinata: "\u{1FA85}",
  nesting_dolls: "\u{1FA86}",
  spades: "\u2660\uFE0F",
  hearts: "\u2665\uFE0F",
  diamonds: "\u2666\uFE0F",
  clubs: "\u2663\uFE0F",
  chess_pawn: "\u265F\uFE0F",
  black_joker: "\u{1F0CF}",
  mahjong: "\u{1F004}",
  flower_playing_cards: "\u{1F3B4}",
  performing_arts: "\u{1F3AD}",
  framed_picture: "\u{1F5BC}\uFE0F",
  art: "\u{1F3A8}",
  thread: "\u{1F9F5}",
  sewing_needle: "\u{1FAA1}",
  yarn: "\u{1F9F6}",
  knot: "\u{1FAA2}",
  eyeglasses: "\u{1F453}",
  dark_sunglasses: "\u{1F576}\uFE0F",
  goggles: "\u{1F97D}",
  lab_coat: "\u{1F97C}",
  safety_vest: "\u{1F9BA}",
  necktie: "\u{1F454}",
  shirt: "\u{1F455}",
  tshirt: "\u{1F455}",
  jeans: "\u{1F456}",
  scarf: "\u{1F9E3}",
  gloves: "\u{1F9E4}",
  coat: "\u{1F9E5}",
  socks: "\u{1F9E6}",
  dress: "\u{1F457}",
  kimono: "\u{1F458}",
  sari: "\u{1F97B}",
  one_piece_swimsuit: "\u{1FA71}",
  swim_brief: "\u{1FA72}",
  shorts: "\u{1FA73}",
  bikini: "\u{1F459}",
  womans_clothes: "\u{1F45A}",
  purse: "\u{1F45B}",
  handbag: "\u{1F45C}",
  pouch: "\u{1F45D}",
  shopping: "\u{1F6CD}\uFE0F",
  school_satchel: "\u{1F392}",
  thong_sandal: "\u{1FA74}",
  mans_shoe: "\u{1F45E}",
  shoe: "\u{1F45E}",
  athletic_shoe: "\u{1F45F}",
  hiking_boot: "\u{1F97E}",
  flat_shoe: "\u{1F97F}",
  high_heel: "\u{1F460}",
  sandal: "\u{1F461}",
  ballet_shoes: "\u{1FA70}",
  boot: "\u{1F462}",
  crown: "\u{1F451}",
  womans_hat: "\u{1F452}",
  tophat: "\u{1F3A9}",
  mortar_board: "\u{1F393}",
  billed_cap: "\u{1F9E2}",
  military_helmet: "\u{1FA96}",
  rescue_worker_helmet: "\u26D1\uFE0F",
  prayer_beads: "\u{1F4FF}",
  lipstick: "\u{1F484}",
  ring: "\u{1F48D}",
  gem: "\u{1F48E}",
  mute: "\u{1F507}",
  speaker: "\u{1F508}",
  sound: "\u{1F509}",
  loud_sound: "\u{1F50A}",
  loudspeaker: "\u{1F4E2}",
  mega: "\u{1F4E3}",
  postal_horn: "\u{1F4EF}",
  bell: "\u{1F514}",
  no_bell: "\u{1F515}",
  musical_score: "\u{1F3BC}",
  musical_note: "\u{1F3B5}",
  notes: "\u{1F3B6}",
  studio_microphone: "\u{1F399}\uFE0F",
  level_slider: "\u{1F39A}\uFE0F",
  control_knobs: "\u{1F39B}\uFE0F",
  microphone: "\u{1F3A4}",
  headphones: "\u{1F3A7}",
  radio: "\u{1F4FB}",
  saxophone: "\u{1F3B7}",
  accordion: "\u{1FA97}",
  guitar: "\u{1F3B8}",
  musical_keyboard: "\u{1F3B9}",
  trumpet: "\u{1F3BA}",
  violin: "\u{1F3BB}",
  banjo: "\u{1FA95}",
  drum: "\u{1F941}",
  long_drum: "\u{1FA98}",
  iphone: "\u{1F4F1}",
  calling: "\u{1F4F2}",
  phone: "\u260E\uFE0F",
  telephone: "\u260E\uFE0F",
  telephone_receiver: "\u{1F4DE}",
  pager: "\u{1F4DF}",
  fax: "\u{1F4E0}",
  battery: "\u{1F50B}",
  electric_plug: "\u{1F50C}",
  computer: "\u{1F4BB}",
  desktop_computer: "\u{1F5A5}\uFE0F",
  printer: "\u{1F5A8}\uFE0F",
  keyboard: "\u2328\uFE0F",
  computer_mouse: "\u{1F5B1}\uFE0F",
  trackball: "\u{1F5B2}\uFE0F",
  minidisc: "\u{1F4BD}",
  floppy_disk: "\u{1F4BE}",
  cd: "\u{1F4BF}",
  dvd: "\u{1F4C0}",
  abacus: "\u{1F9EE}",
  movie_camera: "\u{1F3A5}",
  film_strip: "\u{1F39E}\uFE0F",
  film_projector: "\u{1F4FD}\uFE0F",
  clapper: "\u{1F3AC}",
  tv: "\u{1F4FA}",
  camera: "\u{1F4F7}",
  camera_flash: "\u{1F4F8}",
  video_camera: "\u{1F4F9}",
  vhs: "\u{1F4FC}",
  mag: "\u{1F50D}",
  mag_right: "\u{1F50E}",
  candle: "\u{1F56F}\uFE0F",
  bulb: "\u{1F4A1}",
  flashlight: "\u{1F526}",
  izakaya_lantern: "\u{1F3EE}",
  lantern: "\u{1F3EE}",
  diya_lamp: "\u{1FA94}",
  notebook_with_decorative_cover: "\u{1F4D4}",
  closed_book: "\u{1F4D5}",
  book: "\u{1F4D6}",
  open_book: "\u{1F4D6}",
  green_book: "\u{1F4D7}",
  blue_book: "\u{1F4D8}",
  orange_book: "\u{1F4D9}",
  books: "\u{1F4DA}",
  notebook: "\u{1F4D3}",
  ledger: "\u{1F4D2}",
  page_with_curl: "\u{1F4C3}",
  scroll: "\u{1F4DC}",
  page_facing_up: "\u{1F4C4}",
  newspaper: "\u{1F4F0}",
  newspaper_roll: "\u{1F5DE}\uFE0F",
  bookmark_tabs: "\u{1F4D1}",
  bookmark: "\u{1F516}",
  label: "\u{1F3F7}\uFE0F",
  moneybag: "\u{1F4B0}",
  coin: "\u{1FA99}",
  yen: "\u{1F4B4}",
  dollar: "\u{1F4B5}",
  euro: "\u{1F4B6}",
  pound: "\u{1F4B7}",
  money_with_wings: "\u{1F4B8}",
  credit_card: "\u{1F4B3}",
  receipt: "\u{1F9FE}",
  chart: "\u{1F4B9}",
  envelope: "\u2709\uFE0F",
  email: "\u{1F4E7}",
  "e-mail": "\u{1F4E7}",
  incoming_envelope: "\u{1F4E8}",
  envelope_with_arrow: "\u{1F4E9}",
  outbox_tray: "\u{1F4E4}",
  inbox_tray: "\u{1F4E5}",
  package: "\u{1F4E6}",
  mailbox: "\u{1F4EB}",
  mailbox_closed: "\u{1F4EA}",
  mailbox_with_mail: "\u{1F4EC}",
  mailbox_with_no_mail: "\u{1F4ED}",
  postbox: "\u{1F4EE}",
  ballot_box: "\u{1F5F3}\uFE0F",
  pencil2: "\u270F\uFE0F",
  black_nib: "\u2712\uFE0F",
  fountain_pen: "\u{1F58B}\uFE0F",
  pen: "\u{1F58A}\uFE0F",
  paintbrush: "\u{1F58C}\uFE0F",
  crayon: "\u{1F58D}\uFE0F",
  memo: "\u{1F4DD}",
  pencil: "\u{1F4DD}",
  briefcase: "\u{1F4BC}",
  file_folder: "\u{1F4C1}",
  open_file_folder: "\u{1F4C2}",
  card_index_dividers: "\u{1F5C2}\uFE0F",
  date: "\u{1F4C5}",
  calendar: "\u{1F4C6}",
  spiral_notepad: "\u{1F5D2}\uFE0F",
  spiral_calendar: "\u{1F5D3}\uFE0F",
  card_index: "\u{1F4C7}",
  chart_with_upwards_trend: "\u{1F4C8}",
  chart_with_downwards_trend: "\u{1F4C9}",
  bar_chart: "\u{1F4CA}",
  clipboard: "\u{1F4CB}",
  pushpin: "\u{1F4CC}",
  round_pushpin: "\u{1F4CD}",
  paperclip: "\u{1F4CE}",
  paperclips: "\u{1F587}\uFE0F",
  straight_ruler: "\u{1F4CF}",
  triangular_ruler: "\u{1F4D0}",
  scissors: "\u2702\uFE0F",
  card_file_box: "\u{1F5C3}\uFE0F",
  file_cabinet: "\u{1F5C4}\uFE0F",
  wastebasket: "\u{1F5D1}\uFE0F",
  lock: "\u{1F512}",
  unlock: "\u{1F513}",
  lock_with_ink_pen: "\u{1F50F}",
  closed_lock_with_key: "\u{1F510}",
  key: "\u{1F511}",
  old_key: "\u{1F5DD}\uFE0F",
  hammer: "\u{1F528}",
  axe: "\u{1FA93}",
  pick: "\u26CF\uFE0F",
  hammer_and_pick: "\u2692\uFE0F",
  hammer_and_wrench: "\u{1F6E0}\uFE0F",
  dagger: "\u{1F5E1}\uFE0F",
  crossed_swords: "\u2694\uFE0F",
  gun: "\u{1F52B}",
  boomerang: "\u{1FA83}",
  bow_and_arrow: "\u{1F3F9}",
  shield: "\u{1F6E1}\uFE0F",
  carpentry_saw: "\u{1FA9A}",
  wrench: "\u{1F527}",
  screwdriver: "\u{1FA9B}",
  nut_and_bolt: "\u{1F529}",
  gear: "\u2699\uFE0F",
  clamp: "\u{1F5DC}\uFE0F",
  balance_scale: "\u2696\uFE0F",
  probing_cane: "\u{1F9AF}",
  link: "\u{1F517}",
  chains: "\u26D3\uFE0F",
  hook: "\u{1FA9D}",
  toolbox: "\u{1F9F0}",
  magnet: "\u{1F9F2}",
  ladder: "\u{1FA9C}",
  alembic: "\u2697\uFE0F",
  test_tube: "\u{1F9EA}",
  petri_dish: "\u{1F9EB}",
  dna: "\u{1F9EC}",
  microscope: "\u{1F52C}",
  telescope: "\u{1F52D}",
  satellite: "\u{1F4E1}",
  syringe: "\u{1F489}",
  drop_of_blood: "\u{1FA78}",
  pill: "\u{1F48A}",
  adhesive_bandage: "\u{1FA79}",
  stethoscope: "\u{1FA7A}",
  door: "\u{1F6AA}",
  elevator: "\u{1F6D7}",
  mirror: "\u{1FA9E}",
  window: "\u{1FA9F}",
  bed: "\u{1F6CF}\uFE0F",
  couch_and_lamp: "\u{1F6CB}\uFE0F",
  chair: "\u{1FA91}",
  toilet: "\u{1F6BD}",
  plunger: "\u{1FAA0}",
  shower: "\u{1F6BF}",
  bathtub: "\u{1F6C1}",
  mouse_trap: "\u{1FAA4}",
  razor: "\u{1FA92}",
  lotion_bottle: "\u{1F9F4}",
  safety_pin: "\u{1F9F7}",
  broom: "\u{1F9F9}",
  basket: "\u{1F9FA}",
  roll_of_paper: "\u{1F9FB}",
  bucket: "\u{1FAA3}",
  soap: "\u{1F9FC}",
  toothbrush: "\u{1FAA5}",
  sponge: "\u{1F9FD}",
  fire_extinguisher: "\u{1F9EF}",
  shopping_cart: "\u{1F6D2}",
  smoking: "\u{1F6AC}",
  coffin: "\u26B0\uFE0F",
  headstone: "\u{1FAA6}",
  funeral_urn: "\u26B1\uFE0F",
  moyai: "\u{1F5FF}",
  placard: "\u{1FAA7}",
  atm: "\u{1F3E7}",
  put_litter_in_its_place: "\u{1F6AE}",
  potable_water: "\u{1F6B0}",
  wheelchair: "\u267F",
  mens: "\u{1F6B9}",
  womens: "\u{1F6BA}",
  restroom: "\u{1F6BB}",
  baby_symbol: "\u{1F6BC}",
  wc: "\u{1F6BE}",
  passport_control: "\u{1F6C2}",
  customs: "\u{1F6C3}",
  baggage_claim: "\u{1F6C4}",
  left_luggage: "\u{1F6C5}",
  warning: "\u26A0\uFE0F",
  children_crossing: "\u{1F6B8}",
  no_entry: "\u26D4",
  no_entry_sign: "\u{1F6AB}",
  no_bicycles: "\u{1F6B3}",
  no_smoking: "\u{1F6AD}",
  do_not_litter: "\u{1F6AF}",
  "non-potable_water": "\u{1F6B1}",
  no_pedestrians: "\u{1F6B7}",
  no_mobile_phones: "\u{1F4F5}",
  underage: "\u{1F51E}",
  radioactive: "\u2622\uFE0F",
  biohazard: "\u2623\uFE0F",
  arrow_up: "\u2B06\uFE0F",
  arrow_upper_right: "\u2197\uFE0F",
  arrow_right: "\u27A1\uFE0F",
  arrow_lower_right: "\u2198\uFE0F",
  arrow_down: "\u2B07\uFE0F",
  arrow_lower_left: "\u2199\uFE0F",
  arrow_left: "\u2B05\uFE0F",
  arrow_upper_left: "\u2196\uFE0F",
  arrow_up_down: "\u2195\uFE0F",
  left_right_arrow: "\u2194\uFE0F",
  leftwards_arrow_with_hook: "\u21A9\uFE0F",
  arrow_right_hook: "\u21AA\uFE0F",
  arrow_heading_up: "\u2934\uFE0F",
  arrow_heading_down: "\u2935\uFE0F",
  arrows_clockwise: "\u{1F503}",
  arrows_counterclockwise: "\u{1F504}",
  back: "\u{1F519}",
  end: "\u{1F51A}",
  on: "\u{1F51B}",
  soon: "\u{1F51C}",
  top: "\u{1F51D}",
  place_of_worship: "\u{1F6D0}",
  atom_symbol: "\u269B\uFE0F",
  om: "\u{1F549}\uFE0F",
  star_of_david: "\u2721\uFE0F",
  wheel_of_dharma: "\u2638\uFE0F",
  yin_yang: "\u262F\uFE0F",
  latin_cross: "\u271D\uFE0F",
  orthodox_cross: "\u2626\uFE0F",
  star_and_crescent: "\u262A\uFE0F",
  peace_symbol: "\u262E\uFE0F",
  menorah: "\u{1F54E}",
  six_pointed_star: "\u{1F52F}",
  aries: "\u2648",
  taurus: "\u2649",
  gemini: "\u264A",
  cancer: "\u264B",
  leo: "\u264C",
  virgo: "\u264D",
  libra: "\u264E",
  scorpius: "\u264F",
  sagittarius: "\u2650",
  capricorn: "\u2651",
  aquarius: "\u2652",
  pisces: "\u2653",
  ophiuchus: "\u26CE",
  twisted_rightwards_arrows: "\u{1F500}",
  repeat: "\u{1F501}",
  repeat_one: "\u{1F502}",
  arrow_forward: "\u25B6\uFE0F",
  fast_forward: "\u23E9",
  next_track_button: "\u23ED\uFE0F",
  play_or_pause_button: "\u23EF\uFE0F",
  arrow_backward: "\u25C0\uFE0F",
  rewind: "\u23EA",
  previous_track_button: "\u23EE\uFE0F",
  arrow_up_small: "\u{1F53C}",
  arrow_double_up: "\u23EB",
  arrow_down_small: "\u{1F53D}",
  arrow_double_down: "\u23EC",
  pause_button: "\u23F8\uFE0F",
  stop_button: "\u23F9\uFE0F",
  record_button: "\u23FA\uFE0F",
  eject_button: "\u23CF\uFE0F",
  cinema: "\u{1F3A6}",
  low_brightness: "\u{1F505}",
  high_brightness: "\u{1F506}",
  signal_strength: "\u{1F4F6}",
  vibration_mode: "\u{1F4F3}",
  mobile_phone_off: "\u{1F4F4}",
  female_sign: "\u2640\uFE0F",
  male_sign: "\u2642\uFE0F",
  transgender_symbol: "\u26A7\uFE0F",
  heavy_multiplication_x: "\u2716\uFE0F",
  heavy_plus_sign: "\u2795",
  heavy_minus_sign: "\u2796",
  heavy_division_sign: "\u2797",
  infinity: "\u267E\uFE0F",
  bangbang: "\u203C\uFE0F",
  interrobang: "\u2049\uFE0F",
  question: "\u2753",
  grey_question: "\u2754",
  grey_exclamation: "\u2755",
  exclamation: "\u2757",
  heavy_exclamation_mark: "\u2757",
  wavy_dash: "\u3030\uFE0F",
  currency_exchange: "\u{1F4B1}",
  heavy_dollar_sign: "\u{1F4B2}",
  medical_symbol: "\u2695\uFE0F",
  recycle: "\u267B\uFE0F",
  fleur_de_lis: "\u269C\uFE0F",
  trident: "\u{1F531}",
  name_badge: "\u{1F4DB}",
  beginner: "\u{1F530}",
  o: "\u2B55",
  white_check_mark: "\u2705",
  ballot_box_with_check: "\u2611\uFE0F",
  heavy_check_mark: "\u2714\uFE0F",
  x: "\u274C",
  negative_squared_cross_mark: "\u274E",
  curly_loop: "\u27B0",
  loop: "\u27BF",
  part_alternation_mark: "\u303D\uFE0F",
  eight_spoked_asterisk: "\u2733\uFE0F",
  eight_pointed_black_star: "\u2734\uFE0F",
  sparkle: "\u2747\uFE0F",
  copyright: "\xA9\uFE0F",
  registered: "\xAE\uFE0F",
  tm: "\u2122\uFE0F",
  hash: "#\uFE0F\u20E3",
  asterisk: "*\uFE0F\u20E3",
  zero: "0\uFE0F\u20E3",
  one: "1\uFE0F\u20E3",
  two: "2\uFE0F\u20E3",
  three: "3\uFE0F\u20E3",
  four: "4\uFE0F\u20E3",
  five: "5\uFE0F\u20E3",
  six: "6\uFE0F\u20E3",
  seven: "7\uFE0F\u20E3",
  eight: "8\uFE0F\u20E3",
  nine: "9\uFE0F\u20E3",
  keycap_ten: "\u{1F51F}",
  capital_abcd: "\u{1F520}",
  abcd: "\u{1F521}",
  symbols: "\u{1F523}",
  abc: "\u{1F524}",
  a: "\u{1F170}\uFE0F",
  ab: "\u{1F18E}",
  b: "\u{1F171}\uFE0F",
  cl: "\u{1F191}",
  cool: "\u{1F192}",
  free: "\u{1F193}",
  information_source: "\u2139\uFE0F",
  id: "\u{1F194}",
  m: "\u24C2\uFE0F",
  new: "\u{1F195}",
  ng: "\u{1F196}",
  o2: "\u{1F17E}\uFE0F",
  ok: "\u{1F197}",
  parking: "\u{1F17F}\uFE0F",
  sos: "\u{1F198}",
  up: "\u{1F199}",
  vs: "\u{1F19A}",
  koko: "\u{1F201}",
  sa: "\u{1F202}\uFE0F",
  u6708: "\u{1F237}\uFE0F",
  u6709: "\u{1F236}",
  u6307: "\u{1F22F}",
  ideograph_advantage: "\u{1F250}",
  u5272: "\u{1F239}",
  u7121: "\u{1F21A}",
  u7981: "\u{1F232}",
  accept: "\u{1F251}",
  u7533: "\u{1F238}",
  u5408: "\u{1F234}",
  u7a7a: "\u{1F233}",
  congratulations: "\u3297\uFE0F",
  secret: "\u3299\uFE0F",
  u55b6: "\u{1F23A}",
  u6e80: "\u{1F235}",
  red_circle: "\u{1F534}",
  orange_circle: "\u{1F7E0}",
  yellow_circle: "\u{1F7E1}",
  green_circle: "\u{1F7E2}",
  large_blue_circle: "\u{1F535}",
  purple_circle: "\u{1F7E3}",
  brown_circle: "\u{1F7E4}",
  black_circle: "\u26AB",
  white_circle: "\u26AA",
  red_square: "\u{1F7E5}",
  orange_square: "\u{1F7E7}",
  yellow_square: "\u{1F7E8}",
  green_square: "\u{1F7E9}",
  blue_square: "\u{1F7E6}",
  purple_square: "\u{1F7EA}",
  brown_square: "\u{1F7EB}",
  black_large_square: "\u2B1B",
  white_large_square: "\u2B1C",
  black_medium_square: "\u25FC\uFE0F",
  white_medium_square: "\u25FB\uFE0F",
  black_medium_small_square: "\u25FE",
  white_medium_small_square: "\u25FD",
  black_small_square: "\u25AA\uFE0F",
  white_small_square: "\u25AB\uFE0F",
  large_orange_diamond: "\u{1F536}",
  large_blue_diamond: "\u{1F537}",
  small_orange_diamond: "\u{1F538}",
  small_blue_diamond: "\u{1F539}",
  small_red_triangle: "\u{1F53A}",
  small_red_triangle_down: "\u{1F53B}",
  diamond_shape_with_a_dot_inside: "\u{1F4A0}",
  radio_button: "\u{1F518}",
  white_square_button: "\u{1F533}",
  black_square_button: "\u{1F532}",
  checkered_flag: "\u{1F3C1}",
  triangular_flag_on_post: "\u{1F6A9}",
  crossed_flags: "\u{1F38C}",
  black_flag: "\u{1F3F4}",
  white_flag: "\u{1F3F3}\uFE0F",
  rainbow_flag: "\u{1F3F3}\uFE0F\u200D\u{1F308}",
  transgender_flag: "\u{1F3F3}\uFE0F\u200D\u26A7\uFE0F",
  pirate_flag: "\u{1F3F4}\u200D\u2620\uFE0F",
  ascension_island: "\u{1F1E6}\u{1F1E8}",
  andorra: "\u{1F1E6}\u{1F1E9}",
  united_arab_emirates: "\u{1F1E6}\u{1F1EA}",
  afghanistan: "\u{1F1E6}\u{1F1EB}",
  antigua_barbuda: "\u{1F1E6}\u{1F1EC}",
  anguilla: "\u{1F1E6}\u{1F1EE}",
  albania: "\u{1F1E6}\u{1F1F1}",
  armenia: "\u{1F1E6}\u{1F1F2}",
  angola: "\u{1F1E6}\u{1F1F4}",
  antarctica: "\u{1F1E6}\u{1F1F6}",
  argentina: "\u{1F1E6}\u{1F1F7}",
  american_samoa: "\u{1F1E6}\u{1F1F8}",
  austria: "\u{1F1E6}\u{1F1F9}",
  australia: "\u{1F1E6}\u{1F1FA}",
  aruba: "\u{1F1E6}\u{1F1FC}",
  aland_islands: "\u{1F1E6}\u{1F1FD}",
  azerbaijan: "\u{1F1E6}\u{1F1FF}",
  bosnia_herzegovina: "\u{1F1E7}\u{1F1E6}",
  barbados: "\u{1F1E7}\u{1F1E7}",
  bangladesh: "\u{1F1E7}\u{1F1E9}",
  belgium: "\u{1F1E7}\u{1F1EA}",
  burkina_faso: "\u{1F1E7}\u{1F1EB}",
  bulgaria: "\u{1F1E7}\u{1F1EC}",
  bahrain: "\u{1F1E7}\u{1F1ED}",
  burundi: "\u{1F1E7}\u{1F1EE}",
  benin: "\u{1F1E7}\u{1F1EF}",
  st_barthelemy: "\u{1F1E7}\u{1F1F1}",
  bermuda: "\u{1F1E7}\u{1F1F2}",
  brunei: "\u{1F1E7}\u{1F1F3}",
  bolivia: "\u{1F1E7}\u{1F1F4}",
  caribbean_netherlands: "\u{1F1E7}\u{1F1F6}",
  brazil: "\u{1F1E7}\u{1F1F7}",
  bahamas: "\u{1F1E7}\u{1F1F8}",
  bhutan: "\u{1F1E7}\u{1F1F9}",
  bouvet_island: "\u{1F1E7}\u{1F1FB}",
  botswana: "\u{1F1E7}\u{1F1FC}",
  belarus: "\u{1F1E7}\u{1F1FE}",
  belize: "\u{1F1E7}\u{1F1FF}",
  canada: "\u{1F1E8}\u{1F1E6}",
  cocos_islands: "\u{1F1E8}\u{1F1E8}",
  congo_kinshasa: "\u{1F1E8}\u{1F1E9}",
  central_african_republic: "\u{1F1E8}\u{1F1EB}",
  congo_brazzaville: "\u{1F1E8}\u{1F1EC}",
  switzerland: "\u{1F1E8}\u{1F1ED}",
  cote_divoire: "\u{1F1E8}\u{1F1EE}",
  cook_islands: "\u{1F1E8}\u{1F1F0}",
  chile: "\u{1F1E8}\u{1F1F1}",
  cameroon: "\u{1F1E8}\u{1F1F2}",
  cn: "\u{1F1E8}\u{1F1F3}",
  colombia: "\u{1F1E8}\u{1F1F4}",
  clipperton_island: "\u{1F1E8}\u{1F1F5}",
  costa_rica: "\u{1F1E8}\u{1F1F7}",
  cuba: "\u{1F1E8}\u{1F1FA}",
  cape_verde: "\u{1F1E8}\u{1F1FB}",
  curacao: "\u{1F1E8}\u{1F1FC}",
  christmas_island: "\u{1F1E8}\u{1F1FD}",
  cyprus: "\u{1F1E8}\u{1F1FE}",
  czech_republic: "\u{1F1E8}\u{1F1FF}",
  de: "\u{1F1E9}\u{1F1EA}",
  diego_garcia: "\u{1F1E9}\u{1F1EC}",
  djibouti: "\u{1F1E9}\u{1F1EF}",
  denmark: "\u{1F1E9}\u{1F1F0}",
  dominica: "\u{1F1E9}\u{1F1F2}",
  dominican_republic: "\u{1F1E9}\u{1F1F4}",
  algeria: "\u{1F1E9}\u{1F1FF}",
  ceuta_melilla: "\u{1F1EA}\u{1F1E6}",
  ecuador: "\u{1F1EA}\u{1F1E8}",
  estonia: "\u{1F1EA}\u{1F1EA}",
  egypt: "\u{1F1EA}\u{1F1EC}",
  western_sahara: "\u{1F1EA}\u{1F1ED}",
  eritrea: "\u{1F1EA}\u{1F1F7}",
  es: "\u{1F1EA}\u{1F1F8}",
  ethiopia: "\u{1F1EA}\u{1F1F9}",
  eu: "\u{1F1EA}\u{1F1FA}",
  european_union: "\u{1F1EA}\u{1F1FA}",
  finland: "\u{1F1EB}\u{1F1EE}",
  fiji: "\u{1F1EB}\u{1F1EF}",
  falkland_islands: "\u{1F1EB}\u{1F1F0}",
  micronesia: "\u{1F1EB}\u{1F1F2}",
  faroe_islands: "\u{1F1EB}\u{1F1F4}",
  fr: "\u{1F1EB}\u{1F1F7}",
  gabon: "\u{1F1EC}\u{1F1E6}",
  gb: "\u{1F1EC}\u{1F1E7}",
  uk: "\u{1F1EC}\u{1F1E7}",
  grenada: "\u{1F1EC}\u{1F1E9}",
  georgia: "\u{1F1EC}\u{1F1EA}",
  french_guiana: "\u{1F1EC}\u{1F1EB}",
  guernsey: "\u{1F1EC}\u{1F1EC}",
  ghana: "\u{1F1EC}\u{1F1ED}",
  gibraltar: "\u{1F1EC}\u{1F1EE}",
  greenland: "\u{1F1EC}\u{1F1F1}",
  gambia: "\u{1F1EC}\u{1F1F2}",
  guinea: "\u{1F1EC}\u{1F1F3}",
  guadeloupe: "\u{1F1EC}\u{1F1F5}",
  equatorial_guinea: "\u{1F1EC}\u{1F1F6}",
  greece: "\u{1F1EC}\u{1F1F7}",
  south_georgia_south_sandwich_islands: "\u{1F1EC}\u{1F1F8}",
  guatemala: "\u{1F1EC}\u{1F1F9}",
  guam: "\u{1F1EC}\u{1F1FA}",
  guinea_bissau: "\u{1F1EC}\u{1F1FC}",
  guyana: "\u{1F1EC}\u{1F1FE}",
  hong_kong: "\u{1F1ED}\u{1F1F0}",
  heard_mcdonald_islands: "\u{1F1ED}\u{1F1F2}",
  honduras: "\u{1F1ED}\u{1F1F3}",
  croatia: "\u{1F1ED}\u{1F1F7}",
  haiti: "\u{1F1ED}\u{1F1F9}",
  hungary: "\u{1F1ED}\u{1F1FA}",
  canary_islands: "\u{1F1EE}\u{1F1E8}",
  indonesia: "\u{1F1EE}\u{1F1E9}",
  ireland: "\u{1F1EE}\u{1F1EA}",
  israel: "\u{1F1EE}\u{1F1F1}",
  isle_of_man: "\u{1F1EE}\u{1F1F2}",
  india: "\u{1F1EE}\u{1F1F3}",
  british_indian_ocean_territory: "\u{1F1EE}\u{1F1F4}",
  iraq: "\u{1F1EE}\u{1F1F6}",
  iran: "\u{1F1EE}\u{1F1F7}",
  iceland: "\u{1F1EE}\u{1F1F8}",
  it: "\u{1F1EE}\u{1F1F9}",
  jersey: "\u{1F1EF}\u{1F1EA}",
  jamaica: "\u{1F1EF}\u{1F1F2}",
  jordan: "\u{1F1EF}\u{1F1F4}",
  jp: "\u{1F1EF}\u{1F1F5}",
  kenya: "\u{1F1F0}\u{1F1EA}",
  kyrgyzstan: "\u{1F1F0}\u{1F1EC}",
  cambodia: "\u{1F1F0}\u{1F1ED}",
  kiribati: "\u{1F1F0}\u{1F1EE}",
  comoros: "\u{1F1F0}\u{1F1F2}",
  st_kitts_nevis: "\u{1F1F0}\u{1F1F3}",
  north_korea: "\u{1F1F0}\u{1F1F5}",
  kr: "\u{1F1F0}\u{1F1F7}",
  kuwait: "\u{1F1F0}\u{1F1FC}",
  cayman_islands: "\u{1F1F0}\u{1F1FE}",
  kazakhstan: "\u{1F1F0}\u{1F1FF}",
  laos: "\u{1F1F1}\u{1F1E6}",
  lebanon: "\u{1F1F1}\u{1F1E7}",
  st_lucia: "\u{1F1F1}\u{1F1E8}",
  liechtenstein: "\u{1F1F1}\u{1F1EE}",
  sri_lanka: "\u{1F1F1}\u{1F1F0}",
  liberia: "\u{1F1F1}\u{1F1F7}",
  lesotho: "\u{1F1F1}\u{1F1F8}",
  lithuania: "\u{1F1F1}\u{1F1F9}",
  luxembourg: "\u{1F1F1}\u{1F1FA}",
  latvia: "\u{1F1F1}\u{1F1FB}",
  libya: "\u{1F1F1}\u{1F1FE}",
  morocco: "\u{1F1F2}\u{1F1E6}",
  monaco: "\u{1F1F2}\u{1F1E8}",
  moldova: "\u{1F1F2}\u{1F1E9}",
  montenegro: "\u{1F1F2}\u{1F1EA}",
  st_martin: "\u{1F1F2}\u{1F1EB}",
  madagascar: "\u{1F1F2}\u{1F1EC}",
  marshall_islands: "\u{1F1F2}\u{1F1ED}",
  macedonia: "\u{1F1F2}\u{1F1F0}",
  mali: "\u{1F1F2}\u{1F1F1}",
  myanmar: "\u{1F1F2}\u{1F1F2}",
  mongolia: "\u{1F1F2}\u{1F1F3}",
  macau: "\u{1F1F2}\u{1F1F4}",
  northern_mariana_islands: "\u{1F1F2}\u{1F1F5}",
  martinique: "\u{1F1F2}\u{1F1F6}",
  mauritania: "\u{1F1F2}\u{1F1F7}",
  montserrat: "\u{1F1F2}\u{1F1F8}",
  malta: "\u{1F1F2}\u{1F1F9}",
  mauritius: "\u{1F1F2}\u{1F1FA}",
  maldives: "\u{1F1F2}\u{1F1FB}",
  malawi: "\u{1F1F2}\u{1F1FC}",
  mexico: "\u{1F1F2}\u{1F1FD}",
  malaysia: "\u{1F1F2}\u{1F1FE}",
  mozambique: "\u{1F1F2}\u{1F1FF}",
  namibia: "\u{1F1F3}\u{1F1E6}",
  new_caledonia: "\u{1F1F3}\u{1F1E8}",
  niger: "\u{1F1F3}\u{1F1EA}",
  norfolk_island: "\u{1F1F3}\u{1F1EB}",
  nigeria: "\u{1F1F3}\u{1F1EC}",
  nicaragua: "\u{1F1F3}\u{1F1EE}",
  netherlands: "\u{1F1F3}\u{1F1F1}",
  norway: "\u{1F1F3}\u{1F1F4}",
  nepal: "\u{1F1F3}\u{1F1F5}",
  nauru: "\u{1F1F3}\u{1F1F7}",
  niue: "\u{1F1F3}\u{1F1FA}",
  new_zealand: "\u{1F1F3}\u{1F1FF}",
  oman: "\u{1F1F4}\u{1F1F2}",
  panama: "\u{1F1F5}\u{1F1E6}",
  peru: "\u{1F1F5}\u{1F1EA}",
  french_polynesia: "\u{1F1F5}\u{1F1EB}",
  papua_new_guinea: "\u{1F1F5}\u{1F1EC}",
  philippines: "\u{1F1F5}\u{1F1ED}",
  pakistan: "\u{1F1F5}\u{1F1F0}",
  poland: "\u{1F1F5}\u{1F1F1}",
  st_pierre_miquelon: "\u{1F1F5}\u{1F1F2}",
  pitcairn_islands: "\u{1F1F5}\u{1F1F3}",
  puerto_rico: "\u{1F1F5}\u{1F1F7}",
  palestinian_territories: "\u{1F1F5}\u{1F1F8}",
  portugal: "\u{1F1F5}\u{1F1F9}",
  palau: "\u{1F1F5}\u{1F1FC}",
  paraguay: "\u{1F1F5}\u{1F1FE}",
  qatar: "\u{1F1F6}\u{1F1E6}",
  reunion: "\u{1F1F7}\u{1F1EA}",
  romania: "\u{1F1F7}\u{1F1F4}",
  serbia: "\u{1F1F7}\u{1F1F8}",
  ru: "\u{1F1F7}\u{1F1FA}",
  rwanda: "\u{1F1F7}\u{1F1FC}",
  saudi_arabia: "\u{1F1F8}\u{1F1E6}",
  solomon_islands: "\u{1F1F8}\u{1F1E7}",
  seychelles: "\u{1F1F8}\u{1F1E8}",
  sudan: "\u{1F1F8}\u{1F1E9}",
  sweden: "\u{1F1F8}\u{1F1EA}",
  singapore: "\u{1F1F8}\u{1F1EC}",
  st_helena: "\u{1F1F8}\u{1F1ED}",
  slovenia: "\u{1F1F8}\u{1F1EE}",
  svalbard_jan_mayen: "\u{1F1F8}\u{1F1EF}",
  slovakia: "\u{1F1F8}\u{1F1F0}",
  sierra_leone: "\u{1F1F8}\u{1F1F1}",
  san_marino: "\u{1F1F8}\u{1F1F2}",
  senegal: "\u{1F1F8}\u{1F1F3}",
  somalia: "\u{1F1F8}\u{1F1F4}",
  suriname: "\u{1F1F8}\u{1F1F7}",
  south_sudan: "\u{1F1F8}\u{1F1F8}",
  sao_tome_principe: "\u{1F1F8}\u{1F1F9}",
  el_salvador: "\u{1F1F8}\u{1F1FB}",
  sint_maarten: "\u{1F1F8}\u{1F1FD}",
  syria: "\u{1F1F8}\u{1F1FE}",
  swaziland: "\u{1F1F8}\u{1F1FF}",
  tristan_da_cunha: "\u{1F1F9}\u{1F1E6}",
  turks_caicos_islands: "\u{1F1F9}\u{1F1E8}",
  chad: "\u{1F1F9}\u{1F1E9}",
  french_southern_territories: "\u{1F1F9}\u{1F1EB}",
  togo: "\u{1F1F9}\u{1F1EC}",
  thailand: "\u{1F1F9}\u{1F1ED}",
  tajikistan: "\u{1F1F9}\u{1F1EF}",
  tokelau: "\u{1F1F9}\u{1F1F0}",
  timor_leste: "\u{1F1F9}\u{1F1F1}",
  turkmenistan: "\u{1F1F9}\u{1F1F2}",
  tunisia: "\u{1F1F9}\u{1F1F3}",
  tonga: "\u{1F1F9}\u{1F1F4}",
  tr: "\u{1F1F9}\u{1F1F7}",
  trinidad_tobago: "\u{1F1F9}\u{1F1F9}",
  tuvalu: "\u{1F1F9}\u{1F1FB}",
  taiwan: "\u{1F1F9}\u{1F1FC}",
  tanzania: "\u{1F1F9}\u{1F1FF}",
  ukraine: "\u{1F1FA}\u{1F1E6}",
  uganda: "\u{1F1FA}\u{1F1EC}",
  us_outlying_islands: "\u{1F1FA}\u{1F1F2}",
  united_nations: "\u{1F1FA}\u{1F1F3}",
  us: "\u{1F1FA}\u{1F1F8}",
  uruguay: "\u{1F1FA}\u{1F1FE}",
  uzbekistan: "\u{1F1FA}\u{1F1FF}",
  vatican_city: "\u{1F1FB}\u{1F1E6}",
  st_vincent_grenadines: "\u{1F1FB}\u{1F1E8}",
  venezuela: "\u{1F1FB}\u{1F1EA}",
  british_virgin_islands: "\u{1F1FB}\u{1F1EC}",
  us_virgin_islands: "\u{1F1FB}\u{1F1EE}",
  vietnam: "\u{1F1FB}\u{1F1F3}",
  vanuatu: "\u{1F1FB}\u{1F1FA}",
  wallis_futuna: "\u{1F1FC}\u{1F1EB}",
  samoa: "\u{1F1FC}\u{1F1F8}",
  kosovo: "\u{1F1FD}\u{1F1F0}",
  yemen: "\u{1F1FE}\u{1F1EA}",
  mayotte: "\u{1F1FE}\u{1F1F9}",
  south_africa: "\u{1F1FF}\u{1F1E6}",
  zambia: "\u{1F1FF}\u{1F1F2}",
  zimbabwe: "\u{1F1FF}\u{1F1FC}",
  england: "\u{1F3F4}\u{E0067}\u{E0062}\u{E0065}\u{E006E}\u{E0067}\u{E007F}",
  scotland: "\u{1F3F4}\u{E0067}\u{E0062}\u{E0073}\u{E0063}\u{E0074}\u{E007F}",
  wales: "\u{1F3F4}\u{E0067}\u{E0062}\u{E0077}\u{E006C}\u{E0073}\u{E007F}",
};

// ../../node_modules/remark-gemoji/index.js
var find2 = /:(\+1|[-\w]+):/g,
  own12 = {}.hasOwnProperty;
function remarkGemoji() {
  return (tree) => {
    visit(tree, "text", (node) => {
      let value = node.value,
        slices = [];
      find2.lastIndex = 0;
      let match = find2.exec(value),
        start = 0;
      for (; match; ) {
        let emoji = match[1],
          position3 = match.index;
        own12.call(nameToEmoji, emoji)
          ? (start !== position3 && slices.push(value.slice(start, position3)),
            slices.push(nameToEmoji[emoji]),
            (start = position3 + match[0].length))
          : (find2.lastIndex = position3 + 1),
          (match = find2.exec(value));
      }
      slices.length > 0 &&
        (slices.push(value.slice(start)), (node.value = slices.join("")));
    });
  };
}

// ../../node_modules/rehype-katex/index.js
var import_katex2 = __toESM(require("katex"), 1);

// ../../node_modules/unist-util-remove-position/index.js
var removePosition = function (node, force) {
  return visit(node, remove), node;
  function remove(node2) {
    force ? delete node2.position : (node2.position = void 0);
  }
};

// ../../node_modules/hast-util-is-element/index.js
var convertElement = function (test) {
  if (test == null) return element;
  if (typeof test == "string") return tagNameFactory(test);
  if (typeof test == "object") return anyFactory2(test);
  if (typeof test == "function") return castFactory2(test);
  throw new Error("Expected function, string, or array as test");
};
function anyFactory2(tests) {
  let checks2 = [],
    index2 = -1;
  for (; ++index2 < tests.length; )
    checks2[index2] = convertElement(tests[index2]);
  return castFactory2(any);
  function any(...parameters) {
    let index3 = -1;
    for (; ++index3 < checks2.length; )
      if (checks2[index3].call(this, ...parameters)) return !0;
    return !1;
  }
}
function tagNameFactory(check) {
  return tagName;
  function tagName(node) {
    return element(node) && node.tagName === check;
  }
}
function castFactory2(check) {
  return assertion;
  function assertion(node, ...parameters) {
    return element(node) && Boolean(check.call(this, node, ...parameters));
  }
}
function element(node) {
  return Boolean(
    node &&
      typeof node == "object" &&
      node.type === "element" &&
      typeof node.tagName == "string"
  );
}

// ../../node_modules/unist-util-find-after/index.js
var findAfter = function (parent, index2, test) {
  var is = convert(test);
  if (!parent || !parent.type || !parent.children)
    throw new Error("Expected parent node");
  if (typeof index2 == "number") {
    if (index2 < 0 || index2 === Number.POSITIVE_INFINITY)
      throw new Error("Expected positive finite number as index");
  } else if (((index2 = parent.children.indexOf(index2)), index2 < 0))
    throw new Error("Expected child node or index");
  for (; ++index2 < parent.children.length; )
    if (is(parent.children[index2], index2, parent))
      return parent.children[index2];
  return null;
};

// ../../node_modules/hast-util-to-text/index.js
var searchLineFeeds = /\n/g,
  searchTabOrSpaces = /[\t ]+/g,
  br = convertElement("br"),
  p = convertElement("p"),
  cell = convertElement(["th", "td"]),
  row = convertElement("tr"),
  notRendered = convertElement([
    "datalist",
    "head",
    "noembed",
    "noframes",
    "noscript",
    "rp",
    "script",
    "style",
    "template",
    "title",
    hidden,
    closedDialog,
  ]),
  blockOrCaption = convertElement([
    "address",
    "article",
    "aside",
    "blockquote",
    "body",
    "caption",
    "center",
    "dd",
    "dialog",
    "dir",
    "dl",
    "dt",
    "div",
    "figure",
    "figcaption",
    "footer",
    "form,",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "hr",
    "html",
    "legend",
    "listing",
    "main",
    "menu",
    "nav",
    "ol",
    "p",
    "plaintext",
    "pre",
    "section",
    "ul",
    "xmp",
  ]);
function toText(node, options = {}) {
  let children = node.children || [],
    block = blockOrCaption(node),
    whitespace2 = inferWhitespace(node, {
      whitespace: options.whitespace || "normal",
      breakBefore: !1,
      breakAfter: !1,
    }),
    index2 = -1,
    results,
    value,
    count;
  if (node.type === "text" || node.type === "comment")
    return collectText(node, {
      whitespace: whitespace2,
      breakBefore: !0,
      breakAfter: !0,
    });
  for (results = []; ++index2 < children.length; )
    results = results.concat(
      innerTextCollection(children[index2], node, {
        whitespace: whitespace2,
        breakBefore: index2 ? null : block,
        breakAfter:
          index2 < children.length - 1 ? br(children[index2 + 1]) : block,
      })
    );
  index2 = -1;
  let result = [];
  for (; ++index2 < results.length; )
    (value = results[index2]),
      typeof value == "number"
        ? count !== void 0 && value > count && (count = value)
        : value &&
          (count &&
            result.push(
              `
`.repeat(count)
            ),
          (count = 0),
          result.push(value));
  return result.join("");
}
function innerTextCollection(node, parent, options) {
  return node.type === "element"
    ? collectElement(node, parent, options)
    : node.type === "text"
    ? [
        options.whitespace === "normal"
          ? collectText(node, options)
          : collectPreText(node),
      ]
    : [];
}
function collectElement(node, parent, options) {
  let whitespace2 = inferWhitespace(node, options),
    children = node.children || [],
    index2 = -1,
    items = [],
    prefix,
    suffix;
  if (notRendered(node)) return items;
  for (
    br(node) || (row(node) && findAfter(parent, node, row))
      ? (suffix = `
`)
      : p(node)
      ? ((prefix = 2), (suffix = 2))
      : blockOrCaption(node) && ((prefix = 1), (suffix = 1));
    ++index2 < children.length;

  )
    items = items.concat(
      innerTextCollection(children[index2], node, {
        whitespace: whitespace2,
        breakBefore: index2 ? void 0 : prefix,
        breakAfter:
          index2 < children.length - 1 ? br(children[index2 + 1]) : suffix,
      })
    );
  return (
    cell(node) && findAfter(parent, node, cell) && items.push("	"),
    prefix && items.unshift(prefix),
    suffix && items.push(suffix),
    items
  );
}
function collectText(node, options) {
  let value = String(node.value),
    lines = [],
    result = [],
    start = 0,
    index2 = -1,
    match,
    end,
    join;
  for (; start < value.length; )
    (searchLineFeeds.lastIndex = start),
      (match = searchLineFeeds.exec(value)),
      (end = match ? match.index : value.length),
      lines.push(
        trimAndCollapseSpacesAndTabs(
          value
            .slice(start, end)
            .replace(/[\u061C\u200E\u200F\u202A-\u202E\u2066-\u2069]/g, ""),
          options.breakBefore,
          options.breakAfter
        )
      ),
      (start = end + 1);
  for (; ++index2 < lines.length; )
    lines[index2].charCodeAt(lines[index2].length - 1) === 8203 ||
    (index2 < lines.length - 1 && lines[index2 + 1].charCodeAt(0) === 8203)
      ? (result.push(lines[index2]), (join = ""))
      : lines[index2] &&
        (join && result.push(join), result.push(lines[index2]), (join = " "));
  return result.join("");
}
function collectPreText(node) {
  return String(node.value);
}
function trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {
  let result = [],
    start = 0,
    match,
    end;
  for (; start < value.length; )
    (searchTabOrSpaces.lastIndex = start),
      (match = searchTabOrSpaces.exec(value)),
      (end = match ? match.index : value.length),
      !start && !end && match && !breakBefore && result.push(""),
      start !== end && result.push(value.slice(start, end)),
      (start = match ? end + match[0].length : end);
  return start !== end && !breakAfter && result.push(""), result.join(" ");
}
function inferWhitespace(node, options) {
  let props;
  if (node.type === "element")
    switch (((props = node.properties || {}), node.tagName)) {
      case "listing":
      case "plaintext":
      case "xmp":
        return "pre";
      case "nobr":
        return "nowrap";
      case "pre":
        return props.wrap ? "pre-wrap" : "pre";
      case "td":
      case "th":
        return props.noWrap ? "nowrap" : options.whitespace;
      case "textarea":
        return "pre-wrap";
      default:
    }
  return options.whitespace;
}
function hidden(node) {
  return Boolean((node.properties || {}).hidden);
}
function closedDialog(node) {
  return node.tagName === "dialog" && !(node.properties || {}).open;
}

// ../../node_modules/rehype-parse/lib/index.js
var import_parser = __toESM(require("parse5/lib/parser/index.js"), 1);

// ../../node_modules/hast-util-parse-selector/index.js
var search2 = /[#.]/g,
  parseSelector = function (selector, defaultTagName = "div") {
    for (
      var value = selector || "",
        props = {},
        start = 0,
        subvalue,
        previous4,
        match;
      start < value.length;

    )
      (search2.lastIndex = start),
        (match = search2.exec(value)),
        (subvalue = value.slice(start, match ? match.index : value.length)),
        subvalue &&
          (previous4
            ? previous4 === "#"
              ? (props.id = subvalue)
              : Array.isArray(props.className)
              ? props.className.push(subvalue)
              : (props.className = [subvalue])
            : (defaultTagName = subvalue),
          (start += subvalue.length)),
        match && ((previous4 = match[0]), start++);
    return {
      type: "element",
      tagName: defaultTagName,
      properties: props,
      children: [],
    };
  };

// ../../node_modules/hastscript/lib/core.js
var buttonTypes = /* @__PURE__ */ new Set([
    "menu",
    "submit",
    "reset",
    "button",
  ]),
  own13 = {}.hasOwnProperty;
function core(schema, defaultTagName, caseSensitive) {
  let adjust = caseSensitive && createAdjustMap(caseSensitive);
  return function (selector, properties, ...children) {
    let index2 = -1,
      node;
    if (selector == null)
      (node = { type: "root", children: [] }), children.unshift(properties);
    else if (
      ((node = parseSelector(selector, defaultTagName)),
      (node.tagName = node.tagName.toLowerCase()),
      adjust &&
        own13.call(adjust, node.tagName) &&
        (node.tagName = adjust[node.tagName]),
      isProperties(properties, node.tagName))
    ) {
      let key;
      for (key in properties)
        own13.call(properties, key) &&
          addProperty2(schema, node.properties, key, properties[key]);
    } else children.unshift(properties);
    for (; ++index2 < children.length; )
      addChild(node.children, children[index2]);
    return (
      node.type === "element" &&
        node.tagName === "template" &&
        ((node.content = { type: "root", children: node.children }),
        (node.children = [])),
      node
    );
  };
}
function isProperties(value, name) {
  return value == null || typeof value != "object" || Array.isArray(value)
    ? !1
    : name === "input" || !value.type || typeof value.type != "string"
    ? !0
    : "children" in value && Array.isArray(value.children)
    ? !1
    : name === "button"
    ? buttonTypes.has(value.type.toLowerCase())
    : !("value" in value);
}
function addProperty2(schema, properties, key, value) {
  let info2 = find(schema, key),
    index2 = -1,
    result;
  if (value != null) {
    if (typeof value == "number") {
      if (Number.isNaN(value)) return;
      result = value;
    } else
      typeof value == "boolean"
        ? (result = value)
        : typeof value == "string"
        ? info2.spaceSeparated
          ? (result = parse2(value))
          : info2.commaSeparated
          ? (result = parse3(value))
          : info2.commaOrSpaceSeparated
          ? (result = parse2(parse3(value).join(" ")))
          : (result = parsePrimitive(info2, info2.property, value))
        : Array.isArray(value)
        ? (result = value.concat())
        : (result = info2.property === "style" ? style2(value) : String(value));
    if (Array.isArray(result)) {
      let finalResult = [];
      for (; ++index2 < result.length; )
        finalResult[index2] = parsePrimitive(
          info2,
          info2.property,
          result[index2]
        );
      result = finalResult;
    }
    info2.property === "className" &&
      Array.isArray(properties.className) &&
      (result = properties.className.concat(result)),
      (properties[info2.property] = result);
  }
}
function addChild(nodes2, value) {
  let index2 = -1;
  if (value != null)
    if (typeof value == "string" || typeof value == "number")
      nodes2.push({ type: "text", value: String(value) });
    else if (Array.isArray(value))
      for (; ++index2 < value.length; ) addChild(nodes2, value[index2]);
    else if (typeof value == "object" && "type" in value)
      value.type === "root"
        ? addChild(nodes2, value.children)
        : nodes2.push(value);
    else
      throw new Error("Expected node, nodes, or string, got `" + value + "`");
}
function parsePrimitive(info2, name, value) {
  if (typeof value == "string") {
    if (info2.number && value && !Number.isNaN(Number(value)))
      return Number(value);
    if (
      (info2.boolean || info2.overloadedBoolean) &&
      (value === "" || normalize5(value) === normalize5(name))
    )
      return !0;
  }
  return value;
}
function style2(value) {
  let result = [],
    key;
  for (key in value)
    own13.call(value, key) && result.push([key, value[key]].join(": "));
  return result.join("; ");
}
function createAdjustMap(values) {
  let result = {},
    index2 = -1;
  for (; ++index2 < values.length; )
    result[values[index2].toLowerCase()] = values[index2];
  return result;
}

// ../../node_modules/hastscript/lib/html.js
var h = core(html3, "div");

// ../../node_modules/hastscript/lib/svg-case-sensitive-tag-names.js
var svgCaseSensitiveTagNames = [
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feDropShadow",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "solidColor",
  "textArea",
  "textPath",
];

// ../../node_modules/hastscript/lib/svg.js
var s = core(svg2, "g", svgCaseSensitiveTagNames);

// ../../node_modules/vfile-location/index.js
function location(file) {
  for (
    var value = String(file), indices = [], search3 = /\r?\n|\r/g;
    search3.test(value);

  )
    indices.push(search3.lastIndex);
  return indices.push(value.length + 1), { toPoint, toOffset };
  function toPoint(offset) {
    var index2 = -1;
    if (offset > -1 && offset < indices[indices.length - 1]) {
      for (; ++index2 < indices.length; )
        if (indices[index2] > offset)
          return {
            line: index2 + 1,
            column: offset - (indices[index2 - 1] || 0) + 1,
            offset,
          };
    }
    return { line: void 0, column: void 0, offset: void 0 };
  }
  function toOffset(point4) {
    var line = point4 && point4.line,
      column = point4 && point4.column,
      offset;
    return (
      typeof line == "number" &&
        typeof column == "number" &&
        !Number.isNaN(line) &&
        !Number.isNaN(column) &&
        line - 1 in indices &&
        (offset = (indices[line - 2] || 0) + column - 1 || 0),
      offset > -1 && offset < indices[indices.length - 1] ? offset : -1
    );
  }
}

// ../../node_modules/web-namespaces/index.js
var webNamespaces = {
  html: "http://www.w3.org/1999/xhtml",
  mathml: "http://www.w3.org/1998/Math/MathML",
  svg: "http://www.w3.org/2000/svg",
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/",
};

// ../../node_modules/hast-util-from-parse5/lib/index.js
var own14 = {}.hasOwnProperty,
  map2 = {
    "#document": root2,
    "#document-fragment": root2,
    "#text": text5,
    "#comment": comment,
    "#documentType": doctype,
  };
function fromParse5(ast, options = {}) {
  let settings, file;
  return (
    isFile(options)
      ? ((file = options), (settings = {}))
      : ((file = options.file), (settings = options)),
    transform(
      {
        schema: settings.space === "svg" ? svg2 : html3,
        file,
        verbose: settings.verbose,
        location: !1,
      },
      ast
    )
  );
}
function transform(ctx, ast) {
  let schema = ctx.schema,
    fn = own14.call(map2, ast.nodeName) ? map2[ast.nodeName] : element2,
    children;
  "tagName" in ast &&
    (ctx.schema = ast.namespaceURI === webNamespaces.svg ? svg2 : html3),
    "childNodes" in ast && (children = nodes(ctx, ast.childNodes));
  let result = fn(ctx, ast, children);
  if ("sourceCodeLocation" in ast && ast.sourceCodeLocation && ctx.file) {
    let position3 = createLocation(ctx, result, ast.sourceCodeLocation);
    position3 && ((ctx.location = !0), (result.position = position3));
  }
  return (ctx.schema = schema), result;
}
function nodes(ctx, children) {
  let index2 = -1,
    result = [];
  for (; ++index2 < children.length; )
    result[index2] = transform(ctx, children[index2]);
  return result;
}
function root2(ctx, ast, children) {
  let result = {
    type: "root",
    children,
    data: {
      quirksMode: ast.mode === "quirks" || ast.mode === "limited-quirks",
    },
  };
  if (ctx.file && ctx.location) {
    let doc = String(ctx.file),
      loc = location(doc);
    result.position = {
      start: loc.toPoint(0),
      end: loc.toPoint(doc.length),
    };
  }
  return result;
}
function doctype() {
  return { type: "doctype" };
}
function text5(_, ast) {
  return { type: "text", value: ast.value };
}
function comment(_, ast) {
  return { type: "comment", value: ast.data };
}
function element2(ctx, ast, children) {
  let fn = ctx.schema.space === "svg" ? s : h,
    index2 = -1,
    props = {};
  for (; ++index2 < ast.attrs.length; ) {
    let attribute = ast.attrs[index2];
    props[(attribute.prefix ? attribute.prefix + ":" : "") + attribute.name] =
      attribute.value;
  }
  let result = fn(ast.tagName, props, children);
  if (result.tagName === "template" && "content" in ast) {
    let pos = ast.sourceCodeLocation,
      startTag2 = pos && pos.startTag && position2(pos.startTag),
      endTag2 = pos && pos.endTag && position2(pos.endTag),
      content3 = transform(ctx, ast.content);
    startTag2 &&
      endTag2 &&
      ctx.file &&
      (content3.position = { start: startTag2.end, end: endTag2.start }),
      (result.content = content3);
  }
  return result;
}
function createLocation(ctx, node, location2) {
  let result = position2(location2);
  if (node.type === "element") {
    let tail = node.children[node.children.length - 1];
    if (
      (result &&
        !location2.endTag &&
        tail &&
        tail.position &&
        tail.position.end &&
        (result.end = Object.assign({}, tail.position.end)),
      ctx.verbose)
    ) {
      let props = {},
        key;
      for (key in location2.attrs)
        own14.call(location2.attrs, key) &&
          (props[find(ctx.schema, key).property] = position2(
            location2.attrs[key]
          ));
      node.data = {
        position: {
          opening: position2(location2.startTag),
          closing: location2.endTag ? position2(location2.endTag) : null,
          properties: props,
        },
      };
    }
  }
  return result;
}
function position2(loc) {
  let start = point3({
      line: loc.startLine,
      column: loc.startCol,
      offset: loc.startOffset,
    }),
    end = point3({
      line: loc.endLine,
      column: loc.endCol,
      offset: loc.endOffset,
    });
  return start || end ? { start, end } : null;
}
function point3(point4) {
  return point4.line && point4.column ? point4 : null;
}
function isFile(value) {
  return "messages" in value;
}

// ../../node_modules/rehype-parse/lib/errors.js
var errors = {
  abandonedHeadElementChild: {
    reason: "Unexpected metadata element after head",
    description:
      "Unexpected element after head. Expected the element before `</head>`",
    url: !1,
  },
  abruptClosingOfEmptyComment: {
    reason: "Unexpected abruptly closed empty comment",
    description: "Unexpected `>` or `->`. Expected `-->` to close comments",
  },
  abruptDoctypePublicIdentifier: {
    reason: "Unexpected abruptly closed public identifier",
    description:
      "Unexpected `>`. Expected a closing `\"` or `'` after the public identifier",
  },
  abruptDoctypeSystemIdentifier: {
    reason: "Unexpected abruptly closed system identifier",
    description:
      "Unexpected `>`. Expected a closing `\"` or `'` after the identifier identifier",
  },
  absenceOfDigitsInNumericCharacterReference: {
    reason: "Unexpected non-digit at start of numeric character reference",
    description:
      "Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references",
  },
  cdataInHtmlContent: {
    reason: "Unexpected CDATA section in HTML",
    description:
      "Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead",
  },
  characterReferenceOutsideUnicodeRange: {
    reason: "Unexpected too big numeric character reference",
    description:
      "Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)",
  },
  closingOfElementWithOpenChildElements: {
    reason: "Unexpected closing tag with open child elements",
    description:
      "Unexpectedly closing tag. Expected other tags to be closed first",
    url: !1,
  },
  controlCharacterInInputStream: {
    reason: "Unexpected control character",
    description:
      "Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace",
  },
  controlCharacterReference: {
    reason: "Unexpected control character reference",
    description:
      "Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace",
  },
  disallowedContentInNoscriptInHead: {
    reason: "Disallowed content inside `<noscript>` in `<head>`",
    description:
      "Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`",
    url: !1,
  },
  duplicateAttribute: {
    reason: "Unexpected duplicate attribute",
    description:
      "Unexpectedly double attribute. Expected attributes to occur only once",
  },
  endTagWithAttributes: {
    reason: "Unexpected attribute on closing tag",
    description: "Unexpected attribute. Expected `>` instead",
  },
  endTagWithTrailingSolidus: {
    reason: "Unexpected slash at end of closing tag",
    description: "Unexpected `%c-1`. Expected `>` instead",
  },
  endTagWithoutMatchingOpenElement: {
    reason: "Unexpected unopened end tag",
    description: "Unexpected end tag. Expected no end tag or another end tag",
    url: !1,
  },
  eofBeforeTagName: {
    reason: "Unexpected end of file",
    description: "Unexpected end of file. Expected tag name instead",
  },
  eofInCdata: {
    reason: "Unexpected end of file in CDATA",
    description: "Unexpected end of file. Expected `]]>` to close the CDATA",
  },
  eofInComment: {
    reason: "Unexpected end of file in comment",
    description: "Unexpected end of file. Expected `-->` to close the comment",
  },
  eofInDoctype: {
    reason: "Unexpected end of file in doctype",
    description:
      "Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)",
  },
  eofInElementThatCanContainOnlyText: {
    reason: "Unexpected end of file in element that can only contain text",
    description: "Unexpected end of file. Expected text or a closing tag",
    url: !1,
  },
  eofInScriptHtmlCommentLikeText: {
    reason: "Unexpected end of file in comment inside script",
    description: "Unexpected end of file. Expected `-->` to close the comment",
  },
  eofInTag: {
    reason: "Unexpected end of file in tag",
    description: "Unexpected end of file. Expected `>` to close the tag",
  },
  incorrectlyClosedComment: {
    reason: "Incorrectly closed comment",
    description: "Unexpected `%c-1`. Expected `-->` to close the comment",
  },
  incorrectlyOpenedComment: {
    reason: "Incorrectly opened comment",
    description: "Unexpected `%c`. Expected `<!--` to open the comment",
  },
  invalidCharacterSequenceAfterDoctypeName: {
    reason: "Invalid sequence after doctype name",
    description: "Unexpected sequence at `%c`. Expected `public` or `system`",
  },
  invalidFirstCharacterOfTagName: {
    reason: "Invalid first character in tag name",
    description: "Unexpected `%c`. Expected an ASCII letter instead",
  },
  misplacedDoctype: {
    reason: "Misplaced doctype",
    description: "Unexpected doctype. Expected doctype before head",
    url: !1,
  },
  misplacedStartTagForHeadElement: {
    reason: "Misplaced `<head>` start tag",
    description:
      "Unexpected start tag `<head>`. Expected `<head>` directly after doctype",
    url: !1,
  },
  missingAttributeValue: {
    reason: "Missing attribute value",
    description:
      "Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead",
  },
  missingDoctype: {
    reason: "Missing doctype before other content",
    description: "Expected a `<!doctype html>` before anything else",
    url: !1,
  },
  missingDoctypeName: {
    reason: "Missing doctype name",
    description: "Unexpected doctype end at `%c`. Expected `html` instead",
  },
  missingDoctypePublicIdentifier: {
    reason: "Missing public identifier in doctype",
    description: "Unexpected `%c`. Expected identifier for `public` instead",
  },
  missingDoctypeSystemIdentifier: {
    reason: "Missing system identifier in doctype",
    description:
      'Unexpected `%c`. Expected identifier for `system` instead (suggested: `"about:legacy-compat"`)',
  },
  missingEndTagName: {
    reason: "Missing name in end tag",
    description: "Unexpected `%c`. Expected an ASCII letter instead",
  },
  missingQuoteBeforeDoctypePublicIdentifier: {
    reason: "Missing quote before public identifier in doctype",
    description: "Unexpected `%c`. Expected `\"` or `'` instead",
  },
  missingQuoteBeforeDoctypeSystemIdentifier: {
    reason: "Missing quote before system identifier in doctype",
    description: "Unexpected `%c`. Expected `\"` or `'` instead",
  },
  missingSemicolonAfterCharacterReference: {
    reason: "Missing semicolon after character reference",
    description: "Unexpected `%c`. Expected `;` instead",
  },
  missingWhitespaceAfterDoctypePublicKeyword: {
    reason: "Missing whitespace after public identifier in doctype",
    description: "Unexpected `%c`. Expected ASCII whitespace instead",
  },
  missingWhitespaceAfterDoctypeSystemKeyword: {
    reason: "Missing whitespace after system identifier in doctype",
    description: "Unexpected `%c`. Expected ASCII whitespace instead",
  },
  missingWhitespaceBeforeDoctypeName: {
    reason: "Missing whitespace before doctype name",
    description: "Unexpected `%c`. Expected ASCII whitespace instead",
  },
  missingWhitespaceBetweenAttributes: {
    reason: "Missing whitespace between attributes",
    description: "Unexpected `%c`. Expected ASCII whitespace instead",
  },
  missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {
    reason:
      "Missing whitespace between public and system identifiers in doctype",
    description: "Unexpected `%c`. Expected ASCII whitespace instead",
  },
  nestedComment: {
    reason: "Unexpected nested comment",
    description: "Unexpected `<!--`. Expected `-->`",
  },
  nestedNoscriptInHead: {
    reason: "Unexpected nested `<noscript>` in `<head>`",
    description:
      "Unexpected `<noscript>`. Expected a closing tag or a meta element",
    url: !1,
  },
  nonConformingDoctype: {
    reason: "Unexpected non-conforming doctype declaration",
    description:
      'Expected `<!doctype html>` or `<!doctype html system "about:legacy-compat">`',
    url: !1,
  },
  nonVoidHtmlElementStartTagWithTrailingSolidus: {
    reason: "Unexpected trailing slash on start tag of non-void element",
    description: "Unexpected `/`. Expected `>` instead",
  },
  noncharacterCharacterReference: {
    reason:
      "Unexpected noncharacter code point referenced by character reference",
    description: "Unexpected code point. Do not use noncharacters in HTML",
  },
  noncharacterInInputStream: {
    reason: "Unexpected noncharacter character",
    description: "Unexpected code point `%x`. Do not use noncharacters in HTML",
  },
  nullCharacterReference: {
    reason: "Unexpected NULL character referenced by character reference",
    description: "Unexpected code point. Do not use NULL characters in HTML",
  },
  openElementsLeftAfterEof: {
    reason: "Unexpected end of file",
    description: "Unexpected end of file. Expected closing tag instead",
    url: !1,
  },
  surrogateCharacterReference: {
    reason: "Unexpected surrogate character referenced by character reference",
    description:
      "Unexpected code point. Do not use lone surrogate characters in HTML",
  },
  surrogateInInputStream: {
    reason: "Unexpected surrogate character",
    description:
      "Unexpected code point `%x`. Do not use lone surrogate characters in HTML",
  },
  unexpectedCharacterAfterDoctypeSystemIdentifier: {
    reason: "Invalid character after system identifier in doctype",
    description: "Unexpected character at `%c`. Expected `>`",
  },
  unexpectedCharacterInAttributeName: {
    reason: "Unexpected character in attribute name",
    description:
      "Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter",
  },
  unexpectedCharacterInUnquotedAttributeValue: {
    reason: "Unexpected character in unquoted attribute value",
    description: "Unexpected `%c`. Quote the attribute value to include it",
  },
  unexpectedEqualsSignBeforeAttributeName: {
    reason: "Unexpected equals sign before attribute name",
    description: "Unexpected `%c`. Add an attribute name before it",
  },
  unexpectedNullCharacter: {
    reason: "Unexpected NULL character",
    description:
      "Unexpected code point `%x`. Do not use NULL characters in HTML",
  },
  unexpectedQuestionMarkInsteadOfTagName: {
    reason: "Unexpected question mark instead of tag name",
    description: "Unexpected `%c`. Expected an ASCII letter instead",
  },
  unexpectedSolidusInTag: {
    reason: "Unexpected slash in tag",
    description:
      "Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value",
  },
  unknownNamedCharacterReference: {
    reason: "Unexpected unknown named character reference",
    description:
      "Unexpected character reference. Expected known named character references",
  },
};

// ../../node_modules/rehype-parse/lib/index.js
var base2 = "https://html.spec.whatwg.org/multipage/parsing.html#parse-error-",
  fatalities = { 2: !0, 1: !1, 0: null };
function rehypeParse(options) {
  let processorSettings = this.data("settings"),
    settings = Object.assign({}, processorSettings, options);
  Object.assign(this, { Parser: parser });
  function parser(doc, file) {
    let fn = settings.fragment ? "parseFragment" : "parse",
      onParseError = settings.emitParseErrors ? onerror : null,
      parse5 = new import_parser.default({
        sourceCodeLocationInfo: !0,
        onParseError,
        scriptingEnabled: !1,
      });
    return fromParse5(parse5[fn](doc), {
      space: settings.space,
      file,
      verbose: settings.verbose,
    });
    function onerror(error2) {
      let code3 = error2.code,
        name = camelcase2(code3),
        setting = settings[name],
        config = setting ?? !0,
        level = typeof config == "number" ? config : config ? 1 : 0,
        start = {
          line: error2.startLine,
          column: error2.startCol,
          offset: error2.startOffset,
        },
        end = {
          line: error2.endLine,
          column: error2.endCol,
          offset: error2.endOffset,
        };
      if (level) {
        let info2 = errors[name] || { reason: "", description: "", url: "" },
          message = file.message(format(info2.reason), { start, end });
        (message.source = "parse-error"),
          (message.ruleId = code3),
          (message.fatal = fatalities[level]),
          (message.note = format(info2.description)),
          (message.url =
            "url" in info2 && info2.url === !1 ? null : base2 + code3);
      }
      function format(value) {
        return value
          .replace(/%c(?:-(\d+))?/g, (_, $1) => {
            let offset = $1 ? -Number.parseInt($1, 10) : 0,
              char = doc.charAt(error2.startOffset + offset);
            return char === "`" ? "` ` `" : char;
          })
          .replace(
            /%x/g,
            () =>
              "0x" +
              doc.charCodeAt(error2.startOffset).toString(16).toUpperCase()
          );
      }
    }
  }
}
function camelcase2(value) {
  return value.replace(/-[a-z]/g, ($0) => $0.charAt(1).toUpperCase());
}

// ../../node_modules/rehype-katex/index.js
var assign = Object.assign,
  parseHtml = unified().use(rehypeParse, { fragment: !0 }),
  source = "rehype-katex";
function rehypeKatex(options) {
  let settings = options || {},
    throwOnError = settings.throwOnError || !1;
  return (tree, file) => {
    visit(tree, "element", (element5) => {
      let classes =
          element5.properties && Array.isArray(element5.properties.className)
            ? element5.properties.className
            : [],
        inline = classes.includes("math-inline"),
        displayMode = classes.includes("math-display");
      if (!inline && !displayMode) return;
      let value = toText(element5, { whitespace: "pre" }),
        result;
      try {
        result = import_katex2.default.renderToString(
          value,
          assign({}, settings, { displayMode, throwOnError: !0 })
        );
      } catch (error_) {
        let error2 = error_,
          fn = throwOnError ? "fail" : "message",
          origin = [source, error2.name.toLowerCase()].join(":");
        file[fn](error2.message, element5.position, origin),
          (result = import_katex2.default.renderToString(
            value,
            assign({}, settings, {
              displayMode,
              throwOnError: !1,
              strict: "ignore",
            })
          ));
      }
      element5.children = removePosition(parseHtml.parse(result), !0).children;
    });
  };
}

// ../../node_modules/hast-util-raw/lib/index.js
var import_parser2 = __toESM(require("parse5/lib/parser/index.js"), 1);

// ../../node_modules/hast-to-hyperscript/index.js
var import_style_to_object2 = __toESM(require("style-to-object"), 1);
var ns = webNamespaces,
  toReact2 = hastToReact,
  own15 = {}.hasOwnProperty,
  root3 = convert("root"),
  element3 = convert("element"),
  text6 = convert("text");
function toH(h2, tree, options) {
  if (typeof h2 != "function") throw new TypeError("h is not a function");
  let r2 = react(h2),
    v = vue(h2),
    vd = vdom(h2),
    prefix,
    node;
  if (
    (typeof options == "string" || typeof options == "boolean"
      ? ((prefix = options), (options = {}))
      : (options || (options = {}), (prefix = options.prefix)),
    root3(tree))
  )
    node =
      tree.children.length === 1 && element3(tree.children[0])
        ? tree.children[0]
        : {
            type: "element",
            tagName: "div",
            properties: {},
            children: tree.children,
          };
  else if (element3(tree)) node = tree;
  else
    throw new Error(
      "Expected root or element, not `" + ((tree && tree.type) || tree) + "`"
    );
  return transform2(h2, node, {
    schema: options.space === "svg" ? svg2 : html3,
    prefix:
      prefix == null
        ? r2 || v || vd
          ? "h-"
          : null
        : typeof prefix == "string"
        ? prefix
        : prefix
        ? "h-"
        : null,
    key: 0,
    react: r2,
    vue: v,
    vdom: vd,
    hyperscript: hyperscript(h2),
  });
}
function transform2(h2, node, ctx) {
  let parentSchema = ctx.schema,
    schema = parentSchema,
    name = node.tagName,
    attributes2 = {},
    nodes2 = [],
    index2 = -1,
    key;
  parentSchema.space === "html" &&
    name.toLowerCase() === "svg" &&
    ((schema = svg2), (ctx.schema = schema));
  for (key in node.properties)
    node.properties &&
      own15.call(node.properties, key) &&
      addAttribute(attributes2, key, node.properties[key], ctx, name);
  if (
    (ctx.vdom &&
      (schema.space === "html"
        ? (name = name.toUpperCase())
        : schema.space && (attributes2.namespace = ns[schema.space])),
    ctx.prefix && (ctx.key++, (attributes2.key = ctx.prefix + ctx.key)),
    node.children)
  )
    for (; ++index2 < node.children.length; ) {
      let value = node.children[index2];
      element3(value)
        ? nodes2.push(transform2(h2, value, ctx))
        : text6(value) && nodes2.push(value.value);
    }
  return (
    (ctx.schema = parentSchema),
    nodes2.length > 0
      ? h2.call(node, name, attributes2, nodes2)
      : h2.call(node, name, attributes2)
  );
}
function addAttribute(props, prop, value, ctx, name) {
  let info2 = find(ctx.schema, prop),
    subprop;
  value == null ||
    (typeof value == "number" && Number.isNaN(value)) ||
    (value === !1 && (ctx.vue || ctx.vdom || ctx.hyperscript)) ||
    (!value && info2.boolean && (ctx.vue || ctx.vdom || ctx.hyperscript)) ||
    (Array.isArray(value) &&
      (value = info2.commaSeparated ? stringify2(value) : stringify(value)),
    info2.boolean && ctx.hyperscript && (value = ""),
    info2.property === "style" &&
      typeof value == "string" &&
      (ctx.react || ctx.vue || ctx.vdom) &&
      (value = parseStyle2(value, name)),
    ctx.vue
      ? info2.property !== "style" && (subprop = "attrs")
      : info2.mustUseProperty ||
        (ctx.vdom
          ? info2.property !== "style" && (subprop = "attributes")
          : ctx.hyperscript && (subprop = "attrs")),
    subprop
      ? (props[subprop] = Object.assign(props[subprop] || {}, {
          [info2.attribute]: value,
        }))
      : info2.space && ctx.react
      ? (props[toReact2[info2.property] || info2.property] = value)
      : (props[info2.attribute] = value));
}
function react(h2) {
  let node = h2("div", {});
  return Boolean(
    node &&
      ("_owner" in node || "_store" in node) &&
      (node.key === void 0 || node.key === null)
  );
}
function hyperscript(h2) {
  return "context" in h2 && "cleanup" in h2;
}
function vdom(h2) {
  return h2("div", {}).type === "VirtualNode";
}
function vue(h2) {
  let node = h2("div", {});
  return Boolean(node && node.context && node.context._isVue);
}
function parseStyle2(value, tagName) {
  let result = {};
  try {
    (0, import_style_to_object2.default)(value, (name, value2) => {
      name.slice(0, 4) === "-ms-" && (name = "ms-" + name.slice(4)),
        (result[name.replace(/-([a-z])/g, (_, $1) => $1.toUpperCase())] =
          value2);
    });
  } catch (error2) {
    throw (
      ((error2.message = tagName + "[style]" + error2.message.slice(9)), error2)
    );
  }
  return result;
}

// ../../node_modules/zwitch/index.js
var own16 = {}.hasOwnProperty;
function zwitch(key, options) {
  var settings = options || {};
  function one5(value) {
    var fn = one5.invalid,
      handlers2 = one5.handlers;
    if (
      (value &&
        own16.call(value, key) &&
        (fn = own16.call(handlers2, value[key])
          ? handlers2[value[key]]
          : one5.unknown),
      fn)
    )
      return fn.apply(this, arguments);
  }
  return (
    (one5.handlers = settings.handlers || {}),
    (one5.invalid = settings.invalid),
    (one5.unknown = settings.unknown),
    one5
  );
}

// ../../node_modules/hast-util-to-parse5/lib/index.js
var own17 = {}.hasOwnProperty,
  one3 = zwitch("type", {
    handlers: {
      root: root4,
      element: element4,
      text: text7,
      comment: comment2,
      doctype: doctype2,
    },
  });
function toParse5(tree, space) {
  return one3(tree, space === "svg" ? svg2 : html3);
}
function root4(node, schema) {
  var p5 = {
    nodeName: "#document",
    mode: (node.data || {}).quirksMode ? "quirks" : "no-quirks",
    childNodes: [],
  };
  return (p5.childNodes = all3(node.children, p5, schema)), patch(node, p5);
}
function fragment(node, schema) {
  var p5 = { nodeName: "#document-fragment", childNodes: [] };
  return (p5.childNodes = all3(node.children, p5, schema)), patch(node, p5);
}
function doctype2(node) {
  return patch(node, {
    nodeName: "#documentType",
    name: "html",
    publicId: "",
    systemId: "",
    parentNode: void 0,
  });
}
function text7(node) {
  return patch(node, {
    nodeName: "#text",
    value: node.value,
    parentNode: void 0,
  });
}
function comment2(node) {
  return patch(node, {
    nodeName: "#comment",
    data: node.value,
    parentNode: void 0,
  });
}
function element4(node, schema) {
  var space = schema.space;
  return toH(h2, Object.assign({}, node, { children: [] }), { space });
  function h2(name, attrs) {
    var values = [],
      info2,
      value,
      key,
      index2,
      p5;
    for (key in attrs)
      !own17.call(attrs, key) ||
        attrs[key] === !1 ||
        ((info2 = find(schema, key)),
        !(info2.boolean && !attrs[key]) &&
          ((value = {
            name: key,
            value: attrs[key] === !0 ? "" : String(attrs[key]),
          }),
          info2.space &&
            info2.space !== "html" &&
            info2.space !== "svg" &&
            ((index2 = key.indexOf(":")),
            index2 < 0
              ? (value.prefix = "")
              : ((value.name = key.slice(index2 + 1)),
                (value.prefix = key.slice(0, index2))),
            (value.namespace = webNamespaces[info2.space])),
          values.push(value)));
    return (
      schema.space === "html" && node.tagName === "svg" && (schema = svg2),
      (p5 = patch(node, {
        nodeName: name,
        tagName: name,
        attrs: values,
        namespaceURI: webNamespaces[schema.space],
        childNodes: [],
        parentNode: void 0,
      })),
      (p5.childNodes = all3(node.children, p5, schema)),
      name === "template" && (p5.content = fragment(node.content, schema)),
      p5
    );
  }
}
function all3(children, p5, schema) {
  var index2 = -1,
    result = [],
    child;
  if (children)
    for (; ++index2 < children.length; )
      (child = one3(children[index2], schema)),
        (child.parentNode = p5),
        result.push(child);
  return result;
}
function patch(node, p5) {
  var position3 = node.position;
  return (
    position3 &&
      position3.start &&
      position3.end &&
      (p5.sourceCodeLocation = {
        startLine: position3.start.line,
        startCol: position3.start.column,
        startOffset: position3.start.offset,
        endLine: position3.end.line,
        endCol: position3.end.column,
        endOffset: position3.end.offset,
      }),
    p5
  );
}

// ../../node_modules/html-void-elements/index.js
var htmlVoidElements = [
  "area",
  "base",
  "basefont",
  "bgsound",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "image",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "menuitem",
  "meta",
  "nextid",
  "param",
  "source",
  "track",
  "wbr",
];

// ../../node_modules/hast-util-raw/lib/index.js
var inTemplateMode = "IN_TEMPLATE_MODE",
  dataState = "DATA_STATE",
  characterToken = "CHARACTER_TOKEN",
  startTagToken = "START_TAG_TOKEN",
  endTagToken = "END_TAG_TOKEN",
  commentToken = "COMMENT_TOKEN",
  doctypeToken = "DOCTYPE_TOKEN",
  parseOptions = { sourceCodeLocationInfo: !0, scriptingEnabled: !1 },
  raw = function (tree, file, options) {
    let index2 = -1,
      parser = new import_parser2.default(parseOptions),
      one5 = zwitch("type", {
        handlers: {
          root: root5,
          element: element5,
          text: text8,
          comment: comment3,
          doctype: doctype3,
          raw: handleRaw,
        },
        unknown: unknown2,
      }),
      stitches,
      tokenizer,
      preprocessor,
      posTracker,
      locationTracker;
    if (
      (isOptions(file) && ((options = file), (file = void 0)),
      options && options.passThrough)
    )
      for (; ++index2 < options.passThrough.length; )
        one5.handlers[options.passThrough[index2]] = stitch;
    let result = fromParse5(
      documentMode(tree) ? document4() : fragment2(),
      file
    );
    if (
      (stitches &&
        visit(result, "comment", (node, index3, parent) => {
          let stitch2 = node;
          if (stitch2.value.stitch && parent !== null && index3 !== null)
            return (parent.children[index3] = stitch2.value.stitch), index3;
        }),
      tree.type !== "root" &&
        result.type === "root" &&
        result.children.length === 1)
    )
      return result.children[0];
    return result;
    function fragment2() {
      let context = {
          nodeName: "template",
          tagName: "template",
          attrs: [],
          namespaceURI: webNamespaces.html,
          childNodes: [],
        },
        mock = {
          nodeName: "documentmock",
          tagName: "documentmock",
          attrs: [],
          namespaceURI: webNamespaces.html,
          childNodes: [],
        },
        doc = { nodeName: "#document-fragment", childNodes: [] };
      if (
        (parser._bootstrap(mock, context),
        parser._pushTmplInsertionMode(inTemplateMode),
        parser._initTokenizerForFragmentParsing(),
        parser._insertFakeRootElement(),
        parser._resetInsertionMode(),
        parser._findFormInFragmentContext(),
        (tokenizer = parser.tokenizer),
        !tokenizer)
      )
        throw new Error("Expected `tokenizer`");
      return (
        (preprocessor = tokenizer.preprocessor),
        (locationTracker = tokenizer.__mixins[0]),
        (posTracker = locationTracker.posTracker),
        one5(tree),
        parser._adoptNodes(mock.childNodes[0], doc),
        doc
      );
    }
    function document4() {
      let doc = parser.treeAdapter.createDocument();
      if (
        (parser._bootstrap(doc, void 0),
        (tokenizer = parser.tokenizer),
        !tokenizer)
      )
        throw new Error("Expected `tokenizer`");
      return (
        (preprocessor = tokenizer.preprocessor),
        (locationTracker = tokenizer.__mixins[0]),
        (posTracker = locationTracker.posTracker),
        one5(tree),
        doc
      );
    }
    function all5(nodes2) {
      let index3 = -1;
      if (nodes2) for (; ++index3 < nodes2.length; ) one5(nodes2[index3]);
    }
    function root5(node) {
      all5(node.children);
    }
    function element5(node) {
      resetTokenizer(),
        parser._processToken(startTag(node), webNamespaces.html),
        all5(node.children),
        htmlVoidElements.includes(node.tagName) ||
          (resetTokenizer(), parser._processToken(endTag(node)));
    }
    function text8(node) {
      resetTokenizer(),
        parser._processToken({
          type: characterToken,
          chars: node.value,
          location: createParse5Location(node),
        });
    }
    function doctype3(node) {
      resetTokenizer(),
        parser._processToken({
          type: doctypeToken,
          name: "html",
          forceQuirks: !1,
          publicId: "",
          systemId: "",
          location: createParse5Location(node),
        });
    }
    function comment3(node) {
      resetTokenizer(),
        parser._processToken({
          type: commentToken,
          data: node.value,
          location: createParse5Location(node),
        });
    }
    function handleRaw(node) {
      let start = pointStart(node),
        line = start.line || 1,
        column = start.column || 1,
        offset = start.offset || 0;
      if (!preprocessor) throw new Error("Expected `preprocessor`");
      if (!tokenizer) throw new Error("Expected `tokenizer`");
      if (!posTracker) throw new Error("Expected `posTracker`");
      if (!locationTracker) throw new Error("Expected `locationTracker`");
      (preprocessor.html = void 0),
        (preprocessor.pos = -1),
        (preprocessor.lastGapPos = -1),
        (preprocessor.lastCharPos = -1),
        (preprocessor.gapStack = []),
        (preprocessor.skipNextNewLine = !1),
        (preprocessor.lastChunkWritten = !1),
        (preprocessor.endOfChunkHit = !1),
        (posTracker.isEol = !1),
        (posTracker.lineStartPos = -column + 1),
        (posTracker.droppedBufferSize = offset),
        (posTracker.offset = 0),
        (posTracker.col = 1),
        (posTracker.line = line),
        (locationTracker.currentAttrLocation = void 0),
        (locationTracker.ctLoc = createParse5Location(node)),
        tokenizer.write(node.value),
        parser._runParsingLoop(null),
        (tokenizer.state === "NAMED_CHARACTER_REFERENCE_STATE" ||
          tokenizer.state === "NUMERIC_CHARACTER_REFERENCE_END_STATE") &&
          ((preprocessor.lastChunkWritten = !0),
          tokenizer[tokenizer.state](tokenizer._consume()));
      let token = tokenizer.currentCharacterToken;
      token &&
        ((token.location.endLine = posTracker.line),
        (token.location.endCol = posTracker.col + 1),
        (token.location.endOffset = posTracker.offset + 1),
        parser._processToken(token));
    }
    function stitch(node) {
      stitches = !0;
      let clone;
      "children" in node
        ? (clone = {
            ...node,
            children: raw(
              { type: "root", children: node.children },
              file,
              options
            ).children,
          })
        : (clone = { ...node }),
        comment3({ type: "comment", value: { stitch: clone } });
    }
    function resetTokenizer() {
      if (!tokenizer) throw new Error("Expected `tokenizer`");
      (tokenizer.tokenQueue = []),
        (tokenizer.state = dataState),
        (tokenizer.returnState = ""),
        (tokenizer.charRefCode = -1),
        (tokenizer.tempBuff = []),
        (tokenizer.lastStartTagName = ""),
        (tokenizer.consumedAfterSnapshot = -1),
        (tokenizer.active = !1),
        (tokenizer.currentCharacterToken = void 0),
        (tokenizer.currentToken = void 0),
        (tokenizer.currentAttr = void 0);
    }
  };
function startTag(node) {
  let location2 = Object.assign(createParse5Location(node));
  return (
    (location2.startTag = Object.assign({}, location2)),
    {
      type: startTagToken,
      tagName: node.tagName,
      selfClosing: !1,
      attrs: attributes(node),
      location: location2,
    }
  );
}
function attributes(node) {
  return toParse5({
    tagName: node.tagName,
    type: "element",
    properties: node.properties,
    children: [],
  }).attrs;
}
function endTag(node) {
  let location2 = Object.assign(createParse5Location(node));
  return (
    (location2.startTag = Object.assign({}, location2)),
    {
      type: endTagToken,
      tagName: node.tagName,
      attrs: [],
      location: location2,
    }
  );
}
function unknown2(node) {
  throw new Error("Cannot compile `" + node.type + "` node");
}
function documentMode(node) {
  let head = node.type === "root" ? node.children[0] : node;
  return Boolean(
    head &&
      (head.type === "doctype" ||
        (head.type === "element" && head.tagName === "html"))
  );
}
function createParse5Location(node) {
  let start = pointStart(node),
    end = pointEnd(node);
  return {
    startLine: start.line,
    startCol: start.column,
    startOffset: start.offset,
    endLine: end.line,
    endCol: end.column,
    endOffset: end.offset,
  };
}
function isOptions(value) {
  return Boolean(value && !("message" in value && "messages" in value));
}

// ../../node_modules/rehype-raw/index.js
function rehypeRaw(options = {}) {
  return (tree, file) => raw(tree, file, options);
}

// ../../node_modules/hast-util-sanitize/lib/schema.js
var defaultSchema = {
  strip: ["script"],
  clobberPrefix: "user-content-",
  clobber: ["name", "id"],
  ancestors: {
    tbody: ["table"],
    tfoot: ["table"],
    thead: ["table"],
    td: ["table"],
    th: ["table"],
    tr: ["table"],
  },
  protocols: {
    href: ["http", "https", "mailto", "xmpp", "irc", "ircs"],
    cite: ["http", "https"],
    src: ["http", "https"],
    longDesc: ["http", "https"],
  },
  tagNames: [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "br",
    "b",
    "i",
    "strong",
    "em",
    "a",
    "pre",
    "code",
    "img",
    "tt",
    "div",
    "ins",
    "del",
    "sup",
    "sub",
    "p",
    "ol",
    "ul",
    "table",
    "thead",
    "tbody",
    "tfoot",
    "blockquote",
    "dl",
    "dt",
    "dd",
    "kbd",
    "q",
    "samp",
    "var",
    "hr",
    "ruby",
    "rt",
    "rp",
    "li",
    "tr",
    "td",
    "th",
    "s",
    "strike",
    "summary",
    "details",
    "caption",
    "figure",
    "figcaption",
    "abbr",
    "bdo",
    "cite",
    "dfn",
    "mark",
    "small",
    "span",
    "time",
    "wbr",
    "input",
  ],
  attributes: {
    a: ["href"],
    img: ["src", "longDesc"],
    input: [
      ["type", "checkbox"],
      ["disabled", !0],
    ],
    li: [["className", "task-list-item"]],
    div: ["itemScope", "itemType"],
    blockquote: ["cite"],
    del: ["cite"],
    ins: ["cite"],
    q: ["cite"],
    "*": [
      "abbr",
      "accept",
      "acceptCharset",
      "accessKey",
      "action",
      "align",
      "alt",
      "ariaDescribedBy",
      "ariaHidden",
      "ariaLabel",
      "ariaLabelledBy",
      "axis",
      "border",
      "cellPadding",
      "cellSpacing",
      "char",
      "charOff",
      "charSet",
      "checked",
      "clear",
      "cols",
      "colSpan",
      "color",
      "compact",
      "coords",
      "dateTime",
      "dir",
      "disabled",
      "encType",
      "htmlFor",
      "frame",
      "headers",
      "height",
      "hrefLang",
      "hSpace",
      "isMap",
      "id",
      "label",
      "lang",
      "maxLength",
      "media",
      "method",
      "multiple",
      "name",
      "noHref",
      "noShade",
      "noWrap",
      "open",
      "prompt",
      "readOnly",
      "rel",
      "rev",
      "rows",
      "rowSpan",
      "rules",
      "scope",
      "selected",
      "shape",
      "size",
      "span",
      "start",
      "summary",
      "tabIndex",
      "target",
      "title",
      "type",
      "useMap",
      "vAlign",
      "value",
      "vSpace",
      "width",
      "itemProp",
    ],
  },
  required: {
    input: {
      type: "checkbox",
      disabled: !0,
    },
  },
};

// ../../node_modules/hast-util-sanitize/lib/index.js
var own18 = {}.hasOwnProperty,
  push2 = [].push,
  nodeSchema = {
    root: { children: all4 },
    doctype: handleDoctype,
    comment: handleComment,
    element: {
      tagName: handleTagName,
      properties: handleProperties,
      children: all4,
    },
    text: { value: handleValue },
    "*": { data: allow, position: allow },
  };
function sanitize(node, schema) {
  var ctx = { type: "root", children: [] },
    replace2;
  return (
    node &&
      typeof node == "object" &&
      node.type &&
      ((replace2 = one4(
        Object.assign({}, defaultSchema, schema || {}),
        node,
        []
      )),
      replace2 &&
        (Array.isArray(replace2)
          ? replace2.length === 1
            ? (ctx = replace2[0])
            : (ctx.children = replace2)
          : (ctx = replace2))),
    ctx
  );
}
function one4(schema, node, stack) {
  var type = node && node.type,
    replacement = { type: node.type },
    replace2,
    definition2,
    allowed,
    result,
    key;
  if (
    own18.call(nodeSchema, type) &&
    ((definition2 = nodeSchema[type]),
    typeof definition2 == "function" &&
      (definition2 = definition2(schema, node)),
    definition2)
  ) {
    (replace2 = !0),
      (allowed = Object.assign({}, definition2, nodeSchema["*"]));
    for (key in allowed)
      own18.call(allowed, key) &&
        ((result = allowed[key](schema, node[key], node, stack)),
        result === !1
          ? ((replace2 = null), (replacement[key] = node[key]))
          : result != null && (replacement[key] = result));
  }
  return replace2
    ? replacement
    : replacement.type === "element" &&
      !schema.strip.includes(replacement.tagName)
    ? replacement.children
    : null;
}
function all4(schema, children, node, stack) {
  var results = [],
    index2 = -1,
    value;
  if (Array.isArray(children)) {
    for (
      node.type === "element" && stack.push(node.tagName);
      ++index2 < children.length;

    )
      (value = one4(schema, children[index2], stack)),
        value &&
          ("length" in value
            ? push2.apply(results, value)
            : results.push(value));
    node.type === "element" && stack.pop();
  }
  return results;
}
function handleDoctype(schema) {
  return schema.allowDoctypes ? { name: handleDoctypeName } : null;
}
function handleComment(schema) {
  return schema.allowComments ? { value: handleCommentValue } : null;
}
function handleProperties(schema, properties, node, stack) {
  var name = handleTagName(schema, node.tagName, node, stack),
    reqs = schema.required || {},
    props = properties || {},
    allowed = Object.assign(
      {},
      toPropertyValueMap(schema.attributes["*"]),
      toPropertyValueMap(
        name && own18.call(schema.attributes, name)
          ? schema.attributes[name]
          : []
      )
    ),
    result = {},
    definition2,
    value,
    key;
  for (key in props)
    if (own18.call(props, key)) {
      if (own18.call(allowed, key)) definition2 = allowed[key];
      else if (data(key) && own18.call(allowed, "data*"))
        definition2 = allowed["data*"];
      else continue;
      (value = props[key]),
        (value = Array.isArray(value)
          ? handlePropertyValues(schema, value, key, definition2)
          : handlePropertyValue(schema, value, key, definition2)),
        value != null && (result[key] = value);
    }
  if (name && own18.call(reqs, name))
    for (key in reqs[name])
      own18.call(result, key) || (result[key] = reqs[name][key]);
  return result;
}
function handleDoctypeName() {
  return "html";
}
function handleTagName(schema, tagName, _, stack) {
  var name = typeof tagName == "string" ? tagName : "",
    index2 = -1;
  if (!name || name === "*" || !schema.tagNames.includes(name)) return !1;
  if (own18.call(schema.ancestors, name)) {
    for (; ++index2 < schema.ancestors[name].length; )
      if (stack.includes(schema.ancestors[name][index2])) return name;
    return !1;
  }
  return name;
}
function handleCommentValue(_, value) {
  var result = typeof value == "string" ? value : "",
    index2 = result.indexOf("-->");
  return index2 < 0 ? result : result.slice(0, index2);
}
function handleValue(_, value) {
  return typeof value == "string" ? value : "";
}
function allow(_, value) {
  return value;
}
function handlePropertyValues(schema, values, prop, definition2) {
  for (var index2 = -1, result = [], value; ++index2 < values.length; )
    (value = handlePropertyValue(schema, values[index2], prop, definition2)),
      value != null && result.push(value);
  return result;
}
function handlePropertyValue(schema, value, prop, definition2) {
  if (
    (typeof value == "boolean" ||
      typeof value == "number" ||
      typeof value == "string") &&
    safeProtocol(schema, value, prop) &&
    (definition2.length === 0 || definition2.includes(value))
  )
    return schema.clobber.includes(prop) ? schema.clobberPrefix + value : value;
}
function safeProtocol(schema, value, prop) {
  var url = String(value),
    colon = url.indexOf(":"),
    questionMark = url.indexOf("?"),
    numberSign = url.indexOf("#"),
    slash = url.indexOf("/"),
    protocols2 = own18.call(schema.protocols, prop)
      ? schema.protocols[prop].concat()
      : [],
    index2 = -1;
  if (
    protocols2.length === 0 ||
    colon < 0 ||
    (slash > -1 && colon > slash) ||
    (questionMark > -1 && colon > questionMark) ||
    (numberSign > -1 && colon > numberSign)
  )
    return !0;
  for (; ++index2 < protocols2.length; )
    if (
      colon === protocols2[index2].length &&
      url.slice(0, protocols2[index2].length) === protocols2[index2]
    )
      return !0;
  return !1;
}
function toPropertyValueMap(values) {
  for (var result = {}, index2 = -1, value; ++index2 < values.length; )
    (value = values[index2]),
      Array.isArray(value)
        ? (result[value[0]] = value.slice(1))
        : (result[value] = []);
  return result;
}
function data(prop) {
  return prop.length > 4 && prop.slice(0, 4).toLowerCase() === "data";
}

// ../../node_modules/rehype-sanitize/index.js
function rehypeSanitize(options = defaultSchema) {
  return (tree) => sanitize(tree, options);
}

// ../../node_modules/lowlight/lib/common.js
var import_arduino = __toESM(require("highlight.js/lib/languages/arduino"), 1),
  import_bash = __toESM(require("highlight.js/lib/languages/bash"), 1),
  import_c = __toESM(require("highlight.js/lib/languages/c"), 1),
  import_cpp = __toESM(require("highlight.js/lib/languages/cpp"), 1),
  import_csharp = __toESM(require("highlight.js/lib/languages/csharp"), 1),
  import_css = __toESM(require("highlight.js/lib/languages/css"), 1),
  import_diff = __toESM(require("highlight.js/lib/languages/diff"), 1),
  import_go = __toESM(require("highlight.js/lib/languages/go"), 1),
  import_ini = __toESM(require("highlight.js/lib/languages/ini"), 1),
  import_java = __toESM(require("highlight.js/lib/languages/java"), 1),
  import_javascript = __toESM(
    require("highlight.js/lib/languages/javascript"),
    1
  ),
  import_json = __toESM(require("highlight.js/lib/languages/json"), 1),
  import_kotlin = __toESM(require("highlight.js/lib/languages/kotlin"), 1),
  import_less = __toESM(require("highlight.js/lib/languages/less"), 1),
  import_lua = __toESM(require("highlight.js/lib/languages/lua"), 1),
  import_makefile = __toESM(require("highlight.js/lib/languages/makefile"), 1),
  import_markdown = __toESM(require("highlight.js/lib/languages/markdown"), 1),
  import_objectivec = __toESM(
    require("highlight.js/lib/languages/objectivec"),
    1
  ),
  import_perl = __toESM(require("highlight.js/lib/languages/perl"), 1),
  import_php = __toESM(require("highlight.js/lib/languages/php"), 1),
  import_php_template = __toESM(
    require("highlight.js/lib/languages/php-template"),
    1
  ),
  import_plaintext = __toESM(
    require("highlight.js/lib/languages/plaintext"),
    1
  ),
  import_python = __toESM(require("highlight.js/lib/languages/python"), 1),
  import_python_repl = __toESM(
    require("highlight.js/lib/languages/python-repl"),
    1
  ),
  import_r = __toESM(require("highlight.js/lib/languages/r"), 1),
  import_ruby = __toESM(require("highlight.js/lib/languages/ruby"), 1),
  import_rust = __toESM(require("highlight.js/lib/languages/rust"), 1),
  import_scss = __toESM(require("highlight.js/lib/languages/scss"), 1),
  import_shell = __toESM(require("highlight.js/lib/languages/shell"), 1),
  import_sql = __toESM(require("highlight.js/lib/languages/sql"), 1),
  import_swift = __toESM(require("highlight.js/lib/languages/swift"), 1),
  import_typescript = __toESM(
    require("highlight.js/lib/languages/typescript"),
    1
  ),
  import_vbnet = __toESM(require("highlight.js/lib/languages/vbnet"), 1),
  import_xml2 = __toESM(require("highlight.js/lib/languages/xml"), 1),
  import_yaml = __toESM(require("highlight.js/lib/languages/yaml"), 1);

// ../../node_modules/lowlight/lib/core.js
var import_core3 = __toESM(require("highlight.js/lib/core"), 1);

// ../../node_modules/fault/index.js
var import_format = __toESM(require("format"), 1),
  fault = Object.assign(create2(Error), {
    eval: create2(EvalError),
    range: create2(RangeError),
    reference: create2(ReferenceError),
    syntax: create2(SyntaxError),
    type: create2(TypeError),
    uri: create2(URIError),
  });
function create2(Constructor) {
  return (
    (FormattedError.displayName = Constructor.displayName || Constructor.name),
    FormattedError
  );
  function FormattedError(format, ...values) {
    let reason = format && (0, import_format.default)(format, ...values);
    return new Constructor(reason);
  }
}

// ../../node_modules/lowlight/lib/core.js
var own19 = {}.hasOwnProperty,
  defaultPrefix = "hljs-";
function highlight(language2, value, options = {}) {
  let prefix = options.prefix;
  if (typeof language2 != "string")
    throw fault("Expected `string` for name, got `%s`", language2);
  if (!import_core3.default.getLanguage(language2))
    throw fault("Unknown language: `%s` is not registered", language2);
  if (typeof value != "string")
    throw fault("Expected `string` for value, got `%s`", value);
  prefix == null && (prefix = defaultPrefix),
    import_core3.default.configure({
      __emitter: HastEmitter,
      classPrefix: prefix,
    });
  let result = import_core3.default.highlight(value, {
    language: language2,
    ignoreIllegals: !0,
  });
  if ((import_core3.default.configure({}), result.errorRaised))
    throw result.errorRaised;
  return (
    (result._emitter.root.data.language = result.language),
    (result._emitter.root.data.relevance = result.relevance),
    result._emitter.root
  );
}
function highlightAuto(value, options = {}) {
  let subset = options.subset || import_core3.default.listLanguages(),
    prefix = options.prefix,
    index2 = -1,
    result = {
      type: "root",
      data: { language: null, relevance: 0 },
      children: [],
    };
  if ((prefix == null && (prefix = defaultPrefix), typeof value != "string"))
    throw fault("Expected `string` for value, got `%s`", value);
  for (; ++index2 < subset.length; ) {
    let name = subset[index2];
    if (!import_core3.default.getLanguage(name)) continue;
    let current = highlight(name, value, options);
    current.data.relevance > result.data.relevance && (result = current);
  }
  return result;
}
function registerLanguage(language2, syntax) {
  import_core3.default.registerLanguage(language2, syntax);
}
var registerAlias = function (language2, alias) {
  if (typeof language2 == "string")
    import_core3.default.registerAliases(alias, { languageName: language2 });
  else {
    let key;
    for (key in language2)
      own19.call(language2, key) &&
        import_core3.default.registerAliases(language2[key], {
          languageName: key,
        });
  }
};
function registered(aliasOrLanguage) {
  return Boolean(import_core3.default.getLanguage(aliasOrLanguage));
}
function listLanguages() {
  return import_core3.default.listLanguages();
}
var HastEmitter = class {
    constructor(options) {
      (this.options = options),
        (this.root = {
          type: "root",
          data: { language: null, relevance: 0 },
          children: [],
        }),
        (this.stack = [this.root]);
    }
    addText(value) {
      if (value === "") return;
      let current = this.stack[this.stack.length - 1],
        tail = current.children[current.children.length - 1];
      tail && tail.type === "text"
        ? (tail.value += value)
        : current.children.push({ type: "text", value });
    }
    addKeyword(value, name) {
      this.openNode(name), this.addText(value), this.closeNode();
    }
    addSublanguage(other, name) {
      let current = this.stack[this.stack.length - 1],
        results = other.root.children;
      name
        ? current.children.push({
            type: "element",
            tagName: "span",
            properties: { className: [name] },
            children: results,
          })
        : current.children.push(...results);
    }
    openNode(name) {
      let className = name
          .split(".")
          .map((d, i) =>
            i ? d + "_".repeat(i) : this.options.classPrefix + d
          ),
        current = this.stack[this.stack.length - 1],
        child = {
          type: "element",
          tagName: "span",
          properties: { className },
          children: [],
        };
      current.children.push(child), this.stack.push(child);
    }
    closeNode() {
      this.stack.pop();
    }
    closeAllNodes() {}
    finalize() {}
    toHTML() {
      return "";
    }
  },
  lowlight = {
    highlight,
    highlightAuto,
    registerLanguage,
    registered,
    listLanguages,
    registerAlias,
  };

// ../../node_modules/lowlight/lib/common.js
lowlight.registerLanguage("arduino", import_arduino.default);
lowlight.registerLanguage("bash", import_bash.default);
lowlight.registerLanguage("c", import_c.default);
lowlight.registerLanguage("cpp", import_cpp.default);
lowlight.registerLanguage("csharp", import_csharp.default);
lowlight.registerLanguage("css", import_css.default);
lowlight.registerLanguage("diff", import_diff.default);
lowlight.registerLanguage("go", import_go.default);
lowlight.registerLanguage("ini", import_ini.default);
lowlight.registerLanguage("java", import_java.default);
lowlight.registerLanguage("javascript", import_javascript.default);
lowlight.registerLanguage("json", import_json.default);
lowlight.registerLanguage("kotlin", import_kotlin.default);
lowlight.registerLanguage("less", import_less.default);
lowlight.registerLanguage("lua", import_lua.default);
lowlight.registerLanguage("makefile", import_makefile.default);
lowlight.registerLanguage("markdown", import_markdown.default);
lowlight.registerLanguage("objectivec", import_objectivec.default);
lowlight.registerLanguage("perl", import_perl.default);
lowlight.registerLanguage("php", import_php.default);
lowlight.registerLanguage("php-template", import_php_template.default);
lowlight.registerLanguage("plaintext", import_plaintext.default);
lowlight.registerLanguage("python", import_python.default);
lowlight.registerLanguage("python-repl", import_python_repl.default);
lowlight.registerLanguage("r", import_r.default);
lowlight.registerLanguage("ruby", import_ruby.default);
lowlight.registerLanguage("rust", import_rust.default);
lowlight.registerLanguage("scss", import_scss.default);
lowlight.registerLanguage("shell", import_shell.default);
lowlight.registerLanguage("sql", import_sql.default);
lowlight.registerLanguage("swift", import_swift.default);
lowlight.registerLanguage("typescript", import_typescript.default);
lowlight.registerLanguage("vbnet", import_vbnet.default);
lowlight.registerLanguage("xml", import_xml2.default);
lowlight.registerLanguage("yaml", import_yaml.default);

// ../../node_modules/rehype-highlight/lib/index.js
var own20 = {}.hasOwnProperty;
function rehypeHighlight(options = {}) {
  let { aliases, languages, prefix, plainText, ignoreMissing, subset } =
      options,
    name = "hljs";
  if ((aliases && lowlight.registerAlias(aliases), languages)) {
    let key;
    for (key in languages)
      own20.call(languages, key) &&
        lowlight.registerLanguage(key, languages[key]);
  }
  if (prefix) {
    let pos = prefix.indexOf("-");
    name = pos > -1 ? prefix.slice(0, pos) : prefix;
  }
  return (tree) => {
    visit(tree, "element", (node, _, givenParent) => {
      let parent = givenParent;
      if (
        !parent ||
        !("tagName" in parent) ||
        parent.tagName !== "pre" ||
        node.tagName !== "code" ||
        !node.properties
      )
        return;
      let lang = language(node);
      if (
        lang === !1 ||
        (!lang && subset === !1) ||
        (lang && plainText && plainText.includes(lang))
      )
        return;
      Array.isArray(node.properties.className) ||
        (node.properties.className = []),
        node.properties.className.includes(name) ||
          node.properties.className.unshift(name);
      let result;
      try {
        result = lang
          ? lowlight.highlight(lang, toText(parent), { prefix })
          : lowlight.highlightAuto(toText(parent), { prefix, subset });
      } catch (error2) {
        let exception = error2;
        if (/Unknown language/.test(exception.message))
          result = lowlight.highlightAuto(toText(parent), { prefix, subset });
        else {
          if (!ignoreMissing) throw error2;
          return;
        }
      }
      !lang &&
        result.data.language &&
        node.properties.className.push("language-" + result.data.language),
        Array.isArray(result.children) &&
          result.children.length > 0 &&
          (node.children = result.children);
    });
  };
}
function language(node) {
  let className = node.properties && node.properties.className,
    index2 = -1;
  if (!!Array.isArray(className))
    for (; ++index2 < className.length; ) {
      let value = String(className[index2]);
      if (value === "no-highlight" || value === "nohighlight") return !1;
      if (value.slice(0, 5) === "lang-") return value.slice(5);
      if (value.slice(0, 9) === "language-") return value.slice(9);
    }
}

// app/src/Markdown.tsx
var import_react12 = require("@remix-run/react"),
  import_hi4 = require("react-icons/hi"),
  import_jsx_runtime = require("react/jsx-runtime"),
  _a,
  _b,
  sanitizeOptions = {
    ...defaultSchema,
    attributes: {
      ...defaultSchema.attributes,
      code: [
        ...(((_a = defaultSchema.attributes) == null ? void 0 : _a.code) || []),
        "className",
      ],
      span: [
        ...(((_b = defaultSchema.attributes) == null ? void 0 : _b.span) || []),
        "className",
        "style",
      ],
    },
  };
function Markdown({ children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ReactMarkdown, {
    remarkPlugins: [remarkGfm, remarkMath, remarkGemoji],
    remarkRehypeOptions: { allowDangerousHtml: !0 },
    rehypePlugins: [
      rehypeKatex,
      rehypeRaw,
      rehypeHighlight,
      [rehypeSanitize, sanitizeOptions],
    ],
    components: {
      a({ children: children2, node, ...props }) {
        var _a2, _b2;
        return !((_a2 = props.href) != null && _a2.startsWith("#")) &&
          !((_b2 = props.href) != null && _b2.startsWith("/"))
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("a", {
              ...props,
              target: "_blank",
              rel: "noreferrer noopener",
              className: "link",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                  children: children2,
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_hi4.HiOutlineExternalLink,
                  {
                    className: "inline-block",
                  }
                ),
              ],
            })
          : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react12.Link, {
              to: props.href ?? "#",
              className: "link",
              children: children2,
            });
      },
    },
    children,
  });
}

// app/utils/db/problem.ts
var selectProblemListData = {
  id: !0,
  title: !0,
  private: !0,
};
async function findProblemTeam(problemId) {
  let problem = await db.problem.findUnique({
    where: { id: problemId },
    select: { teamId: !0 },
  });
  if (!problem) throw new Response("Problem not found", { status: 404 });
  return problem.teamId;
}
async function findProblemPrivacy(problemId) {
  let problem = await db.problem.findUnique({
    where: { id: problemId },
    select: { private: !0 },
  });
  if (!problem) throw new Response("Problem not found", { status: 404 });
  return problem.private;
}

// app/src/problem/ProblemLink.tsx
var import_react13 = require("@remix-run/react"),
  import_hi5 = require("react-icons/hi"),
  import_jsx_runtime = require("react/jsx-runtime");
function ProblemLink({ problem }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react13.Link, {
    to: `/problem/${problem.id}`,
    className: "link inline-flex items-center gap-2",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
        children: problem.title,
      }),
      problem.private &&
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi5.HiOutlineEyeOff,
          {
            className: "inline-block",
          }
        ),
    ],
  });
}

// app/src/Pagination.tsx
var import_react14 = require("@remix-run/react"),
  import_jsx_runtime = require("react/jsx-runtime");
function Pagination(props) {
  if (props.totalPages <= 1) return null;
  let pageArray =
    props.totalPages >= 7
      ? Array.from(
          { length: 7 },
          (_, i) =>
            Math.max(props.currentPage - 4, 0) +
            i +
            1 +
            Math.min(0, props.totalPages - props.currentPage - 3)
        )
      : Array.from({ length: props.totalPages }, (_, i) => i + 1);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
    className: "flex flex-wrap items-center justify-end gap-2",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react14.Form, {
        method: "get",
        action: props.action,
        className: "space-x-2",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
            children: "\u524D\u5F80\u7B2C",
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
            type: "number",
            className: "input input-bordered input-sm w-16",
            name: "page",
            max: props.totalPages,
            min: 1,
            defaultValue: props.currentPage,
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
            children: "\u9875",
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
            className: "btn btn-sm",
            children: "\u524D\u8FDB",
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
        children: ["\u5171 ", props.totalPages, " \u9875"],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react14.Form, {
        method: "get",
        className: "btn-group",
        action: props.action,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
            className: "btn btn-sm",
            disabled: props.currentPage === 1,
            name: "page",
            value: props.currentPage - 1,
            children: "\xAB",
          }),
          pageArray.map((page) =>
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "button",
              {
                className: "btn btn-sm",
                disabled: props.currentPage === page,
                name: "page",
                value: page,
                children: page,
              },
              page
            )
          ),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
            className: "btn btn-sm",
            disabled: props.currentPage === props.totalPages,
            name: "page",
            value: props.currentPage + 1,
            children: "\xBB",
          }),
        ],
      }),
    ],
  });
}

// app/routes/problemset/$problemSetId/problem.tsx
var import_signals_react7 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime"),
  PAGE_SIZE = 15;
async function loader4({ request, params }) {
  var _a2;
  let problemSetId = invariant(idScheme, params.problemSetId, {
    status: 404,
  });
  await (await findRequestUser(request))
    .team(await findProblemSetTeam(problemSetId))
    .checkPermission(
      (await findProblemSetPrivacy(problemSetId))
        ? Permissions.PERM_VIEW_PROBLEM_SET
        : Permissions.PERM_VIEW_PROBLEM_SET_PUBLIC
    );
  let url = new URL(request.url),
    page = invariant(pageScheme, url.searchParams.get("page") || "1"),
    problemSet = await db.problemSet.findUnique({
      where: { id: problemSetId },
      select: {
        id: !0,
        title: !0,
        description: !0,
        tags: !0,
        _count: {
          select: {
            problems: !0,
          },
        },
        problems: {
          orderBy: { rank: "asc" },
          select: {
            rank: !0,
            problem: {
              select: {
                ...selectProblemListData,
              },
            },
          },
          skip: (page - 1) * PAGE_SIZE,
          take: PAGE_SIZE,
        },
      },
    }),
    totalProblems =
      ((_a2 = problemSet == null ? void 0 : problemSet._count) == null
        ? void 0
        : _a2.problems) || 0;
  if (totalProblems && page > Math.ceil(totalProblems / PAGE_SIZE))
    throw new Response("Page is out of range", { status: 404 });
  if (!problemSet) throw new Response("Problem Set not found", { status: 404 });
  return (0, import_node3.json)({
    problemSet,
    totalProblems,
    currentPage: page,
  });
}
var meta2 = ({ data: data2 }) => ({
  title: `\u9898\u5355: ${
    data2 == null ? void 0 : data2.problemSet.title
  } - HITwh OJ`,
  description: data2 == null ? void 0 : data2.problemSet.description,
});
function ProblemSetIndex() {
  let loaderData = useSignalLoaderData(),
    problemSet = (0, import_signals_react7.useComputed)(
      () => loaderData.value.problemSet
    ),
    totalProblems = (0, import_signals_react7.useComputed)(
      () => loaderData.value.totalProblems
    ),
    currentPage = (0, import_signals_react7.useComputed)(
      () => loaderData.value.currentPage
    ),
    totalPages = (0, import_signals_react7.useComputed)(() =>
      Math.ceil(totalProblems.value / PAGE_SIZE)
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Markdown, {
          children: problemSet.value.description,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u76EE",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: problemSet.value.problems.map((problem) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        className: "text-center",
                        children: problem.rank,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ProblemLink,
                          {
                            problem: problem.problem,
                          }
                        ),
                      }),
                    ],
                  },
                  problem.problem.id
                )
              ),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Pagination, {
          action: `/problemset/${problemSet.value.id}/problem`,
          totalPages: totalPages.value,
          currentPage: currentPage.value,
        }),
      ],
    }
  );
}

// app/routes/problemset/$problemSetId/index.tsx
var problemSetId_exports2 = {};
__export(problemSetId_exports2, {
  loader: () => loader5,
});
var import_node4 = require("@remix-run/node");
function loader5({ params }) {
  return (0, import_node4.redirect)(
    `/problemset/${params.problemSetId}/problem`
  );
}

// app/routes/problemset/$problemSetId/edit.tsx
var edit_exports = {};
__export(edit_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action,
  default: () => ProblemSetEdit,
  loader: () => loader6,
  meta: () => meta3,
});
var import_node5 = require("@remix-run/node"),
  import_react20 = require("@remix-run/react");

// app/utils/permission/privilege.ts
var Privileges = {
  PRIV_LOGIN: 1,
  PRIV_OPERATE: 2,
};

// app/src/problem/ProblemEditor.tsx
var import_hi7 = require("react-icons/hi");

// app/src/problem/ProblemEditorCreator.tsx
var import_signals_react8 = require("@preact/signals-react"),
  import_react15 = require("react"),
  import_hi6 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime");
function ProblemEditorCreator(props) {
  let fetcher = useSignalFetcher(),
    Toasts = useToasts(),
    problems = (0, import_signals_react8.useSignal)([]);
  (0, import_react15.useEffect)(() => {
    let controller = new AbortController(),
      signal4 = controller.signal;
    return (
      fetch("/problem/data", { signal: signal4 })
        .then((res) => res.json())
        .then((data2) => (problems.value = data2.problems)),
      () => controller.abort()
    );
  }, []);
  let filter10 = (0, import_signals_react8.useSignal)(""),
    available = (0, import_signals_react8.useComputed)(() =>
      problems.value.filter(({ id }) => !props.existProblem.includes(id))
    ),
    datalist = (0, import_signals_react8.useComputed)(() =>
      available.value.filter(
        ({ title, tags, id }) =>
          id.toString().includes(filter10.value) ||
          title.includes(filter10.value) ||
          tags.some(({ name }) => name.includes(filter10.value))
      )
    ),
    selected = (0, import_signals_react8.useComputed)(() => {
      let index2 = filter10.value.indexOf(".");
      if (index2 === -1) return 0;
      let id = parseInt(filter10.value.slice(0, index2));
      return available.value.some((p2) => p2.id === id) ? id : 0;
    });
  return (
    (0, import_react15.useEffect)(() => {
      fetcher.actionSuccess &&
        ((filter10.value = ""), Toasts.success("\u66F4\u65B0\u6210\u529F"));
    }, [fetcher.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(fetcher.Form, {
      method: "post",
      className: "not-prose inline-flex gap-4",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
          type: "hidden",
          name: "pid",
          value: selected.value,
          required: !0,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
          className: "input-group",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "dropdown",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  placeholder: "\u641C\u7D22\u9898\u76EE...",
                  list: "search-problem",
                  value: filter10.value,
                  disabled: fetcher.isRunning,
                  onChange: (event) => (filter10.value = event.target.value),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("datalist", {
                  id: "search-problem",
                  children: datalist.value.map(({ id, title }) =>
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      "option",
                      {
                        value: `${id}. ${title}`,
                      },
                      id
                    )
                  ),
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
              className: "btn gap-2",
              type: "submit",
              name: "_action",
              value: props.createAction,
              disabled: fetcher.isRunning || !selected,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_hi6.HiOutlinePlus,
                  {}
                ),
                "\u6DFB\u52A0",
              ],
            }),
          ],
        }),
      ],
    })
  );
}

// app/src/problem/ProblemEditor.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function ProblemEditorOperations(props) {
  let fetcher = useSignalFetcher();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(fetcher.Form, {
    method: "post",
    className: "inline-flex gap-2",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
        type: "hidden",
        name: "pid",
        value: props.pid,
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
        className: "btn btn-primary btn-error btn-square btn-sm",
        type: "submit",
        name: "_action",
        value: props.deleteAction,
        disabled: fetcher.isRunning,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi7.HiOutlineTrash,
          {}
        ),
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
        className: "btn btn-ghost btn-square btn-sm",
        type: "submit",
        name: "_action",
        value: props.moveUpAction,
        disabled: props.first || fetcher.isRunning,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi7.HiOutlineChevronUp,
          {}
        ),
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
        className: "btn btn-ghost btn-square btn-sm",
        type: "submit",
        name: "_action",
        value: props.moveDownAction,
        disabled: props.last || fetcher.isRunning,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi7.HiOutlineChevronDown,
          {}
        ),
      }),
    ],
  });
}
function ProblemEditor(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ProblemEditorCreator, {
          createAction: props.createAction,
          existProblem: props.problems.map(({ id }) => id),
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u516C\u5171\u9898\u76EE",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16 text-center",
                    children: "\u64CD\u4F5C",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: props.problems.map((problem, index2) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: problem.id,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ProblemLink,
                          {
                            problem,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ProblemEditorOperations,
                          {
                            pid: problem.id,
                            first: index2 === 0,
                            last: index2 === props.problems.length - 1,
                            deleteAction: props.deleteAction,
                            moveUpAction: props.moveUpAction,
                            moveDownAction: props.moveDownAction,
                          }
                        ),
                      }),
                    ],
                  },
                  problem.id
                )
              ),
            }),
          ],
        }),
      ],
    }
  );
}

// app/src/MarkdownEditor.tsx
var import_signals_react10 = require("@preact/signals-react"),
  import_react18 = require("@remix-run/react"),
  import_react19 = require("react");

// app/src/VscodeEditor.tsx
var import_react16 = __toESM(require("@monaco-editor/react")),
  import_signals_react9 = require("@preact/signals-react"),
  import_react17 = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
import_react16.loader.config({ paths: { vs: "/build/_assets/vs" } });
function VscodeEditor(props) {
  let theme = useTheme(),
    monaco = (0, import_react16.useMonaco)();
  (0, import_react17.useEffect)(() => {
    if (monaco) {
      let color3 = defaultThemeColor[theme.value];
      monaco.editor.defineTheme(theme.value, {
        base: darkThemes.includes(theme.value) ? "vs-dark" : "vs",
        inherit: !0,
        rules: [],
        colors: {
          "editor.background": color3.base100,
          "editor.foreground": color3.baseContent,
          "editor.lineHighlightBackground": color3.base200,
        },
      }),
        monaco.editor.setTheme(theme.value);
    }
  }, [monaco, theme.value]);
  let editor = (0, import_signals_react9.useSignal)(null);
  return (
    (0, import_signals_react9.useSignalEffect)(() => {
      if (editor.value && props.insertText) {
        let p2 = editor.value.getPosition();
        editor.value.executeEdits("", [
          {
            range: {
              startLineNumber: p2.lineNumber,
              startColumn: p2.column,
              endLineNumber: p2.lineNumber,
              endColumn: p2.column,
            },
            text: props.insertText.value,
          },
        ]);
      }
    }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react16.default, {
      value: props.code.value,
      language: props.language,
      theme: theme.value,
      onChange: (code3) => (props.code.value = code3 ?? ""),
      options: {
        cursorSmoothCaretAnimation: !0,
        smoothScrolling: !0,
        fontSize: 16,
      },
      onMount: (_editor) => (editor.value = _editor),
    })
  );
}

// app/src/MarkdownEditor.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function MarkdownEditor(props) {
  let fetcher = useSignalFetcher(),
    preview = (0, import_signals_react10.useSignal)(!1),
    insertText = (0, import_signals_react10.useSignal)(""),
    code3 = (0, import_signals_react10.useSignal)(
      props.defaultValue ?? "Write **Markdown** here."
    ),
    user = useUser(),
    Toasts = useToasts();
  (0, import_react19.useEffect)(() => {
    if (fetcher.actionSuccess && fetcher.data.value) {
      let markdown2 = `
![image.png](/file/${fetcher.data.value[0]}/image.png)
`;
      (insertText.value = markdown2),
        Toasts.success("\u4E0A\u4F20\u56FE\u7247\u6210\u529F");
    }
  }, [fetcher.actionSuccess]);
  let language2 = (0, import_signals_react10.useSignal)("markdown");
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
    className: "rounded-box border-base-300 overflow-hidden border",
    children: [
      props.name &&
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("textarea", {
          name: props.name,
          value: code3.value,
          hidden: !0,
          readOnly: !0,
        }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "flex items-center",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className: "tabs flex-1",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: `tab tab-bordered ${
                  preview.value ? "" : "tab-active"
                }`,
                onClick: () => (preview.value = !1),
                children: "\u4EE3\u7801",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: `tab tab-bordered ${
                  preview.value ? "tab-active" : ""
                }`,
                onClick: () => (preview.value = !0),
                children: "\u9884\u89C8",
              }),
            ],
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
            className: "px-4",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_react18.Link,
              {
                to: "/docs/help/markdown.md",
                target: "_blank",
                children: "\u4F7F\u7528\u8BF4\u660E",
              }
            ),
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
        className: "h-96 overflow-auto",
        children: preview.value
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "p-4",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Markdown, {
                children: code3.value,
              }),
            })
          : /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "h-full",
              onPaste: (e) => {
                let image2 = e.clipboardData.files[0];
                if (image2 && image2.type.indexOf("image") > -1 && user.value) {
                  let formData = new FormData();
                  formData.append("file", e.clipboardData.files[0]),
                    formData.append("_action", "uploadFile"),
                    fetcher.submit(formData, {
                      action: `/user/${user.value}/files`,
                      encType: "multipart/form-data",
                      method: "post",
                    }),
                    Toasts.info("\u4E0A\u4F20\u56FE\u7247\u4E2D...");
                }
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                VscodeEditor,
                {
                  code: code3,
                  language: language2.value,
                  insertText,
                }
              ),
            }),
      }),
    ],
  });
}

// app/routes/problemset/$problemSetId/edit.tsx
var import_signals_react12 = require("@preact/signals-react");

// app/src/form/TagsEditor.tsx
var import_signals_react11 = require("@preact/signals-react"),
  import_hi8 = require("react-icons/hi"),
  import_jsx_runtime = require("react/jsx-runtime");
function TagsEditor(props) {
  let tags = (0, import_signals_react11.useSignal)(props.defaultTags),
    tag = (0, import_signals_react11.useSignal)("");
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
    className: "form-control gap-2",
    children: [
      (props.label || props.alt) &&
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
          className: "label",
          children: [
            props.label &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: props.label,
              }),
            props.alt &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text-alt",
                children: props.alt,
              }),
          ],
        }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
        className: "flex flex-wrap gap-2",
        children: tags.value.map((name) =>
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            "div",
            {
              className: "badge inline-flex gap-1",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  type: "hidden",
                  name: props.name,
                  value: name,
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_hi8.HiOutlineTag,
                  {}
                ),
                name,
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_hi8.HiOutlineX,
                  {
                    className: "cursor-pointer",
                    onClick: () => {
                      tags.value = tags.value.filter(
                        (name2) => name2 !== tag.value
                      );
                    },
                  }
                ),
              ],
            },
            name
          )
        ),
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "flex gap-4",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
            type: "text",
            className: "input input-bordered",
            value: tag.value,
            onChange: (event) => (tag.value = event.target.value),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
            className: "btn btn-primary",
            type: "button",
            onClick: () => {
              tag.value &&
                (0, import_signals_react11.batch)(() => {
                  (tags.value = [...tags.value, tag.value]), (tag.value = "");
                });
            },
            children: "\u6DFB\u52A0\u6807\u7B7E",
          }),
        ],
      }),
    ],
  });
}

// app/routes/problemset/$problemSetId/edit.tsx
var import_react21 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader6({ request, params }) {
  let problemSetId = invariant(idScheme, params.problemSetId, {
      status: 404,
    }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(await findProblemSetTeam(problemSetId))
      .checkPermission(Permissions.PERM_EDIT_PROBLEM_SET);
  let problemSet = await db.problemSet.findUnique({
    where: { id: problemSetId },
    select: {
      id: !0,
      title: !0,
      description: !0,
      private: !0,
      tags: !0,
      problems: {
        orderBy: { rank: "asc" },
        select: {
          problem: {
            select: {
              ...selectProblemListData,
            },
          },
        },
      },
    },
  });
  if (!problemSet) throw new Response("Problem Set not found", { status: 404 });
  return (0, import_node5.json)({ problemSet });
}
async function action({ request, params }) {
  let problemSetId = invariant(idScheme, params.problemSetId, {
    status: 404,
  });
  await (await findRequestUser(request))
    .team(await findProblemSetTeam(problemSetId))
    .checkPermission(Permissions.PERM_EDIT_PROBLEM_SET);
  let form = await request.formData(),
    _action = form.get("_action");
  switch (_action) {
    case "createProblem" /* CreateProblem */: {
      let problemId = invariant(idScheme, form.get("pid"));
      return (
        await db.$transaction(async (db2) => {
          let {
            _max: { rank },
          } = await db2.problemSetProblem.aggregate({
            where: { problemSetId },
            _max: { rank: !0 },
          });
          await db2.problemSetProblem.create({
            data: {
              problemSetId,
              problemId,
              rank: (rank ?? 0) + 1,
            },
          });
        }),
        null
      );
    }
    case "deleteProblem" /* DeleteProblem */: {
      let problemId = invariant(idScheme, form.get("pid"));
      return (
        await db.$transaction(async () => {
          let { rank } = await db.problemSetProblem.delete({
            where: {
              problemSetId_problemId: {
                problemSetId,
                problemId,
              },
            },
          });
          await db.problemSetProblem.updateMany({
            where: { rank: { gte: rank } },
            data: { rank: { decrement: 1 } },
          });
        }),
        null
      );
    }
    case "moveProblemUp" /* MoveProblemUp */:
    case "moveProblemDown" /* MoveProblemDown */: {
      let problemId = invariant(idScheme, form.get("pid"));
      return (
        await db.$transaction(async (db2) => {
          let problem = await db2.problemSetProblem.findUnique({
            where: {
              problemSetId_problemId: {
                problemSetId,
                problemId,
              },
            },
          });
          if (!problem)
            throw new Response("\u9898\u76EE\u4E0D\u5B58\u5728", {
              status: 404,
            });
          let { rank } = problem,
            target = await db2.problemSetProblem.findUnique({
              where: {
                problemSetId_rank: {
                  problemSetId,
                  rank:
                    _action === "moveProblemUp" /* MoveProblemUp */
                      ? rank - 1
                      : rank + 1,
                },
              },
            });
          if (!target)
            throw new Response("\u79FB\u52A8\u5931\u8D25", { status: 400 });
          await db2.problemSetProblem.delete({
            where: {
              problemSetId_problemId: {
                problemSetId,
                problemId,
              },
            },
          }),
            await db2.problemSetProblem.delete({
              where: {
                problemSetId_problemId: {
                  problemSetId,
                  problemId: target.problemId,
                },
              },
            }),
            await db2.problemSetProblem.createMany({
              data: [
                {
                  problemSetId,
                  problemId: target.problemId,
                  rank,
                },
                {
                  problemSetId,
                  problemId,
                  rank:
                    rank +
                    (_action === "moveProblemUp" /* MoveProblemUp */ ? -1 : 1),
                },
              ],
            });
        }),
        null
      );
    }
    case "updateInformation" /* UpdateInformation */: {
      let title = invariant(titleScheme, form.get("title")),
        description = invariant(descriptionScheme, form.get("description")),
        priv = form.has("private"),
        tags = form.getAll("tag").map((tag) => invariant(tagScheme, tag));
      return (
        await db.$transaction(async (db2) => {
          let problemset = await db2.problemSet.update({
            where: { id: problemSetId },
            data: {
              title,
              description,
              private: priv,
            },
            select: { tags: { select: { name: !0 } } },
          });
          await db2.problemSet.update({
            where: { id: problemSetId },
            data: {
              tags: {
                connectOrCreate: tags
                  .filter(
                    (tag) => !problemset.tags.some((t2) => t2.name === tag)
                  )
                  .map((tag) => ({
                    where: { name: tag },
                    create: { name: tag },
                  })),
                disconnect: problemset.tags
                  .filter((tag) => !tags.includes(tag.name))
                  .map((tag) => ({ name: tag.name })),
              },
            },
          });
        }),
        null
      );
    }
  }
  throw new Response("I'm a teapot", { status: 418 });
}
var meta3 = ({ data: data2 }) => ({
  title: `\u7F16\u8F91\u9898\u5355: ${
    data2 == null ? void 0 : data2.problemSet.title
  } - HITwh OJ`,
});
function ProblemSetEdit() {
  let loaderData = useSignalLoaderData(),
    problemSet = (0, import_signals_react12.useComputed)(
      () => loaderData.value.problemSet
    ),
    transition = useSignalTransition(),
    Toasts = useToasts();
  return (
    (0, import_react21.useEffect)(() => {
      transition.actionSuccess && Toasts.success("\u66F4\u65B0\u6210\u529F");
    }, [transition.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
          children: "\u7F16\u8F91\u516C\u5171\u9898\u5355\u4FE1\u606F",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react20.Form, {
          method: "post",
          className: "form-control gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u6807\u9898",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "text",
                  name: "title",
                  defaultValue: problemSet.value.title,
                  disabled: transition.isRunning,
                  required: !0,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TagsEditor, {
              label: "\u9898\u5355\u6807\u7B7E",
              name: "tag",
              defaultTags: problemSet.value.tags.map(({ name }) => name),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u7B80\u4ECB",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MarkdownEditor, {
                  name: "description",
                  defaultValue: problemSet.value.description,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "form-control",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
                className: "label cursor-pointer justify-start gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                    className: "checkbox checkbox-primary",
                    type: "checkbox",
                    name: "private",
                    defaultChecked: problemSet.value.private,
                    disabled: transition.isRunning,
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                    className: "label-text",
                    children: "\u4FDD\u6301\u9898\u5355\u9690\u85CF",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "form-control w-full max-w-xs",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                className: "btn btn-primary",
                type: "submit",
                name: "_action",
                value: "updateInformation" /* UpdateInformation */,
                disabled: transition.isRunning,
                children: "\u786E\u8BA4\u4FEE\u6539",
              }),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
          children: "\u9898\u76EE",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ProblemEditor, {
          problems: problemSet.value.problems.map(({ problem }) => problem),
          createAction: "createProblem" /* CreateProblem */,
          deleteAction: "deleteProblem" /* DeleteProblem */,
          moveUpAction: "moveProblemUp" /* MoveProblemUp */,
          moveDownAction: "moveProblemDown" /* MoveProblemDown */,
        }),
      ],
    })
  );
}

// app/routes/chat/room/$roomId/enter.tsx
var enter_exports = {};
__export(enter_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action2,
  default: () => EnterRoom,
  loader: () => loader7,
  meta: () => meta4,
});
var import_signals_react13 = require("@preact/signals-react"),
  import_node6 = require("@remix-run/node"),
  import_node7 = require("@remix-run/node"),
  import_react22 = require("@remix-run/react"),
  import_hi9 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader7({ request, params }) {
  let roomId = invariant(idScheme, params.roomId, { status: 404 }),
    self = await findRequestUser(request);
  if (!self.userId) throw new Response("Unauthorized", { status: 401 });
  await self
    .room(roomId)
    .checkPermission(Permissions.PERM_JOIN_CHATROOM_MESSAGE);
  let room = await db.chatRoom.findUnique({
    where: { id: roomId },
    select: {
      id: !0,
      name: !0,
      description: !0,
      private: !0,
    },
  });
  if (!room) throw new Response("Room not found", { status: 404 });
  return (0, import_node6.json)({ room });
}
var meta4 = ({ data: data2 }) => ({
  title: `\u52A0\u5165\u804A\u5929\u5BA4: ${
    data2 == null ? void 0 : data2.room.name
  } - HITwh OJ`,
  description: data2 == null ? void 0 : data2.room.description,
});
function EnterRoom() {
  let loaderData = useSignalLoaderData(),
    room = (0, import_signals_react13.useComputed)(() => loaderData.value.room),
    transition = useSignalTransition();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h1", {
          className: "flex gap-4",
          children: [
            room.value.private &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_hi9.HiOutlineLockClosed,
                {
                  className: "shrink-0",
                }
              ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: room.value.name,
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
          children: room.value.description,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react22.Form, {
          method: "post",
          className: "flex gap-4",
          children: [
            room.value.private &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                className: "input input-bordered",
                type: "password",
                name: "password",
                placeholder: "\u8BF7\u8F93\u5165\u623F\u95F4\u5BC6\u7801",
                disabled: transition.isRunning,
              }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
              className: "btn btn-primary",
              type: "submit",
              disabled: transition.isRunning,
              children: "\u52A0\u5165\u623F\u95F4",
            }),
          ],
        }),
      ],
    }
  );
}
async function action2({ request, params }) {
  let roomId = invariant(idScheme, params.roomId, { status: 404 }),
    self = await findRequestUser(request);
  return (
    await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .room(roomId)
      .checkPermission(Permissions.PERM_JOIN_CHATROOM_MESSAGE),
    await db.$transaction(async (db2) => {
      let room = await db2.chatRoom.findUnique({
        where: { id: roomId },
        select: {
          id: !0,
          private: !0,
          password: !0,
        },
      });
      if (!room)
        throw new Response("\u8BA8\u8BBA\u7EC4\u4E0D\u5B58\u5728", {
          status: 404,
        });
      if (room.private) {
        let form = await request.formData();
        if (
          invariant(weakPasswordScheme, form.get("password")) !== room.password
        )
          throw new Response("\u5BC6\u7801\u9519\u8BEF", { status: 400 });
      }
      await db2.chatRoomUser.create({
        data: {
          userId: self.userId,
          roomId: room.id,
        },
      });
    }),
    (0, import_node7.redirect)(`/chat/room/${roomId}`)
  );
}

// app/routes/chat/room/$roomId/index.tsx
var roomId_exports = {};
__export(roomId_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action3,
  default: () => ChatRoomIndex,
  loader: () => loader8,
  meta: () => meta5,
});
var import_node8 = require("@remix-run/node"),
  import_node9 = require("@remix-run/node");
var import_react24 = require("@remix-run/react"),
  import_react25 = require("react");

// app/src/Fullscreen.tsx
var import_react23 = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
function Fullscreen({ visible, className, ...props }) {
  return (
    (0, import_react23.useEffect)(() => {
      menuSignal.value = !visible;
    }, [visible]),
    (0, import_react23.useEffect)(() => () => void (menuSignal.value = !0), []),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
      className: `${
        visible ? "visible" : "invisible scale-75 opacity-0"
      } text-base-content fixed top-0 left-0 z-10 h-screen w-screen transition ${
        className ?? ""
      }`,
      ...props,
    })
  );
}

// app/routes/chat/room/$roomId/index.tsx
var import_hi10 = require("react-icons/hi");
var import_signals_react14 = require("@preact/signals-react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader8({ request, params }) {
  let roomId = invariant(idScheme, params.roomId, { status: 404 }),
    self = await findRequestUser(request),
    [hasReadPerm, isMember] = await self
      .room(roomId)
      .hasPermission(
        Permissions.PERM_VIEW_CHATROOM_MESSAGE,
        ChatRoomPermission.Members
      );
  if (!hasReadPerm)
    throw (0, import_node9.redirect)(`/chat/room/${roomId}/enter`);
  let room = await db.chatRoom.findUnique({
    where: { id: roomId },
    select: {
      id: !0,
      name: !0,
      chatMessage: {
        orderBy: { sentAt: "asc" },
        select: {
          id: !0,
          role: !0,
          content: !0,
          sentAt: !0,
          roomId: !0,
          sender: { select: { ...selectUserData } },
        },
      },
    },
  });
  if (!room) throw new Response("Room not found", { status: 404 });
  return (0, import_node8.json)({ room, isMember });
}
var meta5 = ({ data: data2 }) => ({
  title: `\u804A\u5929\u5BA4: ${
    data2 == null ? void 0 : data2.room.name
  } - HITwh OJ`,
});
function ChatRoomIndex() {
  let loaderData = useSignalLoaderData(),
    room = (0, import_signals_react14.useComputed)(() => loaderData.value.room),
    isMember = (0, import_signals_react14.useComputed)(
      () => loaderData.value.isMember
    ),
    messages = useSynchronized(() => room.value.chatMessage);
  (0, import_signals_react14.useSignalEffect)(() => {
    let subscription = fromEventSource(`./${room.value.id}/events`).subscribe(
      (message) => {
        messages.value = [...messages.value, message];
      }
    );
    return () => subscription.unsubscribe();
  });
  let transition = useSignalTransition(),
    formRef = (0, import_react25.useRef)(null);
  return (
    (0, import_react25.useEffect)(() => {
      var _a2;
      transition.actionSuccess &&
        ((_a2 = formRef.current) == null || _a2.reset());
    }, [transition.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Fullscreen, {
      visible: !0,
      className: "not-prose",
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "drawer-mobile drawer",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
            type: "checkbox",
            className: "drawer-toggle",
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className:
              "not-prose drawer-content bg-base-100 flex min-h-full flex-col overflow-auto px-4",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("header", {
                className: "bg-base-100 sticky top-0 z-10 py-4",
                children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
                  className: "text-2xl font-bold",
                  children: room.value.name,
                }),
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "flex-1",
                children: messages.value.map((message, index2, array) =>
                  index2 === 0 ||
                  array[index2 - 1].sender.id !== message.sender.id ||
                  new Date(message.sentAt).getTime() -
                    new Date(array[index2 - 1].sentAt).getTime() >
                    3e5
                    ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                        "div",
                        {
                          className:
                            "hover:bg-base-200 flex gap-4 px-2 pt-2 transition",
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                              UserAvatar,
                              {
                                className:
                                  "bg-base-300 h-12 w-12 flex-shrink-0 text-2xl",
                                user: message.sender,
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                              "div",
                              {
                                className: "flex-1",
                                children: [
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    "div",
                                    {
                                      className: "flex w-full justify-between",
                                      children: /* @__PURE__ */ (0,
                                      import_jsx_runtime.jsxs)("span", {
                                        className:
                                          "inline-flex items-center gap-2",
                                        children: [
                                          /* @__PURE__ */ (0,
                                          import_jsx_runtime.jsx)("span", {
                                            className: "text-primary",
                                            children:
                                              message.sender.nickname ||
                                              message.sender.username,
                                          }),
                                          message.role === "Owner" &&
                                            /* @__PURE__ */ (0,
                                            import_jsx_runtime.jsx)("span", {
                                              className: "badge badge-primary",
                                              children: "\u6240\u6709\u4EBA",
                                            }),
                                          message.role === "Admin" &&
                                            /* @__PURE__ */ (0,
                                            import_jsx_runtime.jsx)("span", {
                                              className: "badge badge-primary",
                                              children: "\u7BA1\u7406\u5458",
                                            }),
                                          !message.role &&
                                            /* @__PURE__ */ (0,
                                            import_jsx_runtime.jsx)("span", {
                                              className: "badge",
                                              children: "\u6E38\u5BA2",
                                            }),
                                        ],
                                      }),
                                    }
                                  ),
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    "div",
                                    {
                                      className: "min-w-0 break-words",
                                      children: message.content,
                                    }
                                  ),
                                ],
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                              children: /* @__PURE__ */ (0,
                              import_jsx_runtime.jsx)("span", {
                                className: "tooltip tooltip-left",
                                "data-tip": formatDateTime(message.sentAt),
                                children: /* @__PURE__ */ (0,
                                import_jsx_runtime.jsx)("time", {
                                  className:
                                    "text-base-content text-sm opacity-60",
                                  children: formatTime(message.sentAt),
                                }),
                              }),
                            }),
                          ],
                        },
                        message.id
                      )
                    : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                        "div",
                        {
                          className:
                            "hover:bg-base-200 group flex gap-4 px-2 transition",
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                              className: "h-0 w-12 flex-shrink-0",
                            }),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                              "span",
                              {
                                className: "min-w-0 flex-1 break-words",
                                children: message.content,
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                              children: /* @__PURE__ */ (0,
                              import_jsx_runtime.jsx)("span", {
                                className: "tooltip tooltip-left",
                                "data-tip": formatDateTime(message.sentAt),
                                children: /* @__PURE__ */ (0,
                                import_jsx_runtime.jsx)("time", {
                                  className:
                                    "text-sm opacity-0 transition group-hover:opacity-60",
                                  children: formatTime(message.sentAt),
                                }),
                              }),
                            }),
                          ],
                        },
                        message.id
                      )
                ),
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                import_react24.Form,
                {
                  method: "post",
                  className: "bg-base-100 sticky bottom-0 z-10 flex gap-4 py-4",
                  ref: formRef,
                  autoComplete: "off",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                      type: "hidden",
                      name: "roomId",
                      value: room.value.id,
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                      className: "input input-bordered flex-1",
                      type: "text",
                      placeholder: "\u8F93\u5165\u6D88\u606F...",
                      name: "content",
                      disabled: transition.isRunning,
                      required: !0,
                      autoComplete: "false",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
                      className: "btn btn-primary gap-2",
                      type: "submit",
                      disabled: transition.isRunning,
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          import_hi10.HiOutlinePaperAirplane,
                          {
                            className: "rotate-90",
                          }
                        ),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                          children: "\u53D1\u9001",
                        }),
                      ],
                    }),
                  ],
                }
              ),
            ],
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className: "drawer-side",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "drawer-overlay",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("aside", {
                className: "bg-base-200 flex w-72 flex-col justify-between p-4",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                      import_react24.Link,
                      {
                        className: "btn btn-ghost gap-2",
                        to: "/",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            import_hi10.HiOutlineChevronLeft,
                            {}
                          ),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                            children: "\u8FD4\u56DE\u4E0A\u4E00\u9875",
                          }),
                        ],
                      }
                    ),
                  }),
                  isMember &&
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_react24.Form,
                      {
                        method: "post",
                        action: "exit",
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                          "button",
                          {
                            className: "btn btn-error w-full gap-2",
                            children: [
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                import_hi10.HiOutlineLogout,
                                {}
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "span",
                                {
                                  children: "\u9000\u51FA\u7FA4\u7EC4",
                                }
                              ),
                            ],
                          }
                        ),
                      }
                    ),
                ],
              }),
            ],
          }),
        ],
      }),
    })
  );
}
async function action3({ request, params }) {
  let roomId = invariant(idScheme, params.roomId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .room(roomId)
      .checkPermission(Permissions.PERM_SEND_CHATROOM_MESSAGE);
  let form = await request.formData(),
    content3 = invariant(contentScheme, form.get("content")),
    user = await db.chatRoomUser.findUnique({
      where: { roomId_userId: { roomId, userId: self.userId } },
      select: { role: !0 },
    }),
    message = await db.chatMessage.create({
      data: {
        roomId,
        senderId: self.userId,
        content: content3,
        role: user == null ? void 0 : user.role,
      },
      select: { id: !0 },
    });
  return chatMessageSubject.next(message.id), null;
}

// app/routes/record/$recordId/events.tsx
var events_exports2 = {};
__export(events_exports2, {
  loader: () => loader9,
});
var import_rxjs5 = require("rxjs");
var observer2 = recordUpdateSubject.asObservable();
async function loader9({ request, params }) {
  let recordId = invariant(idScheme, params.recordId, { status: 404 });
  return createEventSource(
    request,
    observer2.pipe((0, import_rxjs5.filter)(({ id }) => id === recordId))
  );
}

// app/routes/chat/room/$roomId/exit.tsx
var exit_exports = {};
__export(exit_exports, {
  action: () => action4,
});
var import_node10 = require("@remix-run/node");
async function action4({ request, params }) {
  let roomId = invariant(idScheme, params.roomId, { status: 404 }),
    self = await findRequestUser(request);
  return (
    await self.room(roomId).checkPermission(ChatRoomPermission.Members),
    await db.chatRoomUser.delete({
      where: {
        roomId_userId: {
          roomId,
          userId: self.userId,
        },
      },
    }),
    (0, import_node10.redirect)(`/chat/room/${roomId}`)
  );
}

// app/routes/record/$recordId/index.tsx
var recordId_exports = {};
__export(recordId_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => RecordView,
  loader: () => loader10,
  meta: () => meta6,
});
var import_node11 = require("@remix-run/node");

// app/utils/server/s3.server.ts
var import_minio = require("minio");
function readableToBuffer(stream) {
  let data2 = [];
  return new Promise((resolve2, reject) => {
    stream.on("data", (chunk) => data2.push(chunk)),
      stream.on("end", () => resolve2(Buffer.concat(data2))),
      stream.on("error", (err) => reject(err));
  });
}
var S3 = class {
    client;
    bucket;
    region;
    constructor() {
      let endPoint = process.env.S3_END_POINT || "localhost",
        port = parseInt(process.env.S3_PORT || "9000"),
        useSSL = process.env.S3_SSL === "true",
        accessKey = process.env.S3_ACCESS_KEY || process.env.S3_ROOT_USER || "",
        secretKey =
          process.env.S3_SECRET_KEY || process.env.S3_ROOT_PASSWORD || "",
        bucket = process.env.S3_BUCKET || "",
        region = process.env.S3_REGION || "cn-north-1";
      if (!bucket) throw new Error("S3_BUCKET is not set");
      (!accessKey || !secretKey) &&
        console.warn("S3_ACCESS_KEY or S3_SECRET_KEY is not set"),
        (this.client = new import_minio.Client({
          endPoint,
          port,
          useSSL,
          accessKey,
          secretKey,
          region,
        })),
        (this.bucket = bucket),
        (this.region = region);
    }
    copyFile(filename, srcfile, mimetype = "application/octet-stream") {
      return this.client.fPutObject(this.bucket, filename, srcfile, {
        mimetype,
      });
    }
    writeFile(filename, buffer2, mimetype = "application/octet-stream") {
      return (
        typeof buffer2 == "string" && (buffer2 = Buffer.from(buffer2)),
        this.client.putObject(this.bucket, filename, buffer2, { mimetype })
      );
    }
    async readFile(filename) {
      return await readableToBuffer(
        await this.client.getObject(this.bucket, filename)
      );
    }
    async readFilePartial(filename, offset, length) {
      return await readableToBuffer(
        await this.client.getPartialObject(
          this.bucket,
          filename,
          offset,
          length
        )
      );
    }
    statFile(filename) {
      return this.client.statObject(this.bucket, filename);
    }
    removeFile(filename) {
      return this.client.removeObject(this.bucket, filename);
    }
    removeFiles(filenames) {
      return this.client.removeObjects(this.bucket, filenames);
    }
    listDir(dirname) {
      return new Promise((resolve2, reject) => {
        let items = [],
          stream = this.client.listObjectsV2(this.bucket, dirname);
        stream.on("data", (item) => items.push(item)),
          stream.on("end", () => resolve2(items)),
          stream.on("error", (err) => reject(err));
      });
    }
    async removeDir(dirname) {
      let filenames = (await this.listDir(dirname)).map((item) => item.name);
      return this.removeFiles(filenames);
    }
    async ensureBucket() {
      (await this.client.bucketExists(this.bucket)) ||
        (console.warn(`Bucket ${this.bucket} does not exist, creating...`),
        await this.client.makeBucket(this.bucket, this.region),
        console.warn(`Bucket ${this.bucket} created.`));
    }
  },
  s3;
(s3 = new S3()), s3.ensureBucket();

// app/src/Highlighter.tsx
var import_react26 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
function Highlighter({ children, language: language2 }) {
  let hast = lowlight.highlight(language2, children);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("pre", {
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("code", {
      className: `hljs language-${language2}`,
      children: toH(import_react26.createElement, hast),
    }),
  });
}

// app/src/record/RecordStatus.tsx
var import_ai2 = require("react-icons/ai"),
  import_hi11 = require("react-icons/hi"),
  import_jsx_runtime = require("react/jsx-runtime");
function RecordStatus({ status }) {
  let color3, icon;
  switch (status) {
    case "Accepted": {
      (color3 = "text-success"),
        (icon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi11.HiOutlineCheck,
          {}
        ));
      break;
    }
    case "Compile Error":
    case "Memory Limit Exceeded":
    case "Output Limit Exceeded":
    case "Runtime Error":
    case "System Error":
    case "Time Limit Exceeded":
    case "Unknown Error":
    case "Wrong Answer": {
      (color3 = "text-error"),
        (icon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi11.HiOutlineX,
          {}
        ));
      break;
    }
    case "Compiling":
    case "Judging":
    case "Running": {
      (color3 = "text-warning"),
        (icon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_ai2.AiOutlineLoading3Quarters,
          {
            className: "animate-spin",
          }
        ));
      break;
    }
    case "Pending": {
      (color3 = ""),
        (icon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_ai2.AiOutlineLoading3Quarters,
          {
            className: "animate-spin",
          }
        ));
      break;
    }
    case "Skipped": {
      (color3 = ""),
        (icon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi11.HiOutlineMinus,
          {}
        ));
      break;
    }
    default: {
      (color3 = "text-primary"),
        (icon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi11.HiOutlineQuestionMarkCircle,
          {}
        ));
      break;
    }
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
    className: `inline-flex items-center gap-2 ${color3}`,
    children: [
      icon,
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
        children: status,
      }),
    ],
  });
}

// app/src/record/RecordMemory.tsx
var import_hi12 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime");
function RecordMemory({ memory }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
    className: "badge gap-1",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_hi12.HiOutlineChip,
        {}
      ),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
        children:
          memory < 0
            ? "N/A"
            : memory < 1024
            ? `${formatNumber(memory)} B`
            : memory < 1024 * 1024
            ? `${formatNumber(memory / 1024)} KB`
            : memory < 1024 * 1024 * 1024
            ? `${formatNumber(memory / 1024 / 1024)} MB`
            : `${formatNumber(memory / 1024 / 1024 / 1024)} GB`,
      }),
    ],
  });
}

// app/src/record/RecordTime.tsx
var import_hi13 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime");
function RecordTime({ time }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
    className: "badge gap-1",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_hi13.HiOutlineClock,
        {}
      ),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
        children: time < 0 ? "N/A" : `${formatNumber(time)} ms`,
      }),
    ],
  });
}

// app/src/record/RecordTimeMemory.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function RecordTimeMemory({ time, memory }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
    className: "inline-flex gap-2",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(RecordTime, {
        time,
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(RecordMemory, {
        memory,
      }),
    ],
  });
}

// app/src/user/UserLink.tsx
var import_react27 = require("@remix-run/react");
var import_jsx_runtime = require("react/jsx-runtime");
function UserLink({ user }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
    className: "dropdown dropdown-top dropdown-hover",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react27.Link, {
        tabIndex: 0,
        className: "link",
        to: `/user/${user.id}`,
        children: user.nickname
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
              import_jsx_runtime.Fragment,
              {
                children: [
                  user.nickname,
                  " ",
                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                    style: { color: "rgb(var(--gray-6))" },
                    children: ["(", user.username, ")"],
                  }),
                ],
              }
            )
          : user.username,
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        tabIndex: 0,
        className:
          "dropdown-content rounded-box bg-base-300 flex w-72 gap-4 p-4 shadow-2xl",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UserAvatar, {
            user,
            className: "bg-base-100 h-16 w-16 flex-shrink-0 text-3xl",
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className: "whitespace-normal",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "text-lg font-bold",
                children: user.nickname || user.username,
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "text-base-content",
                children:
                  user.bio ||
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                    className: "italic",
                    children: "\u6CA1\u6709\u7B7E\u540D",
                  }),
              }),
            ],
          }),
        ],
      }),
    ],
  });
}

// app/src/contest/ContestLink.tsx
var import_react28 = require("@remix-run/react"),
  import_ai3 = require("react-icons/ai"),
  import_hi14 = require("react-icons/hi");

// app/src/contest/ContestStateTag.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function ContestStateTag({ beginTime, endTime }) {
  let begin = new Date(beginTime),
    end = new Date(endTime),
    status =
      begin > new Date()
        ? "\u672A\u5F00\u59CB"
        : end < new Date()
        ? "\u5DF2\u7ED3\u675F"
        : "\u8FDB\u884C\u4E2D",
    color3 =
      begin > new Date()
        ? "badge-primary"
        : end < new Date()
        ? "badge-secondary"
        : "badge-accent";
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
    className: `badge ${color3}`,
    children: status,
  });
}

// app/src/contest/ContestLink.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function ContestLink({ contest }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react28.Link, {
    className: "link inline-flex items-center gap-2",
    to: `/contest/${contest.id}`,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_ai3.AiOutlineTrophy,
        {}
      ),
      contest.title,
      contest.private &&
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi14.HiOutlineEyeOff,
          {}
        ),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ContestStateTag, {
        beginTime: contest.beginTime,
        endTime: contest.endTime,
      }),
    ],
  });
}

// app/utils/db/contest.ts
var selectContestListData = {
  id: !0,
  title: !0,
  beginTime: !0,
  endTime: !0,
  system: !0,
  private: !0,
  tags: {
    orderBy: { name: "asc" },
    select: {
      name: !0,
    },
  },
};
async function findContestTeam(contestId) {
  let contest = await db.contest.findUnique({
    where: { id: contestId },
    select: { teamId: !0 },
  });
  if (!contest) throw new Response("Contest not found", { status: 404 });
  return contest.teamId;
}
async function findContestStatus(contestId) {
  let contest = await db.contest.findUnique({
    where: { id: contestId },
    select: { beginTime: !0, endTime: !0 },
  });
  if (!contest) throw new Response("Contest not found", { status: 404 });
  return contest.beginTime.getTime() > Date.now()
    ? "Pending" /* Pending */
    : contest.endTime.getTime() < Date.now()
    ? "Ended" /* Ended */
    : "Running" /* Running */;
}
async function findContestProblemIdByRank(contestId, rank) {
  let contest = await db.contestProblem.findUnique({
    where: { contestId_rank: { contestId, rank } },
    select: { problemId: !0 },
  });
  if (!contest) throw new Response("Contest not found", { status: 404 });
  return contest.problemId;
}
async function findContestPrivacy(contestId) {
  let contest = await db.contest.findUnique({
    where: { id: contestId },
    select: { private: !0 },
  });
  if (!contest) throw new Response("Contest not found", { status: 404 });
  return contest.private;
}
async function findContestParticipantRole(contestId, userId) {
  let participation = await db.contestParticipant.findUnique({
    where: { contestId_userId: { contestId, userId } },
    select: { role: !0 },
  });
  return participation ? participation.role : null;
}

// app/utils/db/record.ts
async function findRecordUser(recordId) {
  let record = await db.record.findUnique({
    where: { id: recordId },
    select: { submitterId: !0 },
  });
  if (!record) throw new Response("Record not found", { status: 404 });
  return record.submitterId;
}
async function findRecordTeam(recordId) {
  let record = await db.record.findUnique({
    where: { id: recordId },
    select: {
      contest: {
        select: {
          teamId: !0,
        },
      },
    },
  });
  if (!record) throw new Response("Record not found", { status: 404 });
  return record.contest && record.contest.teamId;
}
async function findRecordContest(recordId) {
  let record = await db.record.findUnique({
    where: { id: recordId },
    select: { contestId: !0 },
  });
  if (!record) throw new Response("Record not found", { status: 404 });
  return record.contestId;
}

// app/routes/record/$recordId/index.tsx
var import_ai4 = require("react-icons/ai"),
  import_hi15 = require("react-icons/hi"),
  import_signals_react15 = require("@preact/signals-react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader10({ request, params }) {
  let recordId = invariant(idScheme, params.recordId, { status: 404 }),
    self = await findRequestUser(request),
    user = await findRecordUser(recordId),
    [allowCode] = await self
      .team(await findRecordTeam(recordId))
      .contest(await findRecordContest(recordId))
      .hasPermission(
        user === self.userId
          ? Permissions.PERM_VIEW_RECORD_SELF
          : Permissions.PERM_VIEW_RECORD
      ),
    record = await db.record.findUnique({
      where: { id: recordId },
      select: {
        id: !0,
        status: !0,
        message: !0,
        language: !0,
        score: !0,
        time: !0,
        memory: !0,
        subtasks: !0,
        submitter: { select: selectUserData },
        problem: { select: selectProblemListData },
        contest: { select: selectContestListData },
      },
    });
  if (!record) throw new Response("Record not found", { status: 404 });
  let code3 = allowCode
    ? (await s3.readFile(`/record/${record.id}`)).toString()
    : "";
  return (0, import_node11.json)({ record, code: code3 });
}
var meta6 = ({ data: data2 }) => ({
  title: `\u63D0\u4EA4\u8BB0\u5F55: ${
    data2 == null ? void 0 : data2.record.status
  } - HITwh OJ`,
});
function RecordView() {
  let loaderData = useSignalLoaderData(),
    record = useSynchronized(() => loaderData.value.record),
    code3 = (0, import_signals_react15.useComputed)(
      () => loaderData.value.code
    );
  (0, import_signals_react15.useSignalEffect)(() => {
    let subscription = fromEventSource(`./${record.value.id}/events`).subscribe(
      (msg) => {
        record.value = {
          ...record.value,
          time: msg.time,
          memory: msg.memory,
          status: msg.status,
          subtasks: msg.subtasks,
          message: msg.message,
        };
      }
    );
    return () => subscription.unsubscribe();
  });
  let Toasts = useToasts(),
    subtasks = (0, import_signals_react15.useComputed)(
      () => record.value.subtasks
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(RecordStatus, {
            status: record.value.status,
          }),
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            RecordTimeMemory,
            {
              time: record.value.time,
              memory: record.value.memory,
            }
          ),
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "my-4 flex flex-wrap gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                  className: "opacity-60",
                  children: "\u7528\u6237\uFF1A",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UserLink, {
                  user: record.value.submitter,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                  className: "opacity-60",
                  children: "\u9898\u76EE\uFF1A",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ProblemLink, {
                  problem: record.value.problem,
                }),
              ],
            }),
            record.value.contest &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                    className: "opacity-60",
                    children: "\u6BD4\u8D5B\uFF1A",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ContestLink, {
                    contest: record.value.contest,
                  }),
                ],
              }),
          ],
        }),
        record.value.message &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            import_jsx_runtime.Fragment,
            {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                  children: "\u8F93\u51FA\u4FE1\u606F",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Highlighter, {
                  language: "text",
                  children: record.value.message,
                }),
              ],
            }
          ),
        subtasks.value.length > 0 &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            import_jsx_runtime.Fragment,
            {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                  children: "\u6D4B\u8BD5\u70B9\u7ED3\u679C",
                }),
                subtasks.value.map((subtask, index2) =>
                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                    "div",
                    {
                      className: "collapse-open collapse",
                      tabIndex: 0,
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                          className: "collapse-title flex gap-2",
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                              "span",
                              {
                                children: ["\u5B50\u4EFB\u52A1 ", index2 + 1],
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                              RecordStatus,
                              {
                                status: subtask.status,
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                              "span",
                              {
                                children: subtask.message,
                              }
                            ),
                          ],
                        }),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                          className: "collapse-content",
                          children: subtask.tasks.map((task, index3) =>
                            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                              "div",
                              {
                                className: "flex items-center gap-2",
                                children: [
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    import_hi15.HiOutlineChevronRight,
                                    {}
                                  ),
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                                    "span",
                                    {
                                      children: [
                                        "\u6D4B\u8BD5\u70B9 ",
                                        index3 + 1,
                                      ],
                                    }
                                  ),
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    RecordStatus,
                                    {
                                      status: task.status,
                                    }
                                  ),
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    "span",
                                    {
                                      children: task.message,
                                    }
                                  ),
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    RecordTimeMemory,
                                    {
                                      time: task.time,
                                      memory: task.memory,
                                    }
                                  ),
                                ],
                              },
                              index3
                            )
                          ),
                        }),
                      ],
                    },
                    index2
                  )
                ),
              ],
            }
          ),
        code3.value &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            import_jsx_runtime.Fragment,
            {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h2", {
                  className: "flex gap-2",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u6E90\u4EE3\u7801",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                      className: "btn btn-square btn-ghost btn-sm",
                      onClick: () =>
                        navigator.clipboard.writeText(code3.value).then(
                          () => Toasts.success("\u590D\u5236\u6210\u529F"),
                          () => Toasts.error("\u6743\u9650\u4E0D\u8DB3")
                        ),
                      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                        import_ai4.AiOutlineCopy,
                        {
                          className: "text-info h-4 w-4",
                        }
                      ),
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Highlighter, {
                  language: record.value.language,
                  children: code3.value,
                }),
              ],
            }
          ),
      ],
    }
  );
}

// app/routes/problemset/tag/$tag.tsx
var tag_exports = {};
__export(tag_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ProblemSetTag,
  loader: () => loader11,
  meta: () => meta7,
});
var import_node12 = require("@remix-run/node"),
  import_react30 = require("@remix-run/react");

// app/src/problemset/ProblemSetLink.tsx
var import_react29 = require("@remix-run/react"),
  import_hi16 = require("react-icons/hi"),
  import_jsx_runtime = require("react/jsx-runtime");
function ProblemSetLink({ problemset }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react29.Link, {
    className: "link inline-flex items-center gap-2",
    to: `/problemset/${problemset.id}`,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
        children: problemset.title,
      }),
      problemset.private &&
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi16.HiOutlineEyeOff,
          {
            className: "inline-block",
          }
        ),
    ],
  });
}

// app/routes/problemset/tag/$tag.tsx
var import_signals_react16 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader11({ request, params }) {
  let tag = invariant(tagScheme, params.tag, { status: 404 }),
    self = await findRequestUser(request),
    [viewAll, viewPublic] = await self
      .team(null)
      .hasPermission(
        Permissions.PERM_VIEW_PROBLEM_SET,
        Permissions.PERM_VIEW_PROBLEM_SET_PUBLIC
      ),
    problemSets = await db.problemSet.findMany({
      where: viewAll
        ? { team: null, tags: { some: { name: tag } } }
        : viewPublic
        ? { team: null, tags: { some: { name: tag } }, private: !1 }
        : { id: -1 },
      orderBy: { id: "asc" },
      select: {
        id: !0,
        title: !0,
        private: !0,
        _count: {
          select: {
            problems: !0,
          },
        },
      },
    });
  if (!problemSets.length)
    throw new Response("Problem Set Tag not found", { status: 404 });
  return (0, import_node12.json)({ problemSets });
}
var meta7 = ({ params }) => ({
  title: `\u9898\u5355\u6807\u7B7E: ${params.tag} - HITwh OJ`,
});
function ProblemSetTag() {
  let { tag } = (0, import_react30.useParams)(),
    loaderData = useSignalLoaderData(),
    problemSets = (0, import_signals_react16.useComputed)(
      () => loaderData.value.problemSets
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h1", {
          children: ["\u9898\u5355\u6807\u7B7E\uFF1A", tag],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u5355",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u76EE\u6570\u91CF",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: problemSets.value.map((problemset) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: problemset.id,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ProblemSetLink,
                          {
                            problemset,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: problemset._count.problems,
                      }),
                    ],
                  },
                  problemset.id
                )
              ),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/contest/$contestId.tsx
var contestId_exports = {};
__export(contestId_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ContestView,
  loader: () => loader12,
  meta: () => meta8,
});
var import_node13 = require("@remix-run/node"),
  import_react31 = require("@remix-run/react");

// app/src/contest/ContestSystemTag.tsx
var import_ai5 = require("react-icons/ai"),
  import_jsx_runtime = require("react/jsx-runtime"),
  BADGE_COLOR = {
    ACM: "badge-primary",
    OI: "badge-secondary",
    IOI: "badge-accent",
    Homework: "badge-neutral",
  };
function ContestSystemTag({ system }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
    className: `badge ${BADGE_COLOR[system]} gap-1`,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_ai5.AiOutlineTrophy,
        {}
      ),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
        children: system,
      }),
    ],
  });
}

// app/routes/contest/$contestId.tsx
var import_ai6 = require("react-icons/ai"),
  import_hi17 = require("react-icons/hi"),
  import_react32 = require("react");
var import_signals_react17 = require("@preact/signals-react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader12({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    perm = (await findRequestUser(request))
      .team(await findContestTeam(contestId))
      .contest(contestId);
  await perm.checkPermission(
    (await findContestPrivacy(contestId))
      ? Permissions.PERM_VIEW_CONTEST
      : Permissions.PERM_VIEW_CONTEST_PUBLIC
  );
  let status = await findContestStatus(contestId),
    [hasEditPerm, hasViewProblemPerm, isContestants] = await perm.hasPermission(
      Permissions.PERM_EDIT_CONTEST,
      status === "Pending"
        ? Permissions.PERM_VIEW_CONTEST_PROBLEMS_BEFORE
        : status === "Running"
        ? Permissions.PERM_VIEW_CONTEST_PROBLEMS_DURING
        : Permissions.PERM_VIEW_CONTEST_PROBLEMS_AFTER,
      ContestPermission.Contestants
    ),
    contest = await db.contest.findUnique({
      where: { id: contestId },
      select: {
        id: !0,
        title: !0,
        system: !0,
        beginTime: !0,
        endTime: !0,
        private: !0,
        tags: {
          select: {
            name: !0,
          },
        },
      },
    });
  if (!contest) throw new Response("Contest not found", { status: 404 });
  return (0, import_node13.json)({
    contest,
    hasEditPerm,
    hasViewProblemPerm,
    isContestants,
  });
}
var meta8 = ({ data: data2 }) => ({
  title: `\u6BD4\u8D5B: ${
    data2 == null ? void 0 : data2.contest.title
  } - HITwh OJ`,
});
function ContestView() {
  let loaderData = useSignalLoaderData(),
    contest = (0, import_signals_react17.useComputed)(
      () => loaderData.value.contest
    ),
    hasEditPerm = (0, import_signals_react17.useComputed)(
      () => loaderData.value.hasEditPerm
    ),
    hasViewProblemPerm = (0, import_signals_react17.useComputed)(
      () => loaderData.value.hasViewProblemPerm
    ),
    isContestants = (0, import_signals_react17.useComputed)(
      () => loaderData.value.isContestants
    ),
    { contestId } = (0, import_react31.useParams)(),
    Toasts = useToasts();
  return (
    (0, import_react32.useEffect)(() => {
      let subsctiption = fromEventSource(
        `/contest/${contestId}/clarification/events/resolve`
      ).subscribe(() =>
        Toasts.info(
          "\u60A8\u63D0\u4EA4\u7684\u53CD\u9988\u5DF2\u7ECF\u88AB\u6807\u8BB0\u4E3A\u89E3\u51B3"
        )
      );
      return () => subsctiption.unsubscribe();
    }, []),
    (0, import_react32.useEffect)(() => {
      let subsctiption = fromEventSource(
        `/contest/${contestId}/clarification/events/reply`
      ).subscribe(({ content: content3 }) =>
        Toasts.info(
          `\u6536\u5230\u65B0\u7684\u53CD\u9988\u56DE\u590D\uFF1A${content3}`
        )
      );
      return () => subsctiption.unsubscribe();
    }, []),
    (0, import_react32.useEffect)(() => {
      let subsctiption = fromEventSource(
        `/contest/${contestId}/clarification/events/assign`
      ).subscribe(() =>
        Toasts.info(
          "\u60A8\u63D0\u4EA4\u7684\u53CD\u9988\u6B63\u5728\u88AB\u5BA1\u7406"
        )
      );
      return () => subsctiption.unsubscribe();
    }, []),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h1", {
          className: "flex gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_ai6.AiOutlineTrophy,
              {
                className: "flex-shrink-0",
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: contest.value.title,
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", {
          className: "not-prose flex flex-wrap gap-2",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ContestStateTag, {
              beginTime: contest.value.beginTime,
              endTime: contest.value.endTime,
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ContestSystemTag, {
              system: contest.value.system,
            }),
            contest.value.private &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                className: "badge badge-warning gap-1",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    import_hi17.HiOutlineEyeOff,
                    {}
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                    children: "\u9690\u85CF",
                  }),
                ],
              }),
            contest.value.tags.map(({ name }) =>
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                import_react31.Link,
                {
                  className: "badge gap-1",
                  to: `/contest/tag/${name}`,
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi17.HiOutlineTag,
                      {}
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: name,
                    }),
                  ],
                },
                name
              )
            ),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", {
          className: "not-prose tabs tabs-boxed bg-base-100",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_react31.NavLink,
              {
                className: "tab",
                to: "desc",
                children: "\u8BE6\u60C5",
              }
            ),
            (hasViewProblemPerm.value || isContestants.value) &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react31.NavLink,
                {
                  className: "tab",
                  to: "problem",
                  children: "\u9898\u76EE",
                }
              ),
            hasEditPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react31.NavLink,
                {
                  className: "tab",
                  to: "edit",
                  children: "\u7F16\u8F91",
                }
              ),
            hasEditPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react31.NavLink,
                {
                  className: "tab",
                  to: "members",
                  children: "\u6210\u5458",
                }
              ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_react31.NavLink,
              {
                className: "tab",
                to: "board",
                children: "\u6392\u884C\u699C",
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_react31.NavLink,
              {
                className: "tab",
                to: "clarification",
                children: "\u53CD\u9988",
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_react31.NavLink,
              {
                className: "tab",
                to: `/record?cid=${contest.value.id}`,
                children: "\u63D0\u4EA4\u8BB0\u5F55",
              }
            ),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react31.Outlet, {}),
      ],
    })
  );
}

// app/routes/contest/$contestId/clarification/$clarificationId.tsx
var clarificationId_exports = {};
__export(clarificationId_exports, {
  action: () => action5,
  default: () => ClarificationDetail,
  loader: () => loader13,
});
var import_node14 = require("@remix-run/node"),
  import_react33 = require("@remix-run/react"),
  import_hi18 = require("react-icons/hi");
var import_signals_react18 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader13({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    clarificationId = invariant(idScheme, params.clarificationId, {
      status: 404,
    }),
    self = await findRequestUser(request),
    [canReply] = await self
      .team(await findContestTeam(contestId))
      .contest(contestId)
      .hasPermission(Permissions.PERM_REPLY_CONTEST_CLARIFICATION),
    clarification = await db.clarification.findUnique({
      where: { id: clarificationId },
      select: {
        id: !0,
        content: !0,
        createdAt: !0,
        user: { select: { ...selectUserData } },
        applicant: { select: { ...selectUserData } },
        resolved: !0,
        rank: !0,
        contest: {
          select: {
            title: !0,
          },
        },
        replies: {
          orderBy: { createdAt: "asc" },
          select: {
            createdAt: !0,
            content: !0,
            id: !0,
            replier: {
              select: {
                username: !0,
                avatar: !0,
              },
            },
          },
        },
      },
    });
  if (!clarification)
    throw new Response("Clarification not found", { status: 404 });
  return (0, import_node14.json)({ clarification, canReply });
}
function ClarificationDetail() {
  let { contestId } = (0, import_react33.useParams)(),
    loaderData = useSignalLoaderData(),
    clarification = (0, import_signals_react18.useComputed)(
      () => loaderData.value.clarification
    ),
    canReply = (0, import_signals_react18.useComputed)(
      () => loaderData.value.canReply
    ),
    transition = useSignalTransition();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Fullscreen, {
    visible: !0,
    className: "bg-base-100 overflow-auto",
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
      className: "mx-auto w-full max-w-2xl p-4",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            import_react33.Link,
            {
              className: "btn btn-ghost gap-2",
              to: `/contest/${contestId}/clarification`,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_hi18.HiOutlineChevronLeft,
                  {}
                ),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                  children: "\u8FD4\u56DE",
                }),
              ],
            }
          ),
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h2", {
          children: ["\u53CD\u9988 #", clarification.value.id],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("table", {
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tbody", {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u63D0\u4EA4\u8005",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      UserLink,
                      {
                        user: clarification.value.user,
                      }
                    ),
                  }),
                ],
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u521B\u5EFA\u65F6\u95F4",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                    children: formatDateTime(clarification.value.createdAt),
                  }),
                ],
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u72B6\u6001",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                    children: clarification.value.resolved
                      ? "\u5DF2\u89E3\u51B3"
                      : "\u672A\u89E3\u51B3",
                  }),
                ],
              }),
            ],
          }),
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("blockquote", {
          className: "break-words",
          children: clarification.value.content,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h3", {
          children: "\u56DE\u590D",
        }),
        clarification.value.replies.length === 0
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
              className: "italic opacity-60",
              children: "\u6682\u65E0\u56DE\u590D",
            })
          : clarification.value.replies.map((reply) =>
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                "p",
                {
                  className: "flex flex-col break-words",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: reply.content,
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "text-xs opacity-60",
                      children: formatRelativeDateTime(reply.createdAt),
                    }),
                  ],
                },
                reply.id
              )
            ),
        canReply.value
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
              import_jsx_runtime.Fragment,
              {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h3", {
                    children: "\u88C1\u5224\u64CD\u4F5C",
                  }),
                  clarification.value.resolved
                    ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
                        className: "alert alert-success",
                        children: "\u53CD\u9988\u5DF2\u7ECF\u89E3\u51B3",
                      })
                    : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                        import_jsx_runtime.Fragment,
                        {
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                              "div",
                              {
                                className: "flex justify-end gap-4",
                                children: [
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    import_react33.Form,
                                    {
                                      method: "post",
                                      className: "inline-block",
                                      children: /* @__PURE__ */ (0,
                                      import_jsx_runtime.jsx)("button", {
                                        className: "btn btn-primary",
                                        type: "submit",
                                        name: "_action",
                                        value: "Apply" /* Apply */,
                                        disabled: transition.isRunning,
                                        children:
                                          "\u8BA4\u9886\u7ED9\u81EA\u5DF1",
                                      }),
                                    }
                                  ),
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    import_react33.Form,
                                    {
                                      method: "post",
                                      className: "inline-block",
                                      children: /* @__PURE__ */ (0,
                                      import_jsx_runtime.jsx)("button", {
                                        className: "btn btn-success",
                                        type: "submit",
                                        name: "_action",
                                        value: "Resolve" /* Resolve */,
                                        disabled: transition.isRunning,
                                        children:
                                          "\u6807\u8BB0\u4E3A\u89E3\u51B3",
                                      }),
                                    }
                                  ),
                                ],
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                              import_react33.Form,
                              {
                                method: "post",
                                className: "form-control gap-4",
                                children: [
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                                    "div",
                                    {
                                      className: "form-control",
                                      children: [
                                        /* @__PURE__ */ (0,
                                        import_jsx_runtime.jsx)("label", {
                                          className: "label",
                                          children: /* @__PURE__ */ (0,
                                          import_jsx_runtime.jsx)("span", {
                                            className: "label-text",
                                            children:
                                              "\u56DE\u590D\u5185\u5BB9",
                                          }),
                                        }),
                                        /* @__PURE__ */ (0,
                                        import_jsx_runtime.jsx)("textarea", {
                                          className:
                                            "textarea textarea-bordered h-24",
                                          name: "content",
                                          required: !0,
                                        }),
                                      ],
                                    }
                                  ),
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    "div",
                                    {
                                      className: "flex justify-end",
                                      children: /* @__PURE__ */ (0,
                                      import_jsx_runtime.jsx)("button", {
                                        className: "btn btn-primary",
                                        type: "submit",
                                        name: "_action",
                                        value: "Reply" /* Reply */,
                                        disabled: transition.isRunning,
                                        children: "\u63D0\u4EA4\u56DE\u590D",
                                      }),
                                    }
                                  ),
                                ],
                              }
                            ),
                          ],
                        }
                      ),
                ],
              }
            )
          : !clarification.value.resolved &&
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "alert alert-info",
              children:
                "\u8BF7\u8010\u5FC3\u7B49\u5F85\u88C1\u5224\u56DE\u590D",
            }),
      ],
    }),
  });
}
async function action5({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    clarificationId = invariant(idScheme, params.clarificationId, {
      status: 404,
    }),
    self = await findRequestUser(request);
  await self
    .team(await findContestTeam(contestId))
    .contest(contestId)
    .checkPermission(Permissions.PERM_REPLY_CONTEST_CLARIFICATION);
  let form = await request.formData();
  switch (form.get("_action")) {
    case "Reply" /* Reply */: {
      let content3 = invariant(contentScheme, form.get("content")),
        clarification = await db.clarification.findUnique({
          where: { id: clarificationId },
          select: {
            id: !0,
            contestId: !0,
            userId: !0,
            rank: !0,
            content: !0,
            resolved: !0,
            applicantId: !0,
          },
        });
      if (!clarification)
        throw new Response("Clarification not found", { status: 404 });
      if (clarification.resolved)
        throw new Response("clarification already resolved", { status: 400 });
      clarification.applicantId ||
        (await db.clarification.update({
          where: { id: clarificationId },
          data: { applicantId: self.userId },
        }),
        clarificationAssignSubject.next(clarificationId));
      let reply = await db.clarificationReply.create({
        data: {
          clarificationId,
          replierId: self.userId,
          content: content3,
        },
        select: { id: !0 },
      });
      return clarificationReplySubject.next(reply.id), null;
    }
    case "Apply" /* Apply */: {
      let clarification = await db.clarification.findUnique({
        where: { id: clarificationId },
        select: { applicantId: !0 },
      });
      if (!clarification)
        throw new Response("Clarification not found", { status: 404 });
      if (clarification.applicantId)
        throw new Response("clarification already applied", { status: 400 });
      return (
        await db.clarification.update({
          where: { id: clarificationId },
          data: { applicantId: self.userId },
        }),
        clarificationAssignSubject.next(clarificationId),
        null
      );
    }
    case "Resolve" /* Resolve */: {
      let clarification = await db.clarification.findUnique({
        where: { id: clarificationId },
        select: {
          id: !0,
          contestId: !0,
          userId: !0,
          rank: !0,
          content: !0,
          resolved: !0,
        },
      });
      if (!clarification)
        throw new Response("Clarification not found", { status: 404 });
      if (clarification.resolved)
        throw new Response("clarification already resolved", { status: 400 });
      return (
        await db.clarification.update({
          where: { id: clarificationId },
          data: { resolved: !0 },
        }),
        clarificationResolveSubject.next(clarificationId),
        null
      );
    }
  }
}

// app/routes/contest/$contestId/clarification/events/resolve.tsx
var resolve_exports = {};
__export(resolve_exports, {
  loader: () => loader14,
});
var import_rxjs6 = require("rxjs");
var observer3 = clarificationResolveSubject.pipe(
  (0, import_rxjs6.mergeMap)((id) =>
    (0, import_rxjs6.from)(
      db.clarification.findUnique({
        where: { id },
        select: { id: !0, resolved: !0, contestId: !0, userId: !0 },
      })
    )
  ),
  (0, import_rxjs6.filter)(isNotNull)
);
async function loader14({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request);
  if (!self.userId) throw new Response("Unauthorized", { status: 401 });
  return createEventSource(
    request,
    observer3.pipe(
      (0, import_rxjs6.filter)(
        (message) =>
          message.contestId === contestId && message.userId === self.userId
      )
    )
  );
}

// app/routes/contest/$contestId/clarification/events/assign.tsx
var assign_exports = {};
__export(assign_exports, {
  loader: () => loader15,
});
var import_rxjs7 = require("rxjs");
var observer4 = clarificationAssignSubject.pipe(
  (0, import_rxjs7.mergeMap)((id) =>
    (0, import_rxjs7.from)(
      db.clarification.findUnique({
        where: { id },
        select: { id: !0, contestId: !0, userId: !0 },
      })
    )
  ),
  (0, import_rxjs7.filter)(isNotNull)
);
async function loader15({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request);
  if (!self.userId) throw new Response("Unauthorized", { status: 401 });
  return createEventSource(
    request,
    observer4.pipe(
      (0, import_rxjs7.filter)(
        (message) =>
          message.contestId === contestId && message.userId === self.userId
      )
    )
  );
}

// app/routes/contest/$contestId/clarification/events/reply.tsx
var reply_exports = {};
__export(reply_exports, {
  loader: () => loader16,
});
var import_rxjs8 = require("rxjs");
var observer5 = clarificationReplySubject.pipe(
  (0, import_rxjs8.mergeMap)((id) =>
    (0, import_rxjs8.from)(
      db.clarificationReply.findUnique({
        where: { id },
        select: {
          id: !0,
          content: !0,
          clarification: { select: { contestId: !0, userId: !0 } },
        },
      })
    )
  ),
  (0, import_rxjs8.filter)(isNotNull)
);
async function loader16({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request);
  if (!self.userId) throw new Response("Unauthorized", { status: 401 });
  return createEventSource(
    request,
    observer5.pipe(
      (0, import_rxjs8.filter)(
        (message) =>
          message.clarification.contestId === contestId &&
          message.clarification.userId === self.userId
      )
    )
  );
}

// app/routes/contest/$contestId/clarification/submit.tsx
var submit_exports = {};
__export(submit_exports, {
  action: () => action6,
  default: () => ClarificationSubmit,
  loader: () => loader17,
});
var import_node15 = require("@remix-run/node"),
  import_react34 = require("@remix-run/react"),
  import_hi19 = require("react-icons/hi"),
  import_node16 = require("@remix-run/node");
var import_signals_react19 = require("@preact/signals-react");
var import_react35 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader17({ params, request }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 });
  await (
    await findRequestUser(request)
  )
    .team(await findContestTeam(contestId))
    .contest(contestId)
    .checkPermission(Permissions.PERM_SUBMIT_CONTEST_CLARIFICATION);
  let problems = await db.contestProblem.findMany({
    where: { contestId },
    select: {
      rank: !0,
      problem: {
        select: {
          title: !0,
        },
      },
    },
  });
  return (0, import_node16.json)({
    problems,
  });
}
function ClarificationSubmit() {
  let loaderData = useSignalLoaderData(),
    problems = (0, import_signals_react19.useComputed)(
      () => loaderData.value.problems
    ),
    { contestId } = (0, import_react34.useParams)(),
    transition = useSignalTransition(),
    Toasts = useToasts();
  return (
    (0, import_react35.useEffect)(() => {
      transition.actionSuccess && Toasts.success("\u63D0\u4EA4\u6210\u529F");
    }, [transition.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Fullscreen, {
      visible: !0,
      className: "bg-base-100 flex flex-col items-center justify-start",
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "w-full max-w-2xl p-4",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
              import_react34.Link,
              {
                className: "btn btn-ghost gap-2",
                to: `/contest/${contestId}/clarification`,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    import_hi19.HiOutlineChevronLeft,
                    {}
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                    children: "\u8FD4\u56DE",
                  }),
                ],
              }
            ),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
            children: "\u63D0\u4EA4\u53CD\u9988",
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react34.Form, {
            method: "post",
            className: "form-control gap-4",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                className: "form-control w-full max-w-xs",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                    className: "label",
                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      "span",
                      {
                        className: "label-text",
                        children: "\u53CD\u9988\u9898\u76EE",
                      }
                    ),
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("select", {
                    className: "select select-bordered",
                    name: "rank",
                    defaultValue: "",
                    required: !0,
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                        value: "",
                        disabled: !0,
                        children: "\u8BF7\u9009\u62E9\u9898\u76EE",
                      }),
                      problems.value.map((p2) =>
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          "option",
                          {
                            value: p2.rank,
                            children: `${String.fromCharCode(64 + p2.rank)} - ${
                              p2.problem.title
                            }`,
                          },
                          p2.rank
                        )
                      ),
                    ],
                  }),
                ],
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                className: "form-control",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                    className: "label",
                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      "span",
                      {
                        className: "label-text",
                        children: "\u53CD\u9988\u5185\u5BB9",
                      }
                    ),
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("textarea", {
                    className: "textarea textarea-bordered h-24",
                    name: "content",
                    required: !0,
                  }),
                ],
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "form-control w-full max-w-xs",
                children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  "button",
                  {
                    className: "btn btn-primary",
                    type: "submit",
                    disabled: transition.isRunning,
                    children: "\u63D0\u4EA4",
                  }
                ),
              }),
            ],
          }),
        ],
      }),
    })
  );
}
async function action6({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request);
  await self
    .team(await findContestTeam(contestId))
    .contest(contestId)
    .checkPermission(Permissions.PERM_SUBMIT_CONTEST_CLARIFICATION);
  let form = await request.formData(),
    rank = invariant(idScheme, form.get("rank")),
    content3 = invariant(contentScheme, form.get("content")),
    clarification = await db.clarification.create({
      data: {
        contestId,
        userId: self.userId,
        content: content3,
        rank,
      },
      select: { id: !0 },
    });
  return (0, import_node15.redirect)(
    `/contest/${contestId}/clarification/${clarification.id}`
  );
}

// app/routes/contest/$contestId/clarification/index.tsx
var clarification_exports = {};
__export(clarification_exports, {
  default: () => ContestClarification,
  loader: () => loader18,
});
var import_node17 = require("@remix-run/node");
var import_react36 = require("@remix-run/react"),
  import_hi20 = require("react-icons/hi");
var import_signals_react20 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader18({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request),
    [canSubmit, canReply] = await self
      .team(await findContestTeam(contestId))
      .contest(contestId)
      .hasPermission(
        Permissions.PERM_SUBMIT_CONTEST_CLARIFICATION,
        Permissions.PERM_REPLY_CONTEST_CLARIFICATION
      ),
    problems = await db.contestProblem.findMany({
      where: { contestId },
      select: {
        rank: !0,
        problem: {
          select: {
            title: !0,
          },
        },
      },
    }),
    clarifications = await db.clarification.findMany({
      where: {
        contestId,
        userId: canReply ? void 0 : self.userId ?? void 0,
      },
      orderBy: { createdAt: "desc" },
      select: {
        id: !0,
        content: !0,
        user: { select: { ...selectUserData } },
        applicant: { select: { ...selectUserData } },
        rank: !0,
        resolved: !0,
        createdAt: !0,
        replies: {
          select: {
            id: !0,
            replier: {
              select: {
                username: !0,
              },
            },
            content: !0,
            createdAt: !0,
          },
        },
      },
    });
  return (0, import_node17.json)({
    canSubmit,
    clarifications,
    problems,
  });
}
function ContestClarification() {
  let loaderData = useSignalLoaderData(),
    canSubmit = (0, import_signals_react20.useComputed)(
      () => loaderData.value.canSubmit
    ),
    clarifications = (0, import_signals_react20.useComputed)(
      () => loaderData.value.clarifications
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u7528\u6237",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u53F7",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u5185\u5BB9",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u72B6\u6001",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u56DE\u590D",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u64CD\u4F5C",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children:
                clarifications.value.length === 0
                  ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tr", {
                      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                        "td",
                        {
                          colSpan: 5,
                          children: "\u6682\u65E0",
                        }
                      ),
                    })
                  : clarifications.value.map((clarification) =>
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                        "tr",
                        {
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                              children: /* @__PURE__ */ (0,
                              import_jsx_runtime.jsx)(UserLink, {
                                user: clarification.user,
                              }),
                            }),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                              children: String.fromCharCode(
                                clarification.rank + 64
                              ),
                            }),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                              children:
                                clarification.content.length > 20
                                  ? `${clarification.content.slice(0, 20)}...`
                                  : clarification.content,
                            }),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                              children: clarification.resolved
                                ? "\u5DF2\u89E3\u51B3"
                                : "\u672A\u89E3\u51B3",
                            }),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                              children: clarification.replies.length,
                            }),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                              children: /* @__PURE__ */ (0,
                              import_jsx_runtime.jsxs)(import_react36.Link, {
                                className:
                                  "link inline-flex items-center gap-2",
                                to: clarification.id.toString(),
                                children: [
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    "span",
                                    {
                                      children: "\u67E5\u770B\u8BE6\u60C5",
                                    }
                                  ),
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    import_hi20.HiOutlineArrowsExpand,
                                    {}
                                  ),
                                ],
                              }),
                            }),
                          ],
                        },
                        clarification.id
                      )
                    ),
            }),
          ],
        }),
        canSubmit.value &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
            className: "flex justify-end",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
              import_react36.Link,
              {
                className: "btn btn-primary gap-2",
                to: "submit",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    import_hi20.HiOutlinePlus,
                    {}
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                    children: "\u63D0\u4EA4",
                  }),
                ],
              }
            ),
          }),
      ],
    }
  );
}

// app/routes/contest/$contestId/problem/$rank.tsx
var rank_exports = {};
__export(rank_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action7,
  default: () => ContestProblemView,
  loader: () => loader19,
  meta: () => meta9,
});
var import_node18 = require("@remix-run/node"),
  import_react37 = require("@remix-run/react");
var import_react38 = require("react");
var import_ai7 = require("react-icons/ai"),
  import_hi21 = require("react-icons/hi");

// app/utils/server/judge/judge.server.ts
var import_rxjs9 = require("rxjs"),
  import_ws = __toESM(require("ws"));

// app/utils/server/judge/judge.types.ts
function timeSummary(subtasks) {
  return subtasks.reduce((sum, subtask) => {
    let tasktimes = subtask.tasks.reduce(
      (sum2, task) => sum2 + Math.max(task.time, 0),
      0
    );
    return sum + tasktimes;
  }, 0);
}
function memorySummary(subtasks) {
  return subtasks.reduce((max, subtask) => {
    let tasktimes = subtask.tasks.reduce(
      (max2, task) => Math.max(max2, task.memory),
      0
    );
    return Math.max(max, tasktimes);
  }, 0);
}

// app/utils/server/judge/judge.server.ts
var _subject,
  _ws,
  _dispatches,
  _workings,
  _send,
  send_fn,
  _mark,
  mark_fn,
  Judge = class {
    constructor(id, ip, port) {
      __privateAdd(this, _send);
      __privateAdd(this, _mark);
      __publicField(this, "id");
      __publicField(this, "url");
      __publicField(this, "status", {
        status: "Offline",
        cpus: 0,
        occupied: 0,
        queue: 0,
        langs: [],
        "ext-features": [],
      });
      __privateAdd(this, _subject, new import_rxjs9.Subject());
      __privateAdd(this, _ws, null);
      __privateAdd(this, _dispatches, /* @__PURE__ */ new Map());
      __privateAdd(this, _workings, /* @__PURE__ */ new Map());
      (this.id = id),
        (this.url = `ws://${ip}:${port}/`),
        __privateGet(this, _subject)
          .pipe((0, import_rxjs9.filter)((data2) => data2.type === "hello"))
          .subscribe((data2) => {
            var _a2;
            if (data2.version !== "v0") {
              (_a2 = __privateGet(this, _ws)) == null || _a2.terminate();
              return;
            }
            (this.status.status = "Online"),
              (this.status.cpus = data2.cpus),
              (this.status.langs = data2.langs),
              (this.status["ext-features"] = data2["ext-features"]);
          }),
        __privateGet(this, _subject)
          .pipe((0, import_rxjs9.filter)((data2) => data2.type === "status"))
          .subscribe((data2) => {
            (this.status.cpus = data2.cpus),
              (this.status.occupied = data2.occupied),
              (this.status.queue = data2.queue);
          }),
        __privateGet(this, _subject)
          .pipe(
            (0, import_rxjs9.filter)(
              (data2) => data2.type === "accept" || data2.type === "reject"
            )
          )
          .subscribe((data2) => {
            let callback = __privateGet(this, _dispatches).get(data2.id);
            !callback ||
              (__privateGet(this, _dispatches).delete(data2.id),
              clearTimeout(callback.timeout),
              data2.type === "accept"
                ? callback.resolve()
                : callback.reject(new Error("Remote rejected")));
          }),
        __privateGet(this, _subject)
          .pipe((0, import_rxjs9.filter)((data2) => data2.type === "sync"))
          .subscribe(async (data2) => {
            let buffer2 = await s3.readFile(`/file/${data2.uuid}`);
            __privateMethod(this, _send, send_fn).call(this, {
              type: "sync",
              uuid: data2.uuid,
              data: buffer2.toString("base64"),
            });
          }),
        __privateGet(this, _subject)
          .pipe(
            (0, import_rxjs9.filter)(
              (data2) => data2.type === "progress" || data2.type === "finish"
            )
          )
          .subscribe(async (data2) => {
            let callback = __privateGet(this, _workings).get(data2.id);
            if (!callback) return;
            let id2 = data2.id,
              status = data2.result.status,
              score = data2.result.score,
              message = data2.result.message,
              time = timeSummary(data2.result.subtasks),
              memory = memorySummary(data2.result.subtasks),
              subtasks = data2.result.subtasks;
            if (data2.type === "finish") {
              __privateGet(this, _workings).delete(data2.id),
                clearTimeout(callback.timeout),
                this.status.occupied--;
              let result = await db.record.update({
                where: { id: data2.id },
                data: { status, score, message, time, memory, subtasks },
                select: { id: !0 },
              });
              recordFinishSubject.next(result.id);
            }
            recordUpdateSubject.next({
              id: id2,
              status,
              score,
              message,
              time,
              memory,
              subtasks,
            });
          });
    }
    connect() {
      var _a2;
      (_a2 = __privateGet(this, _ws)) == null || _a2.close(),
        __privateSet(this, _ws, new import_ws.default(this.url)),
        (__privateGet(this, _ws).onopen = () =>
          (this.status.status = "Online")),
        (__privateGet(this, _ws).onclose = () =>
          (this.status.status = "Offline")),
        (__privateGet(this, _ws).onmessage = ({ data: data2 }) => {
          process.env.RUST_LOG === "debug" &&
            console.log(`[recieved] ${data2.toString()}`);
          try {
            __privateGet(this, _subject).next(JSON.parse(data2.toString()));
          } catch (e) {
            console.error(e);
          }
        }),
        (__privateGet(this, _ws).onerror = (error2) => {
          console.error(`[judge] ${error2.message}`);
        });
    }
    async dispatch(task) {
      await new Promise((resolve2, reject) => {
        let timeout2 = setTimeout(() => {
          __privateGet(this, _dispatches).delete(task.id) &&
            reject(new Error("Dispatch Timeout"));
        }, 5e3);
        __privateGet(this, _dispatches).set(task.id, {
          timeout: timeout2,
          resolve: resolve2,
          reject,
        }),
          __privateMethod(this, _send, send_fn).call(this, {
            type: "task",
            ...task,
          });
      });
      let timeout = setTimeout(() => {
        __privateGet(this, _workings).delete(task.id) &&
          (__privateMethod(this, _mark, mark_fn).call(
            this,
            task.id,
            "System Error",
            "[judge] judge timeout (60s)"
          ),
          this.status.occupied--);
      }, 6e4);
      __privateGet(this, _workings).set(task.id, { timeout }),
        this.status.occupied++,
        __privateMethod(this, _mark, mark_fn).call(
          this,
          task.id,
          "Judging",
          ""
        );
    }
  };
(_subject = new WeakMap()),
  (_ws = new WeakMap()),
  (_dispatches = new WeakMap()),
  (_workings = new WeakMap()),
  (_send = new WeakSet()),
  (send_fn = function (data2) {
    var _a2;
    ((_a2 = __privateGet(this, _ws)) == null ? void 0 : _a2.readyState) ===
      import_ws.default.OPEN && this.status.status === "Online"
      ? (process.env.RUST_LOG === "debug" &&
          console.log(`[send] ${JSON.stringify(data2)}`),
        __privateGet(this, _ws).send(JSON.stringify(data2)))
      : console.warn("Trying to send message to offline judge");
  }),
  (_mark = new WeakSet()),
  (mark_fn = async function (id, status, reason) {
    let result = await db.record.update({
      where: { id },
      data: {
        status,
        score: 0,
        message: reason,
        time: -1,
        memory: -1,
        subtasks: [],
      },
      select: {
        id: !0,
        status: !0,
        score: !0,
        message: !0,
        time: !0,
        memory: !0,
        subtasks: !0,
      },
    });
    recordUpdateSubject.next(result);
  });

// app/utils/server/judge/manager.server.ts
var _judges,
  _queue,
  _dispatch,
  dispatch_fn,
  JudgeManager = class {
    constructor() {
      __privateAdd(this, _dispatch);
      __privateAdd(this, _judges, []);
      __privateAdd(this, _queue, []);
      this.initializeJudge(),
        setInterval(() => {
          __privateMethod(this, _dispatch, dispatch_fn).call(this);
        }, 3e3);
    }
    async initializeJudge() {
      console.log("Loading judges from Database");
      let judges = await db.judge.findMany({
        select: { id: !0, ip: !0, port: !0 },
      });
      for (let { id, ip, port } of judges) {
        let judge2 = new Judge(id, ip, port);
        __privateGet(this, _judges).push(judge2),
          console.log(`Connecting to ws://${ip}:${port}/`),
          judge2.connect();
      }
      let records = await db.record.findMany({
        where: { status: "Pending" },
        orderBy: { id: "desc" },
        select: { id: !0 },
      });
      console.log(`Rejudge ${records.length} tasks`);
      for (let record of records) await this.push(record.id);
    }
    getState() {
      return __privateGet(this, _judges).map((judge2) => ({
        id: judge2.id,
        state: judge2.status,
      }));
    }
    async push(id) {
      let record = await db.record.findUnique({
        where: { id },
        select: {
          language: !0,
          problem: { select: { data: { select: { id: !0, filename: !0 } } } },
        },
      });
      if (!record) throw new Error("Record not found");
      let code3 = (await s3.readFile(`/record/${id}`)).toString("utf-8");
      __privateGet(this, _queue).push({
        id,
        code: code3,
        language: record.language,
        files: record.problem.data.reduce(
          (files, { filename, id: id2 }) => ({
            ...files,
            [filename]: id2,
          }),
          {}
        ),
      });
    }
  };
(_judges = new WeakMap()),
  (_queue = new WeakMap()),
  (_dispatch = new WeakSet()),
  (dispatch_fn = async function () {
    let queue = [];
    for (; __privateGet(this, _queue).length > 0; )
      queue.push(__privateGet(this, _queue).shift());
    for (let mission of queue) {
      let judges = __privateGet(this, _judges).filter((judge2) =>
          judge2.status.langs.includes(mission.language)
        ),
        dispatched = !1;
      for (let judge2 of judges)
        if (
          !(
            judge2.status.status === "Offline" ||
            judge2.status.occupied >= judge2.status.cpus
          )
        )
          try {
            await judge2.dispatch(mission), (dispatched = !0);
            break;
          } catch {}
      dispatched || __privateGet(this, _queue).push(mission);
    }
  });
var judge;
judge = new JudgeManager();

// app/routes/contest/$contestId/problem/$rank.tsx
var import_signals_react21 = require("@preact/signals-react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader19({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    rank = invariant(problemRankScheme, params.rank, { status: 404 }),
    self = await findRequestUser(request),
    status = await findContestStatus(contestId);
  await self
    .team(await findContestTeam(contestId))
    .contest(contestId)
    .checkPermission(
      status === "Pending"
        ? Permissions.PERM_VIEW_CONTEST_PROBLEMS_BEFORE
        : status === "Running"
        ? Permissions.PERM_VIEW_CONTEST_PROBLEMS_DURING
        : Permissions.PERM_VIEW_CONTEST_PROBLEMS_AFTER
    );
  let problem = await db.contestProblem.findUnique({
    where: {
      contestId_rank: {
        contestId,
        rank,
      },
    },
    select: {
      problem: {
        select: {
          id: !0,
          title: !0,
          description: !0,
          timeLimit: !0,
          memoryLimit: !0,
          files: {
            select: {
              id: !0,
              filename: !0,
            },
          },
        },
      },
      contest: {
        select: {
          id: !0,
          beginTime: !0,
          endTime: !0,
        },
      },
    },
  });
  if (!problem) throw new Response("Problem not found", { status: 404 });
  let records = self.userId
    ? await db.record.findMany({
        where: {
          contestId,
          problemId: problem.problem.id,
          submitterId: self.userId,
        },
        orderBy: {
          submittedAt: "desc",
        },
        select: {
          id: !0,
          score: !0,
          status: !0,
          time: !0,
          memory: !0,
        },
      })
    : [];
  return (0, import_node18.json)({
    records,
    problem: problem.problem,
    contest: problem.contest,
  });
}
var meta9 = ({ data: data2, params }) => ({
  title: `${params.rank} - ${
    data2 == null ? void 0 : data2.problem.title
  } - HITwh OJ`,
});
async function action7({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    rank = invariant(problemRankScheme, params.rank, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE);
  let status = await findContestStatus(contestId);
  await self
    .team(await findContestTeam(contestId))
    .contest(contestId)
    .checkPermission(
      status === "Pending"
        ? Permissions.PERM_VIEW_CONTEST_PROBLEMS_BEFORE
        : status === "Running"
        ? Permissions.PERM_VIEW_CONTEST_PROBLEMS_DURING
        : Permissions.PERM_VIEW_CONTEST_PROBLEMS_AFTER
    );
  let problemId = await findContestProblemIdByRank(contestId, rank),
    form = await request.formData(),
    code3 = invariant(codeScheme, form.get("code")),
    language2 = invariant(languageScheme, form.get("language")),
    record = await db.record.create({
      data: {
        language: language2,
        problemId,
        contestId,
        submitterId: self.userId,
      },
      select: {
        id: !0,
        status: !0,
        message: !0,
        time: !0,
        memory: !0,
        score: !0,
        subtasks: !0,
      },
    });
  return (
    await s3.writeFile(`/record/${record.id}`, Buffer.from(code3)),
    judge.push(record.id),
    recordUpdateSubject.next(record),
    null
  );
}
function ContestProblemView() {
  let loaderData = useSignalLoaderData(),
    problem = (0, import_signals_react21.useComputed)(
      () => loaderData.value.problem
    ),
    contest = (0, import_signals_react21.useComputed)(
      () => loaderData.value.contest
    ),
    records = useSynchronized(() => loaderData.value.records),
    { contestId, rank } = (0, import_react37.useParams)(),
    transition = useSignalTransition(),
    visible = (0, import_signals_react21.useSignal)(!1),
    Toasts = useToasts();
  (0, import_react38.useEffect)(() => {
    transition.actionSuccess &&
      (Toasts.success("\u63D0\u4EA4\u6210\u529F"), (visible.value = !0));
  }, [transition.actionSuccess]);
  let language2 = (0, import_signals_react21.useSignal)("cpp"),
    code3 = (0, import_signals_react21.useSignal)(
      `#include <bits/stdc++.h>
using namespace std;

int main() {
  int a, b;
  cin >> a >> b;
  cout << a + b << endl;
  return 0;
}
`
    );
  (0, import_react38.useEffect)(() => {
    let storedLang = localStorage.getItem(`C#${contestId}#${rank}#language`);
    storedLang && (language2.value = storedLang);
    let storedCode = localStorage.getItem(`C#${contestId}#${rank}#code`);
    storedCode && (code3.value = storedCode);
  }, []),
    (0, import_react37.useBeforeUnload)(
      (0, import_react38.useCallback)(() => {
        localStorage.setItem(
          `C#${contestId}#${rank}#language`,
          language2.value
        ),
          localStorage.setItem(`C#${contestId}#${rank}#code`, code3.value);
      }, [language2.value, code3.value])
    );
  let status = (0, import_signals_react21.useComputed)(() => {
      let now = new Date();
      return {
        isNotStarted: now < new Date(contest.value.beginTime),
        isEnded: now > new Date(contest.value.endTime),
      };
    }),
    pending = (0, import_signals_react21.useComputed)(() =>
      records.value
        .filter(
          (record) =>
            record.status === "Pending" ||
            record.status === "Compiling" ||
            record.status === "Judging" ||
            record.status === "Running"
        )
        .map(({ id }) => id)
    );
  return (
    (0, import_react38.useEffect)(() => {
      let subscriptions = pending.value.map((id) =>
        fromEventSource(`/record/${id}/events`).subscribe((message) => {
          let found = records.value.find((record) => record.id === message.id);
          found &&
            ((found.time = message.time),
            (found.score = message.score),
            (found.memory = message.memory),
            (found.status = message.status)),
            (records.value = [...records.value]);
        })
      );
      return () => {
        subscriptions.forEach((subscription) => subscription.unsubscribe());
      };
    }, [pending.value.join(" ")]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Fullscreen, {
      visible: !0,
      className: "drawer drawer-end bg-base-100 h-full w-full",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
          type: "checkbox",
          id: "records",
          className: "drawer-toggle",
          checked: visible.value,
          readOnly: !0,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "drawer-content grid grid-cols-2 grid-rows-1",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "flex flex-col overflow-y-auto",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("nav", {
                  className: "bg-base-100 sticky top-0 z-10 flex-shrink-0 p-4",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                    import_react37.Link,
                    {
                      className: "btn btn-ghost gap-2",
                      to: `/contest/${contest.value.id}/problem`,
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          import_hi21.HiOutlineChevronLeft,
                          {
                            className: "",
                          }
                        ),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                          children: "\u8FD4\u56DE\u9898\u76EE\u5217\u8868",
                        }),
                      ],
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("article", {
                  className: "p-4",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h1", {
                      children: [rank, " - ", problem.value.title],
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
                      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                        RecordTimeMemory,
                        {
                          time: problem.value.timeLimit,
                          memory: problem.value.memoryLimit,
                        }
                      ),
                    }),
                    status.value.isNotStarted &&
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
                        className: "alert alert-warning shadow-lg",
                        children: "\u6BD4\u8D5B\u8FD8\u6CA1\u6709\u5F00\u59CB",
                      }),
                    status.value.isEnded &&
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
                        className: "alert alert-warning shadow-lg",
                        children:
                          "\u6BD4\u8D5B\u5DF2\u7ECF\u7ED3\u675F\uFF0C\u672C\u9875\u9762\u4EC5\u4F9B\u67E5\u770B",
                      }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Markdown, {
                      children: problem.value.description,
                    }),
                    problem.value.files.length > 0 &&
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                        import_jsx_runtime.Fragment,
                        {
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                              children:
                                "\u53EF\u4F9B\u4E0B\u8F7D\u7684\u6587\u4EF6",
                            }),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ol", {
                              children: problem.value.files.map((file) =>
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "li",
                                  {
                                    children: /* @__PURE__ */ (0,
                                    import_jsx_runtime.jsx)(
                                      import_react37.Link,
                                      {
                                        to: `/file/${file.id}`,
                                        target: "_blank",
                                        children: file.filename,
                                      }
                                    ),
                                  },
                                  file.id
                                )
                              ),
                            }),
                          ],
                        }
                      ),
                  ],
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "flex flex-col",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(VscodeEditor, {
                  code: code3,
                  language: language2.value,
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  import_react37.Form,
                  {
                    method: "post",
                    className: "flex flex-shrink-0 justify-between p-2",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("textarea", {
                        name: "code",
                        hidden: !0,
                        value: code3.value,
                        readOnly: !0,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                          "select",
                          {
                            className: "select select-bordered",
                            name: "language",
                            value: language2.value,
                            onChange: (event) =>
                              (language2.value = event.currentTarget.value),
                            disabled: transition.isRunning,
                            children: [
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "option",
                                {
                                  value: "c",
                                  children: "C",
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "option",
                                {
                                  value: "cpp",
                                  children: "C++",
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "option",
                                {
                                  value: "java",
                                  children: "Java",
                                }
                              ),
                            ],
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                        className: "inline-flex gap-4",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                            "button",
                            {
                              className: "btn btn-ghost gap-2",
                              type: "button",
                              onClick: () => (visible.value = !0),
                              children: [
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  import_ai7.AiOutlineHistory,
                                  {}
                                ),
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "span",
                                  {
                                    children:
                                      "\u67E5\u770B\u63D0\u4EA4\u8BB0\u5F55",
                                  }
                                ),
                              ],
                            }
                          ),
                          !status.value.isNotStarted && !status.value.isEnded
                            ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                                "button",
                                {
                                  className: "btn btn-primary gap-2",
                                  type: "submit",
                                  disabled: transition.isRunning,
                                  children: [
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      import_hi21.HiOutlinePaperAirplane,
                                      {
                                        className: "rotate-90",
                                      }
                                    ),
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      "span",
                                      {
                                        children: "\u63D0\u4EA4",
                                      }
                                    ),
                                  ],
                                }
                              )
                            : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                import_react37.Link,
                                {
                                  className: "btn btn-primary",
                                  to: `/problem/${problem.value.id}`,
                                  children:
                                    "\u8DF3\u8F6C\u5230\u9898\u76EE\u9875\u9762",
                                }
                              ),
                        ],
                      }),
                    ],
                  }
                ),
              ],
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "drawer-side",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "drawer-overlay",
              onClick: () => (visible.value = !1),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("aside", {
              className: "not-prose bg-base-200 p-4",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h3", {
                  className: "text-lg font-bold",
                  children: "\u63D0\u4EA4\u8BB0\u5F55",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ul", {
                  className: "menu menu-compact my-4 w-96",
                  children: records.value.map((record) =>
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      "li",
                      {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          import_react37.Link,
                          {
                            to: `/record/${record.id}`,
                            className: "block p-4",
                            target: "_blank",
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsx)(RecordStatus, {
                              status: record.status,
                            }),
                          }
                        ),
                      },
                      record.id
                    )
                  ),
                }),
              ],
            }),
          ],
        }),
      ],
    })
  );
}

// app/routes/contest/$contestId/problem/index.tsx
var problem_exports2 = {};
__export(problem_exports2, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ContestProblemIndex,
  loader: () => loader20,
});
var import_node19 = require("@remix-run/node"),
  import_react39 = require("@remix-run/react");
var import_hi22 = require("react-icons/hi"),
  import_react40 = require("react"),
  import_signals_react22 = require("@preact/signals-react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader20({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request),
    status = await findContestStatus(contestId),
    [hasViewProblemPerm, isContestants] = await self
      .team(await findContestTeam(contestId))
      .contest(contestId)
      .hasPermission(
        status === "Pending"
          ? Permissions.PERM_VIEW_CONTEST_PROBLEMS_BEFORE
          : status === "Running"
          ? Permissions.PERM_VIEW_CONTEST_PROBLEMS_DURING
          : Permissions.PERM_VIEW_CONTEST_PROBLEMS_AFTER,
        ContestPermission.Contestants
      );
  if (isContestants && status === "Pending") {
    let contest = await db.contest.findUnique({
      where: { id: contestId },
      select: {
        beginTime: !0,
        endTime: !0,
      },
    });
    if (!contest) throw new Response("Contest not found", { status: 404 });
    return (0, import_node19.json)({ countdown: !0, contest });
  }
  if (hasViewProblemPerm) {
    let contest = await db.contest.findUnique({
      where: { id: contestId },
      select: {
        beginTime: !0,
        endTime: !0,
        problems: {
          orderBy: { rank: "asc" },
          select: {
            rank: !0,
            problem: {
              select: {
                title: !0,
                relatedRecords: {
                  where: { contestId, submitterId: self.userId ?? -1 },
                  select: { status: !0 },
                },
              },
            },
          },
        },
      },
    });
    if (!contest) throw new Response("Contest not found", { status: 404 });
    return (0, import_node19.json)({ countdown: !1, contest });
  } else throw new Response("Permission Denied", { status: 403 });
}
function Countdown(props) {
  let now = (0, import_signals_react22.useSignal)(new Date());
  (0, import_react40.useEffect)(() => {
    let interval2 = setInterval(() => (now.value = new Date()), 1e3);
    return () => clearInterval(interval2);
  }, []);
  let time = (0, import_signals_react22.useComputed)(() => {
    let time2 = props.date.getTime() - now.value.getTime(),
      day = Math.floor(time2 / 1e3 / 60 / 60 / 24),
      hour = Math.floor(time2 / 1e3 / 60 / 60) % 24,
      minute = Math.floor(time2 / 1e3 / 60) % 60,
      second = Math.floor(time2 / 1e3) % 60,
      finished = time2 < 0;
    return { day, hour, minute, second, finished };
  });
  return (
    (0, import_signals_react22.useSignalEffect)(() => {
      time.value.finished && props.onFinish();
    }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
      className: "flex gap-5",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "countdown font-mono text-4xl",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                style: { "--value": time.value.day },
              }),
            }),
            "days",
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "countdown font-mono text-4xl",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                style: { "--value": time.value.hour },
              }),
            }),
            "hours",
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "countdown font-mono text-4xl",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                style: { "--value": time.value.minute },
              }),
            }),
            "min",
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "countdown font-mono text-4xl",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                style: { "--value": time.value.second },
              }),
            }),
            "sec",
          ],
        }),
      ],
    })
  );
}
function ContestProblemIndex() {
  let loaderData = useSignalLoaderData(),
    navigate = (0, import_react39.useNavigate)();
  return loaderData.value.countdown
    ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "mx-auto w-full max-w-sm text-center",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
            children: "\u8DDD\u79BB\u6BD4\u8D5B\u5F00\u59CB\u8FD8\u6709",
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Countdown, {
            date: new Date(loaderData.value.contest.beginTime),
            onFinish: () => navigate("."),
          }),
        ],
      })
    : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
        className: "not-prose table w-full",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                  className: "w-16",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                  children: "\u9898\u76EE",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                  children: "\u72B6\u6001",
                }),
              ],
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
            children: loaderData.value.contest.problems.map(
              ({ rank, problem }) => {
                let charCode = String.fromCharCode(64 + rank),
                  accepted = problem.relatedRecords.some(
                    ({ status }) => status === "Accepted"
                  ),
                  failed = problem.relatedRecords.length > 0 && !accepted;
                return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: charCode,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                          import_react39.Link,
                          {
                            className: "link inline-flex items-center gap-2",
                            to: charCode,
                            children: [
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "span",
                                {
                                  children: problem.title,
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                import_hi22.HiOutlineArrowsExpand,
                                {}
                              ),
                            ],
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("td", {
                        children: [
                          accepted &&
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                              import_hi22.HiOutlineCheck,
                              {
                                className: "text-success h-6 w-6",
                              }
                            ),
                          failed &&
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                              import_hi22.HiOutlineX,
                              {
                                className: "text-error h-6 w-6",
                              }
                            ),
                        ],
                      }),
                    ],
                  },
                  rank
                );
              }
            ),
          }),
        ],
      });
}

// app/routes/contest/$contestId/board/events.tsx
var events_exports3 = {};
__export(events_exports3, {
  loader: () => loader21,
});
var import_rxjs10 = require("rxjs");
var observable = recordFinishSubject.pipe(
  (0, import_rxjs10.mergeMap)((id) =>
    (0, import_rxjs10.from)(
      db.record.findUnique({
        where: { id },
        select: {
          id: !0,
          status: !0,
          submittedAt: !0,
          problemId: !0,
          submitter: { select: { ...selectUserData } },
          contestId: !0,
        },
      })
    )
  ),
  (0, import_rxjs10.filter)(isNotNull)
);
function loader21({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 });
  return createEventSource(
    request,
    observable.pipe(
      (0, import_rxjs10.filter)((record) => record.contestId === contestId)
    )
  );
}

// app/routes/contest/$contestId/board/index.tsx
var board_exports = {};
__export(board_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => RankView,
  loader: () => loader22,
});
var import_node20 = require("@remix-run/node");
var import_react41 = require("react");
var import_hi23 = require("react-icons/hi"),
  import_signals_react23 = require("@preact/signals-react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader22({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request),
    [canExport] = await self
      .team(await findContestTeam(contestId))
      .contest(contestId)
      .hasPermission(Permissions.PERM_EXPORT_CONTEST_BOARD),
    contest = await db.contest.findUnique({
      where: { id: contestId },
      select: {
        id: !0,
        title: !0,
        beginTime: !0,
        problems: {
          orderBy: { rank: "asc" },
          select: { problemId: !0, rank: !0 },
        },
        relatedRecords: {
          orderBy: { submittedAt: "asc" },
          select: {
            status: !0,
            submittedAt: !0,
            problemId: !0,
            submitter: { select: { ...selectUserData } },
          },
        },
      },
    });
  if (!contest) throw new Response("Contest not found", { status: 404 });
  return (0, import_node20.json)({ canExport, contest });
}
function RankView() {
  let loaderData = useSignalLoaderData(),
    canExport = (0, import_signals_react23.useComputed)(
      () => loaderData.value.canExport
    ),
    contest = (0, import_signals_react23.useComputed)(
      () => loaderData.value.contest
    ),
    records = useSynchronized(() => contest.value.relatedRecords);
  (0, import_signals_react23.useSignalEffect)(() => {
    let subscription = fromEventSource(
      `/contest/${contest.value.id}/board/events`
    ).subscribe((record) => {
      records.value = [...records.value, record];
    });
    return () => subscription.unsubscribe();
  });
  let users = (0, import_signals_react23.useComputed)(() => {
      let contestants = /* @__PURE__ */ new Map(),
        userMap = /* @__PURE__ */ new Map(),
        beginTime = new Date(contest.value.beginTime).getTime();
      for (let record of records.value) {
        let submittedAt = new Date(record.submittedAt).getTime(),
          penalty = Math.floor((submittedAt - beginTime) / 6e4);
        userMap.has(record.submitter.id) ||
          (userMap.set(record.submitter.id, /* @__PURE__ */ new Map()),
          contestants.set(record.submitter.id, record.submitter));
        let user = userMap.get(record.submitter.id);
        user.has(record.problemId) ||
          user.set(record.problemId, { count: 0, solved: !1, penalty: 0 });
        let problem = user.get(record.problemId);
        problem.solved ||
          (problem.count++,
          problem.solved || (problem.solved = record.status === "Accepted"),
          (problem.penalty = penalty)),
          user.set(record.problemId, problem);
      }
      for (let user of userMap.values())
        for (let problem of user.values())
          problem.solved && (problem.penalty += (problem.count - 1) * 20);
      return [...userMap.keys()]
        .map((id) => ({
          submitter: contestants.get(id),
          solved: [...userMap.get(id).values()].filter((p2) => p2.solved)
            .length,
          penalty: [...userMap.get(id).values()]
            .filter((p2) => p2.solved)
            .reduce((acc, p2) => acc + p2.penalty, 0),
          problems: userMap.get(id),
        }))
        .sort((a, b) =>
          a.solved !== b.solved
            ? b.solved - a.solved
            : a.penalty !== b.penalty
            ? a.penalty - b.penalty
            : a.submitter.id - b.submitter.id
        )
        .map((user, index2) => ({ ...user, rank: index2 + 1 }))
        .map((user, index2, array) => {
          if (!index2) return user;
          let prev = array[index2 - 1];
          return (
            prev.solved === user.solved &&
              prev.penalty === user.penalty &&
              (user.rank = prev.rank),
            user
          );
        });
    }),
    exportData = (0, import_react41.useCallback)(() => {
      let data2 = users.value.map((user) => {
          let problems = contest.value.problems.map((problem) => {
            let p2 = user.problems.get(problem.problemId);
            return p2
              ? p2.solved
                ? `+${p2.count}/${p2.penalty}	`
                : `-${p2.count}	`
              : "-";
          });
          return [
            user.rank,
            user.submitter.nickname,
            user.submitter.username,
            user.submitter.studentId,
            user.solved,
            user.penalty,
            ...problems,
          ];
        }),
        csv =
          "\uFEFF\u6392\u540D,\u9009\u624B,\u7528\u6237\u540D,\u5B66\u53F7,\u89E3\u9898\u6570,\u603B\u7F5A\u65F6," +
          contest.value.problems
            .map((p2) => String.fromCharCode(64 + p2.rank))
            .join(",") +
          `
`;
      csv += data2.map((row2) => row2.join(",")).join(`
`);
      let blob = new Blob([csv], { type: "text/csv,charset=utf-8" }),
        url = URL.createObjectURL(blob),
        a = document.createElement("a");
      (a.href = url),
        (a.download = `${contest.value.title}_${new Date()
          .toLocaleString()
          .replace(/:/g, "-")
          .replace(/\//g, "-")
          .replace(/ /g, "_")}_rank.csv`),
        a.click(),
        URL.revokeObjectURL(url);
    }, [users.value]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        canExport &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
            className: "flex w-full items-center justify-end",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
              className: "btn btn-primary btn-sm gap-2 font-normal",
              onClick: exportData,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_hi23.HiOutlineSave,
                  {}
                ),
                "\u5BFC\u51FAcsv",
              ],
            }),
          }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16 text-center",
                    children: "\u6392\u540D",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9009\u624B",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16 text-center",
                    children: "\u89E3\u9898\u6570",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16 text-center",
                    children: "\u603B\u7F5A\u65F6",
                  }),
                  contest.value.problems.map((problem) =>
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      "th",
                      {
                        className: "w-16 text-center",
                        children: String.fromCharCode(64 + problem.rank),
                      },
                      problem.problemId
                    )
                  ),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: users.value.map((user) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: user.rank,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          UserLink,
                          {
                            user: user.submitter,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        className: "text-center",
                        children: user.solved,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        className: "text-center",
                        children: user.penalty,
                      }),
                      contest.value.problems.map(({ problemId }) => {
                        let problem = user.problems.get(problemId);
                        return problem
                          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                              "td",
                              {
                                className: problem.solved
                                  ? "bg-success text-success-content text-center"
                                  : "bg-error text-error-content text-center",
                                children: problem.solved
                                  ? `+${problem.count}/${problem.penalty}`
                                  : `-${problem.count}`,
                              },
                              problemId
                            )
                          : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                              "td",
                              {
                                className: "text-center",
                                children: "-",
                              },
                              problemId
                            );
                      }),
                    ],
                  },
                  user.submitter.id
                )
              ),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/contest/$contestId/register.tsx
var register_exports = {};
__export(register_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action8,
  default: () => ContestRegisteration,
  loader: () => loader23,
});
var import_signals_react24 = require("@preact/signals-react"),
  import_client3 = require("@prisma/client"),
  import_node21 = require("@remix-run/node"),
  import_node22 = require("@remix-run/node"),
  import_react42 = require("@remix-run/react"),
  import_react43 = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader23({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request);
  if (
    (await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await findContestParticipantRole(contestId, self.userId))
  )
    throw new Response("You have already registered in this contest.", {
      status: 400,
    });
  let contest = await db.contest.findUnique({
    where: { id: contestId },
    select: {
      private: !0,
      registrationType: !0,
    },
  });
  if (!contest) throw new Response("Contest not found", { status: 404 });
  if (contest.private || contest.registrationType === "Disallow")
    throw new Response("Registration is not allowed", { status: 403 });
  return (0, import_node21.json)({ contest });
}
async function action8({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request);
  return (
    await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await db.$transaction(async (db2) => {
      if (await findContestParticipantRole(contestId, self.userId))
        throw new Response("You have already registered.", { status: 400 });
      let status = await findContestStatus(contestId),
        contest = await db2.contest.findUnique({
          where: { id: contestId },
          select: {
            private: !0,
            registrationType: !0,
            registrationPassword: !0,
            allowJoinAfterStart: !0,
          },
        });
      if (!contest) throw new Response("Contest not found.", { status: 404 });
      if (
        status !== "Pending" &&
        !(status === "Running" && contest.allowJoinAfterStart)
      )
        throw new Response("Registration closed", { status: 403 });
      if (contest.registrationType === "Disallow")
        throw new Response("Registration is not allowed", { status: 403 });
      if (contest.registrationType === "Password") {
        let form = await request.formData();
        if (
          invariant(weakPasswordScheme, form.get("password")) !==
          contest.registrationPassword
        )
          throw new Response("Password incorrect", { status: 403 });
      }
      await db2.contestParticipant.create({
        data: {
          contestId,
          userId: self.userId,
          role: import_client3.ContestParticipantRole.Contestant,
        },
      });
    }),
    (0, import_node22.redirect)(`/contest/${contestId}/problem`)
  );
}
function ContestRegisteration() {
  let loaderData = useSignalLoaderData(),
    contest = (0, import_signals_react24.useComputed)(
      () => loaderData.value.contest
    ),
    transition = useSignalTransition(),
    Toasts = useToasts();
  return (
    (0, import_react43.useEffect)(() => {
      transition.actionSuccess && Toasts.success("\u62A5\u540D\u6210\u529F");
    }, [transition.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
          children: "\u62A5\u540D\u6BD4\u8D5B",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
          children:
            "\u8BF7\u6CE8\u610F\u8BDA\u4FE1\u53C2\u8D5B\uFF0C\u4E0D\u8981\u4F7F\u7528\u4EFB\u4F55\u5916\u6302\u3001\u4F5C\u5F0A\u5DE5\u5177\u53C2\u8D5B\u3002",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react42.Form, {
          method: "post",
          className: "flex gap-4",
          children: [
            contest.value.registrationType === "Password" &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                className: "input input-bordered",
                placeholder: "\u5BC6\u7801",
                name: "password",
                disabled: transition.isRunning,
                required: !0,
              }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
              className: "btn btn-primary",
              type: "submit",
              disabled: transition.isRunning,
              children: "\u540C\u610F\u5E76\u62A5\u540D",
            }),
          ],
        }),
      ],
    })
  );
}

// app/routes/contest/$contestId/members.tsx
var members_exports = {};
__export(members_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action9,
  default: () => ContestMembers,
  loader: () => loader24,
});
var import_node23 = require("@remix-run/node");
var import_client4 = require("@prisma/client"),
  import_hi24 = require("react-icons/hi");
var import_signals_react25 = require("@preact/signals-react");
var import_react44 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader24({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(await findContestTeam(contestId))
      .contest(contestId)
      .checkPermission(Permissions.PERM_EDIT_CONTEST);
  let members = await db.contestParticipant.findMany({
    where: {
      contestId,
    },
    select: {
      user: { select: selectUserData },
      role: !0,
    },
  });
  return (0, import_node23.json)({ members });
}
async function action9({ params, request }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(await findContestTeam(contestId))
      .contest(contestId)
      .checkPermission(Permissions.PERM_EDIT_CONTEST);
  let form = await request.formData(),
    _action = form.get("_action"),
    userId = invariant(idScheme, form.get("member"));
  switch (_action) {
    case "DeleteMember" /* DeleteMember */:
      return (
        await db.contestParticipant.delete({
          where: {
            contestId_userId: {
              contestId,
              userId,
            },
          },
        }),
        null
      );
    case "ChangeRole" /* ChangeRole */: {
      let role = invariant(contestParticipantRoleScheme, form.get("role"));
      return (
        await db.contestParticipant.update({
          where: {
            contestId_userId: {
              contestId,
              userId,
            },
          },
          data: {
            role,
          },
        }),
        null
      );
    }
  }
}
function DeleteMember({ id }) {
  let fetcher = useSignalFetcher(),
    Toasts = useToasts();
  return (
    (0, import_react44.useEffect)(() => {
      fetcher.actionSuccess && Toasts.success("\u8E22\u51FA\u6210\u529F");
    }, [fetcher.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(fetcher.Form, {
      method: "post",
      className: "tooltip tooltip-error",
      "data-tip": "\u8E22\u51FA\u56E2\u961F",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
          type: "hidden",
          name: "member",
          value: id,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
          type: "submit",
          name: "_action",
          value: "DeleteMember" /* DeleteMember */,
          disabled: fetcher.isRunning,
          className: "btn btn-square btn-error btn-sm",
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_hi24.HiOutlineLogout,
            {}
          ),
        }),
      ],
    })
  );
}
function SetMemberRole({ id, role }) {
  let fetcher = useSignalFetcher(),
    Toasts = useToasts();
  (0, import_react44.useEffect)(() => {
    fetcher.actionSuccess &&
      Toasts.success("\u8BBE\u5B9A\u6210\u5458\u89D2\u8272\u6210\u529F");
  }, [fetcher.actionSuccess]);
  let isJury = role === import_client4.ContestParticipantRole.Jury,
    isMember = role === import_client4.ContestParticipantRole.Contestant;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(fetcher.Form, {
    method: "post",
    className: "dropdown dropdown-hover",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
        type: "hidden",
        name: "member",
        value: id,
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
        type: "hidden",
        name: "_action",
        value: "ChangeRole" /* ChangeRole */,
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
        className: "btn btn-square btn-sm",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi24.HiOutlineCog,
          {}
        ),
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("ul", {
        className:
          "dropdown-content menu rounded-box bg-base-300 w-72 p-2 shadow-2xl",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
            className: isJury ? "disabled" : "",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
              type: "submit",
              name: "role",
              value: import_client4.ContestParticipantRole.Jury,
              disabled: isJury || fetcher.isRunning,
              children: "\u8BBE\u7F6E\u4E3A\u88C1\u5224",
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
            className: isMember ? "disabled" : "",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
              type: "submit",
              name: "role",
              value: import_client4.ContestParticipantRole.Contestant,
              disabled: isMember || fetcher.isRunning,
              children: "\u8BBE\u7F6E\u4E3A\u666E\u901A\u6210\u5458",
            }),
          }),
        ],
      }),
    ],
  });
}
function ContestMembers() {
  let loaderData = useSignalLoaderData(),
    members = (0, import_signals_react25.useComputed)(
      () => loaderData.value.members
    ),
    sortMembers = (0, import_signals_react25.useComputed)(() => {
      let mods = members.value.filter(
          ({ role }) => role === import_client4.ContestParticipantRole.Mod
        ),
        juries = members.value.filter(
          ({ role }) => role === import_client4.ContestParticipantRole.Jury
        ),
        contestants = members.value.filter(
          ({ role }) =>
            role === import_client4.ContestParticipantRole.Contestant
        );
      return [...mods, ...juries, ...contestants];
    });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
    className: "not-prose table-compact table w-full",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
              children: "\u6210\u5458",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
              children: "\u89D2\u8272",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
              children: "\u64CD\u4F5C",
            }),
          ],
        }),
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
        children: sortMembers.value.map(({ user, role }) =>
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            "tr",
            {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    UserLink,
                    {
                      user,
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                  children:
                    role === import_client4.ContestParticipantRole.Mod
                      ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                          className: "badge badge-primary",
                          children: "\u7BA1\u7406\u5458",
                        })
                      : role === import_client4.ContestParticipantRole.Jury
                      ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                          className: "badge badge-secondary",
                          children: "\u88C1\u5224",
                        })
                      : /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                          className: "badge",
                          children: "\u53C2\u8D5B\u9009\u624B",
                        }),
                }),
                role != import_client4.ContestParticipantRole.Mod
                  ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("td", {
                      className: "space-x-3",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          SetMemberRole,
                          {
                            id: user.id,
                            role,
                          }
                        ),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          DeleteMember,
                          {
                            id: user.id,
                          }
                        ),
                      ],
                    })
                  : /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                      children: "-",
                    }),
              ],
            },
            user.id
          )
        ),
      }),
    ],
  });
}

// app/routes/contest/$contestId/index.tsx
var contestId_exports2 = {};
__export(contestId_exports2, {
  loader: () => loader25,
});
var import_node24 = require("@remix-run/node");
function loader25({ params }) {
  return (0, import_node24.redirect)(`/contest/${params.contestId}/desc`);
}

// app/routes/contest/$contestId/desc.tsx
var desc_exports = {};
__export(desc_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ContestIndex,
  loader: () => loader26,
  meta: () => meta10,
});
var import_node25 = require("@remix-run/node"),
  import_react45 = require("@remix-run/react");
var import_hi25 = require("react-icons/hi"),
  import_signals_react26 = require("@preact/signals-react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader26({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request);
  await self
    .team(await findContestTeam(contestId))
    .contest(contestId)
    .checkPermission(
      (await findContestPrivacy(contestId))
        ? Permissions.PERM_VIEW_CONTEST
        : Permissions.PERM_VIEW_CONTEST_PUBLIC
    );
  let contest = await db.contest.findUnique({
    where: { id: contestId },
    select: {
      id: !0,
      title: !0,
      description: !0,
      beginTime: !0,
      endTime: !0,
      private: !0,
      registrationType: !0,
      allowJoinAfterStart: !0,
      tags: {
        select: {
          name: !0,
        },
      },
      _count: {
        select: {
          problems: !0,
        },
      },
    },
  });
  if (!contest) throw new Response("Contest not found", { status: 404 });
  let registered2 = self.userId
      ? await findContestParticipantRole(contestId, self.userId)
      : null,
    status = await findContestStatus(contestId);
  return (0, import_node25.json)({ contest, registered: registered2, status });
}
var meta10 = ({ data: data2 }) => ({
  title: `\u6BD4\u8D5B: ${
    data2 == null ? void 0 : data2.contest.title
  } - HITwh OJ`,
  description: data2 == null ? void 0 : data2.contest.description,
});
function ContestIndex() {
  let loaderData = useSignalLoaderData(),
    contest = (0, import_signals_react26.useComputed)(
      () => loaderData.value.contest
    ),
    registered2 = (0, import_signals_react26.useComputed)(
      () => loaderData.value.registered
    ),
    status = (0, import_signals_react26.useComputed)(
      () => loaderData.value.status
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "stats bg-base-200 text-base-content w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "stat",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-figure text-secondary",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    import_hi25.HiOutlineClock,
                    {
                      className: "h-8 w-8",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-title",
                  children: "\u5F00\u59CB\u65F6\u95F4",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-value",
                  children: formatRelativeDateTime(contest.value.beginTime),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-desc",
                  children: formatDateTime(contest.value.beginTime),
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "stat",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-figure text-secondary",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    import_hi25.HiOutlineClock,
                    {
                      className: "h-8 w-8",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-title",
                  children: "\u6BD4\u8D5B\u65F6\u957F",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-value",
                  children: formatDurationTime(
                    new Date(contest.value.endTime).getTime() -
                      new Date(contest.value.beginTime).getTime()
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-desc",
                  children: formatDateTime(contest.value.endTime),
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "stat",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-figure text-secondary",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    import_hi25.HiOutlineBookOpen,
                    {
                      className: "h-8 w-8",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-title",
                  children: "\u9898\u76EE\u6570\u91CF",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-value",
                  children: formatNumber(contest.value._count.problems),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-desc",
                  children: "\u8FD9\u91CC\u53EF\u4EE5\u8BF4\u4EC0\u4E48",
                }),
              ],
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Markdown, {
          children: contest.value.description,
        }),
        registered2.value === "Mod"
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
              className: "alert alert-info shadow-lg",
              children:
                "\u60A8\u5DF2\u7ECF\u662F\u6BD4\u8D5B\u7684\u7BA1\u7406\u5458",
            })
          : registered2.value === "Jury"
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
              className: "alert alert-info shadow-lg",
              children:
                "\u60A8\u5DF2\u7ECF\u662F\u6BD4\u8D5B\u7684\u88C1\u5224",
            })
          : registered2.value === "Contestant"
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
              className: "alert alert-info shadow-lg",
              children:
                "\u60A8\u5DF2\u7ECF\u62A5\u540D\u4E86\u8BE5\u6BD4\u8D5B",
            })
          : contest.value.private
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
              className: "alert alert-info shadow-lg",
              children: "\u65E0\u6CD5\u62A5\u540D\u79C1\u6709\u6BD4\u8D5B",
            })
          : status.value === "Running" && !contest.value.allowJoinAfterStart
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
              className: "alert alert-info shadow-lg",
              children:
                "\u8BE5\u6BD4\u8D5B\u4E0D\u5141\u8BB8\u4E2D\u9014\u52A0\u5165",
            })
          : status.value === "Ended"
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
              className: "alert alert-info shadow-lg",
              children: "\u6BD4\u8D5B\u5DF2\u7ECF\u7ED3\u675F",
            })
          : contest.value.registrationType === "Disallow"
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
              className: "alert alert-info shadow-lg",
              children: "\u62A5\u540D\u5DF2\u7ECF\u5173\u95ED",
            })
          : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react45.Link, {
              className: "btn btn-primary",
              to: `/contest/${contest.value.id}/register`,
              children: "\u62A5\u540D\u6BD4\u8D5B",
            }),
      ],
    }
  );
}

// app/routes/contest/$contestId/edit.tsx
var edit_exports2 = {};
__export(edit_exports2, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action10,
  default: () => ContestEdit,
  loader: () => loader27,
  meta: () => meta11,
});
var import_client5 = require("@prisma/client"),
  import_node26 = require("@remix-run/node"),
  import_react46 = require("@remix-run/react");

// app/utils/time.ts
function adjustTimezone(date, timezoneOffset) {
  return new Date(
    date.getTime() + (timezoneOffset - new Date().getTimezoneOffset()) * 6e4
  );
}
function getDatetimeLocal(time = Date.now()) {
  return new Date(time - new Date().getTimezoneOffset() * 6e4)
    .toISOString()
    .slice(0, 16);
}

// app/routes/contest/$contestId/edit.tsx
var import_zod2 = require("zod");
var import_signals_react27 = require("@preact/signals-react");
var import_react47 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader27({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(await findContestTeam(contestId))
      .contest(contestId)
      .checkPermission(Permissions.PERM_EDIT_CONTEST);
  let contest = await db.contest.findUnique({
    where: { id: contestId },
    select: {
      id: !0,
      title: !0,
      description: !0,
      beginTime: !0,
      endTime: !0,
      system: !0,
      private: !0,
      registrationType: !0,
      registrationPassword: !0,
      allowJoinAfterStart: !0,
      tags: { select: { name: !0 } },
      problems: {
        orderBy: { rank: "asc" },
        select: {
          problem: {
            select: {
              ...selectProblemListData,
            },
          },
        },
      },
    },
  });
  if (!contest) throw new Response("Contest not found", { status: 404 });
  return (0, import_node26.json)({ contest });
}
async function action10({ request, params }) {
  let contestId = invariant(idScheme, params.contestId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(await findContestTeam(contestId))
      .contest(contestId)
      .checkPermission(Permissions.PERM_EDIT_CONTEST);
  let form = await request.formData(),
    _action = form.get("_action");
  switch (_action) {
    case "CreateProblem" /* CreateProblem */: {
      let problemId = invariant(idScheme, form.get("pid"));
      return (
        await db.$transaction(async (db2) => {
          let {
            _max: { rank },
          } = await db2.contestProblem.aggregate({
            where: { contestId },
            _max: { rank: !0 },
          });
          await db2.contestProblem.create({
            data: {
              contestId,
              problemId,
              rank: (rank ?? 0) + 1,
            },
          });
        }),
        null
      );
    }
    case "DeleteProblem" /* DeleteProblem */: {
      let problemId = invariant(idScheme, form.get("pid"));
      return (
        await db.$transaction(async (db2) => {
          let { rank } = await db2.contestProblem.delete({
            where: {
              contestId_problemId: {
                contestId,
                problemId,
              },
            },
          });
          await db2.contestProblem.updateMany({
            where: { contestId, rank: { gte: rank } },
            data: { rank: { decrement: 1 } },
          });
        }),
        null
      );
    }
    case "MoveProblemUp" /* MoveProblemUp */:
    case "MoveProblemDown" /* MoveProblemDown */: {
      let problemId = invariant(idScheme, form.get("pid"));
      return (
        await db.$transaction(async (db2) => {
          let record = await db2.contestProblem.findUnique({
            where: {
              contestId_problemId: {
                contestId,
                problemId,
              },
            },
          });
          if (!record) throw new Response("Problem not found", { status: 400 });
          let target = await db2.contestProblem.findUnique({
            where: {
              contestId_rank: {
                contestId,
                rank:
                  _action === "MoveProblemUp" /* MoveProblemUp */
                    ? record.rank - 1
                    : record.rank + 1,
              },
            },
          });
          if (!target)
            throw new Response("Cannot move problem", { status: 400 });
          await db2.contestProblem.delete({
            where: { contestId_rank: { contestId, rank: record.rank } },
          }),
            await db2.contestProblem.delete({
              where: { contestId_rank: { contestId, rank: target.rank } },
            }),
            await db2.contestProblem.createMany({
              data: [
                { contestId, problemId: record.problemId, rank: target.rank },
                { contestId, problemId: target.problemId, rank: record.rank },
              ],
            });
        }),
        null
      );
    }
    case "UpdateInformation" /* UpdateInformation */: {
      let title = invariant(titleScheme, form.get("title")),
        description = invariant(descriptionScheme, form.get("description")),
        timezone = invariant(timezoneScheme, form.get("timezone")),
        beginTime = adjustTimezone(
          invariant(datetimeStringScheme, form.get("beginTime")),
          timezone
        ),
        endTime = adjustTimezone(
          invariant(datetimeStringScheme, form.get("endTime")),
          timezone
        ),
        system = invariant(systemScheme, form.get("system")),
        priv = form.has("private"),
        allowJoinAfterStart = form.has("joinAfterStart"),
        registrationType = invariant(
          import_zod2.z.nativeEnum(import_client5.ContestRegistrationType),
          form.get("registrationType")
        ),
        registrationPassword =
          registrationType === "Password"
            ? invariant(weakPasswordScheme, form.get("registrationPassword"))
            : "",
        tags = form.getAll("tag").map((tag) => invariant(tagScheme, tag));
      return (
        await db.$transaction(async (db2) => {
          let contest = await db2.contest.update({
            where: { id: contestId },
            data: {
              title,
              description,
              beginTime,
              endTime,
              system,
              private: priv,
              allowJoinAfterStart,
              registrationType,
              registrationPassword,
            },
            select: {
              tags: { select: { name: !0 } },
            },
          });
          await db2.contest.update({
            where: { id: contestId },
            data: {
              tags: {
                connectOrCreate: tags
                  .filter((tag) => !contest.tags.some((t2) => t2.name === tag))
                  .map((tag) => ({
                    where: { name: tag },
                    create: { name: tag },
                  })),
                disconnect: contest.tags
                  .filter((tag) => !tags.includes(tag.name))
                  .map((tag) => ({ name: tag.name })),
              },
            },
          });
        }),
        null
      );
    }
  }
  throw new Response("I'm a teapot", { status: 418 });
}
var meta11 = ({ data: data2 }) => ({
  title: `\u7F16\u8F91\u6BD4\u8D5B: ${
    data2 == null ? void 0 : data2.contest.title
  } - HITwh OJ`,
});
function ContestEdit() {
  let loaderData = useSignalLoaderData(),
    contest = (0, import_signals_react27.useComputed)(
      () => loaderData.value.contest
    ),
    registrationType = (0, import_signals_react27.useSignal)(
      contest.value.registrationType
    ),
    transition = useSignalTransition(),
    Toasts = useToasts();
  return (
    (0, import_react47.useEffect)(() => {
      transition.actionSuccess && Toasts.success("\u66F4\u65B0\u6210\u529F");
    }, [transition.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
          children: "\u4FEE\u6539\u6BD4\u8D5B\u4FE1\u606F",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react46.Form, {
          method: "post",
          className: "form-control gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u6807\u9898",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "text",
                  name: "title",
                  defaultValue: contest.value.title,
                  required: !0,
                  disabled: transition.isRunning,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TagsEditor, {
              label: "\u6BD4\u8D5B\u6807\u7B7E",
              name: "tag",
              defaultTags: contest.value.tags.map(({ name }) => name),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u4ECB\u7ECD",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MarkdownEditor, {
                  name: "description",
                  defaultValue: contest.value.description,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
                  className: "label",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text",
                      children: "\u5F00\u59CB\u65F6\u95F4",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text-alt",
                      children:
                        Intl.DateTimeFormat().resolvedOptions().timeZone,
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "datetime-local",
                  name: "beginTime",
                  defaultValue: getDatetimeLocal(
                    new Date(contest.value.beginTime).getTime()
                  ),
                  required: !0,
                  disabled: transition.isRunning,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
                  className: "label",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text",
                      children: "\u7ED3\u675F\u65F6\u95F4",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text-alt",
                      children:
                        Intl.DateTimeFormat().resolvedOptions().timeZone,
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "datetime-local",
                  name: "endTime",
                  defaultValue: getDatetimeLocal(
                    new Date(contest.value.endTime).getTime()
                  ),
                  required: !0,
                  disabled: transition.isRunning,
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  type: "hidden",
                  name: "timezone",
                  value: new Date().getTimezoneOffset(),
                  required: !0,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u6BD4\u8D5B\u8D5B\u5236",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("select", {
                  className: "select select-bordered",
                  name: "system",
                  required: !0,
                  disabled: transition.isRunning,
                  defaultValue: contest.value.system,
                  children: Object.keys(import_client5.ContestSystem).map(
                    (key) =>
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                        "option",
                        {
                          value: key,
                          children: import_client5.ContestSystem[key],
                        },
                        key
                      )
                  ),
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u62A5\u540D\u65B9\u5F0F",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                  className: "flex gap-4",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("select", {
                      className: "select select-bordered",
                      name: "registrationType",
                      value: registrationType.value,
                      onChange: (event) =>
                        (registrationType.value = event.target.value),
                      disabled: transition.isRunning,
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                          value: import_client5.ContestRegistrationType.Public,
                          children:
                            "\u5141\u8BB8\u4EFB\u4F55\u4EBA\u62A5\u540D",
                        }),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                          value:
                            import_client5.ContestRegistrationType.Password,
                          children:
                            "\u9700\u8981\u586B\u5199\u9080\u8BF7\u7801",
                        }),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                          value:
                            import_client5.ContestRegistrationType.Disallow,
                          children: "\u4E0D\u5141\u8BB8\u62A5\u540D",
                        }),
                      ],
                    }),
                    registrationType.value === "Password" &&
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                        className: "input input-bordered",
                        type: "text",
                        name: "registrationPassword",
                        defaultValue: contest.value.registrationPassword,
                        disabled: transition.isRunning,
                        placeholder: "\u9080\u8BF7\u7801",
                        required: !0,
                      }),
                  ],
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
                  className: "label cursor-pointer justify-start gap-2",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                      className: "checkbox checkbox-primary",
                      type: "checkbox",
                      name: "private",
                      defaultChecked: contest.value.private,
                      disabled: transition.isRunning,
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text",
                      children:
                        "\u4FDD\u6301\u6BD4\u8D5B\u9690\u85CF\uFF08\u53D6\u6D88\u52FE\u9009\u4E4B\u540E\u7528\u6237\u53EF\u4EE5\u5728\u9996\u9875\u770B\u5230\u8BE5\u6BD4\u8D5B\uFF09",
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
                  className: "label cursor-pointer justify-start gap-2",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                      className: "checkbox checkbox-primary",
                      type: "checkbox",
                      name: "joinAfterStart",
                      defaultChecked: contest.value.allowJoinAfterStart,
                      disabled: transition.isRunning,
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text",
                      children:
                        "\u5141\u8BB8\u6BD4\u8D5B\u5F00\u59CB\u540E\u4E2D\u9014\u52A0\u5165",
                    }),
                  ],
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "form-control w-full max-w-xs",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                className: "btn btn-primary",
                type: "submit",
                name: "_action",
                value: "UpdateInformation" /* UpdateInformation */,
                disabled: transition.isRunning,
                children: "\u786E\u8BA4\u66F4\u65B0",
              }),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
          children: "\u4FEE\u6539\u6BD4\u8D5B\u9898\u76EE",
        }),
        Date.now() > new Date(contest.value.beginTime).getTime() &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
            className: "alert alert-warning shadow-lg",
            children:
              "\u5982\u679C\u60A8\u5728\u6BD4\u8D5B\u5F00\u59CB\u540E\u4FEE\u6539\u9898\u76EE\uFF0C\u7CFB\u7EDF\u53EF\u80FD\u4F1A\u51FA\u73B0\u4E00\u4E9B\u5947\u5999\u7684\u7279\u6027",
          }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ProblemEditor, {
          problems: contest.value.problems.map(({ problem }) => problem),
          createAction: "CreateProblem" /* CreateProblem */,
          deleteAction: "DeleteProblem" /* DeleteProblem */,
          moveUpAction: "MoveProblemUp" /* MoveProblemUp */,
          moveDownAction: "MoveProblemDown" /* MoveProblemDown */,
        }),
      ],
    })
  );
}

// app/routes/problem/$problemId.tsx
var problemId_exports = {};
__export(problemId_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ProblemView,
  loader: () => loader28,
  meta: () => meta12,
});
var import_node27 = require("@remix-run/node"),
  import_react48 = require("@remix-run/react");
var import_hi26 = require("react-icons/hi");
var import_signals_react28 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader28({ request, params }) {
  let problemId = invariant(idScheme, params.problemId, { status: 404 }),
    team = (await findRequestUser(request)).team(
      await findProblemTeam(problemId)
    );
  await team.checkPermission(
    (await findProblemPrivacy(problemId))
      ? Permissions.PERM_VIEW_PROBLEM
      : Permissions.PERM_VIEW_PROBLEM_PUBLIC
  );
  let [hasEditPerm] = await team.hasPermission(Permissions.PERM_EDIT_PROBLEM),
    problem = await db.problem.findUnique({
      where: { id: problemId },
      select: {
        id: !0,
        title: !0,
        description: !0,
        private: !0,
        allowSubmit: !0,
        tags: {
          select: {
            name: !0,
          },
        },
      },
    });
  if (!problem) throw new Response("Problem not found", { status: 404 });
  return (0, import_node27.json)({ problem, hasEditPerm });
}
var meta12 = ({ data: data2 }) => ({
  title: `\u9898\u76EE: ${
    data2 == null ? void 0 : data2.problem.title
  } - HITwh OJ`,
  description: data2 == null ? void 0 : data2.problem.description,
});
function ProblemView() {
  let loaderData = useSignalLoaderData(),
    problem = (0, import_signals_react28.useComputed)(
      () => loaderData.value.problem
    ),
    hasEditPerm = (0, import_signals_react28.useComputed)(
      () => loaderData.value.hasEditPerm
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: problem.value.title,
        }),
        (problem.value.tags.length > 0 || problem.value.private) &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className: "not-prose flex flex-wrap gap-2",
            children: [
              problem.value.private &&
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                  className: "badge badge-warning gap-1",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi26.HiOutlineEyeOff,
                      {}
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u9690\u85CF",
                    }),
                  ],
                }),
              !problem.value.allowSubmit &&
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                  className: "badge badge-error gap-1",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi26.HiOutlineX,
                      {}
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u7981\u6B62\u63D0\u4EA4",
                    }),
                  ],
                }),
              problem.value.tags.map(({ name }) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  import_react48.Link,
                  {
                    className: "badge gap-1",
                    to: `/problem/tag/${name}`,
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                        import_hi26.HiOutlineTag,
                        {}
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                        children: name,
                      }),
                    ],
                  },
                  name
                )
              ),
            ],
          }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", {
          className: "not-prose tabs tabs-boxed bg-base-100",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_react48.NavLink,
              {
                className: "tab",
                to: "desc",
                children: "\u9898\u9762",
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_react48.NavLink,
              {
                className: "tab",
                to: "submit",
                children: "\u63D0\u4EA4",
              }
            ),
            hasEditPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react48.NavLink,
                {
                  className: "tab",
                  to: "data",
                  children: "\u6570\u636E",
                }
              ),
            hasEditPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react48.NavLink,
                {
                  className: "tab",
                  to: "edit",
                  children: "\u7F16\u8F91",
                }
              ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_react48.NavLink,
              {
                className: "tab",
                to: "board",
                children: "\u699C\u5355",
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react48.Link, {
              className: "tab",
              to: `/record?pid=${problem.value.id}`,
              children: "\u63D0\u4EA4\u8BB0\u5F55",
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react48.Outlet, {}),
      ],
    }
  );
}

// app/routes/problem/$problemId/submit.tsx
var submit_exports2 = {};
__export(submit_exports2, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action11,
  default: () => ProblemSubmit,
  loader: () => loader29,
  meta: () => meta13,
});
var import_node28 = require("@remix-run/node"),
  import_node29 = require("@remix-run/node"),
  import_react49 = require("@remix-run/react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader29({ request, params }) {
  let problemId = invariant(idScheme, params.problemId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(await findProblemTeam(problemId))
      .checkPermission(
        (await findProblemPrivacy(problemId))
          ? Permissions.PERM_VIEW_PROBLEM
          : Permissions.PERM_VIEW_PROBLEM_PUBLIC
      );
  let problem = await db.problem.findUnique({
    where: { id: problemId },
    select: { title: !0, allowSubmit: !0 },
  });
  if (!problem) throw new Response("Problem not found", { status: 404 });
  if (!problem.allowSubmit)
    throw new Response("Problem not allow submit", { status: 403 });
  return (0, import_node28.json)({ problem });
}
var meta13 = ({ data: data2 }) => ({
  title: `\u63D0\u4EA4\u9898\u76EE: ${
    data2 == null ? void 0 : data2.problem.title
  } - HITwh OJ`,
});
async function action11({ request, params }) {
  let problemId = invariant(idScheme, params.problemId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(await findProblemTeam(problemId))
      .checkPermission(
        (await findProblemPrivacy(problemId))
          ? Permissions.PERM_VIEW_PROBLEM
          : Permissions.PERM_VIEW_PROBLEM_PUBLIC
      );
  let problem = await db.problem.findUnique({
    where: { id: problemId },
    select: { allowSubmit: !0 },
  });
  if (!problem) throw new Response("Problem not found", { status: 404 });
  if (!problem.allowSubmit)
    throw new Response("Problem not allow submit", { status: 403 });
  let form = await request.formData(),
    code3 = invariant(codeScheme, form.get("code")),
    language2 = invariant(languageScheme, form.get("language")),
    { id: recordId } = await db.record.create({
      data: {
        language: language2,
        problemId,
        submitterId: self.userId,
      },
      select: { id: !0 },
    });
  return (
    await s3.writeFile(`/record/${recordId}`, Buffer.from(code3)),
    judge.push(recordId),
    (0, import_node29.redirect)(`/record/${recordId}`)
  );
}
function ProblemSubmit() {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react49.Form, {
    method: "post",
    className: "form-control gap-4",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "form-control w-full max-w-xs",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
            className: "label",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "label-text",
              children: "\u8BED\u8A00",
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("select", {
            className: "select select-bordered",
            name: "language",
            defaultValue: "",
            required: !0,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                value: "",
                disabled: !0,
                children: "\u9009\u62E9\u4EE3\u7801\u8BED\u8A00",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                value: "c",
                children: "C",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                value: "cpp",
                children: "C++",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                value: "java",
                children: "Java",
              }),
            ],
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "form-control",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
            className: "label",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "label-text",
              children: "\u4EE3\u7801",
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("textarea", {
            className: "textarea textarea-bordered",
            name: "code",
            placeholder: "Paste your code here desu~",
            required: !0,
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
        className: "form-control w-full max-w-xs",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
          className: "btn btn-primary",
          type: "submit",
          children: "\u63D0\u4EA4",
        }),
      }),
    ],
  });
}

// app/routes/problem/$problemId/board.tsx
var board_exports2 = {};
__export(board_exports2, {
  default: () => ProblemBoard,
  loader: () => loader30,
});
var import_signals_react29 = require("@preact/signals-react"),
  import_node30 = require("@remix-run/node"),
  import_react50 = require("@remix-run/react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader30({ params }) {
  let problemId = invariant(idScheme, params.problemId, { status: 404 }),
    records = await db.record.findMany({
      where: {
        status: "Accepted",
        problemId,
        contestId: null,
      },
      distinct: ["submitterId"],
      orderBy: [{ time: "asc" }, { submittedAt: "asc" }],
      select: {
        id: !0,
        status: !0,
        time: !0,
        memory: !0,
        submitter: { select: { ...selectUserData } },
        submittedAt: !0,
      },
    });
  return (0, import_node30.json)({ records });
}
function ProblemBoard() {
  let loaderData = useSignalLoaderData(),
    records = (0, import_signals_react29.useComputed)(
      () => loaderData.value.records
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
          children: "\u8C01\u8DD1\u7684\u6700\u5FEB",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u72B6\u6001",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u7528\u6237",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "hidden sm:table-cell",
                    children: "\u65F6\u95F4",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "hidden sm:table-cell",
                    children: "\u5185\u5B58",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "hidden md:table-cell",
                    children: "\u63D0\u4EA4\u65F6\u95F4",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: records.value.map((record, index2) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: index2 + 1,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          import_react50.Link,
                          {
                            to: `/record/${record.id}`,
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsx)(RecordStatus, {
                              status: record.status,
                            }),
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          UserLink,
                          {
                            user: record.submitter,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("td", {
                        className: "hidden sm:table-cell",
                        children: [formatNumber(record.time), "ms"],
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("td", {
                        className: "hidden sm:table-cell",
                        children: [formatNumber(record.memory), "bytes"],
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        className: "hidden md:table-cell",
                        children: formatDateTime(record.submittedAt),
                      }),
                    ],
                  },
                  record.id
                )
              ),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/problem/$problemId/index.ts
var problemId_exports2 = {};
__export(problemId_exports2, {
  loader: () => loader31,
});
var import_node31 = require("@remix-run/node");
function loader31({ params }) {
  return (0, import_node31.redirect)(`/problem/${params.problemId}/desc`);
}

// app/routes/problem/$problemId/data.tsx
var data_exports = {};
__export(data_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action12,
  default: () => ProblemData,
  loader: () => loader32,
  meta: () => meta14,
});
var import_node33 = require("@remix-run/node"),
  import_node34 = require("@remix-run/node");

// app/utils/files.ts
async function createUserFile(file, userId) {
  let { id: fileId } = await db.file.create({
    data: {
      filename: file.name,
      filesize: file.size,
      mimetype: file.type,
      user: { connect: { id: userId } },
    },
    select: {
      id: !0,
    },
  });
  return (
    await s3.writeFile(
      `/file/${fileId}`,
      Buffer.from(await file.arrayBuffer()),
      file.type
    ),
    fileId
  );
}
async function createProblemFile(file, problemId) {
  let { id: fileId } = await db.file.create({
    data: {
      filename: file.name,
      filesize: file.size,
      mimetype: file.type,
      fileProblem: { connect: { id: problemId } },
    },
  });
  return (
    await s3.writeFile(
      `/file/${fileId}`,
      Buffer.from(await file.arrayBuffer()),
      file.type
    ),
    fileId
  );
}
async function createProblemData(file, problemId) {
  let { id: fileId } = await db.file.create({
    data: {
      filename: file.name,
      filesize: file.size,
      mimetype: file.type,
      dataProblem: { connect: { id: problemId } },
    },
  });
  return (
    await s3.writeFile(
      `/file/${fileId}`,
      Buffer.from(await file.arrayBuffer()),
      file.type
    ),
    fileId
  );
}
async function removeFile(fileId) {
  let file = await db.file.delete({
    where: { id: fileId },
    select: { id: !0 },
  });
  if (!file) throw new Response("File not found", { status: 404 });
  await s3.removeFile(`/file/${file.id}`);
}

// app/utils/server/handler.server.ts
var import_node32 = require("@remix-run/node");
function createUploadHandler() {
  process.env.MAX_FILE_SIZE ||
    console.warn("MAX_FILE_SIZE is not set, defaulting to 20MB");
  let maxPartSize = parseInt(process.env.MAX_FILE_SIZE || "20000000");
  return (0, import_node32.unstable_createMemoryUploadHandler)({
    maxPartSize,
  });
}
var handler;
handler = createUploadHandler();

// app/src/file/FileList.tsx
var import_react51 = require("@remix-run/react");

// app/src/file/FileRemoveButton.tsx
var import_hi27 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime");
function FileRemoveButton({ file, deleteAction }) {
  let fetcher = useSignalFetcher();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(fetcher.Form, {
    method: "post",
    encType: "multipart/form-data",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
        type: "hidden",
        name: "fid",
        value: file.id,
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
        className: "btn btn-error btn-square btn-sm",
        type: "submit",
        name: "_action",
        value: deleteAction,
        disabled: fetcher.isRunning,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi27.HiOutlineTrash,
          {
            className: "h-4 w-4",
          }
        ),
      }),
    ],
  });
}

// app/src/file/FileList.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function FileList({ files, deleteAction }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
    className: "table-compact table",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
              children: "\u6587\u4EF6\u540D",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
              children: "\u6587\u4EF6\u7C7B\u578B",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
              children: "\u6587\u4EF6\u5927\u5C0F",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
              children: "\u64CD\u4F5C",
            }),
          ],
        }),
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
        children: files.map((file) =>
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            "tr",
            {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    import_react51.Link,
                    {
                      to: `/file/${file.id}`,
                      target: "_blank",
                      children: file.filename,
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                  children: file.mimetype,
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                  children: formatNumber(file.filesize),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    FileRemoveButton,
                    {
                      file,
                      deleteAction,
                    }
                  ),
                }),
              ],
            },
            file.id
          )
        ),
      }),
    ],
  });
}

// app/src/file/FileUploader.tsx
var import_react52 = require("react"),
  import_hi28 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime");
function FileUploader({ uploadAction }) {
  let fetcher = useSignalFetcher(),
    formRef = (0, import_react52.useRef)(null),
    inputRef = (0, import_react52.useRef)(null);
  return (
    (0, import_react52.useEffect)(() => {
      var _a2;
      fetcher.actionSuccess && ((_a2 = formRef.current) == null || _a2.reset());
    }, [fetcher.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(fetcher.Form, {
      method: "post",
      encType: "multipart/form-data",
      ref: formRef,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
          type: "file",
          name: "file",
          multiple: !0,
          hidden: !0,
          ref: inputRef,
          onInput: () => fetcher.submit(formRef.current),
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
          type: "hidden",
          name: "_action",
          value: uploadAction,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
          className: "btn btn-primary gap-2",
          type: "button",
          onClick: () => {
            var _a2;
            return (_a2 = inputRef.current) == null ? void 0 : _a2.click();
          },
          disabled: fetcher.isRunning,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_hi28.HiOutlineUpload,
              {}
            ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u4E0A\u4F20\u6587\u4EF6\u634F",
            }),
          ],
        }),
      ],
    })
  );
}

// app/routes/problem/$problemId/data.tsx
var import_react53 = require("react"),
  import_react54 = require("react"),
  import_hi29 = require("react-icons/hi");
var import_zod3 = require("zod");
var import_signals_react30 = require("@preact/signals-react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader32({ request, params }) {
  let problemId = invariant(idScheme, params.problemId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(await findProblemTeam(problemId))
      .checkPermission(Permissions.PERM_EDIT_PROBLEM);
  let problem = await db.problem.findUnique({
    where: { id: problemId },
    select: {
      title: !0,
      files: { orderBy: { filename: "asc" } },
      data: { orderBy: { filename: "asc" } },
    },
  });
  if (!problem) throw new Response("Problem not found", { status: 404 });
  let file = await db.file.findFirst({
      where: { dataProblemId: problemId, filename: "config.json" },
      select: { id: !0 },
    }),
    config = file && (await s3.readFile(`/file/${file.id}`)).toString("utf-8");
  return (0, import_node33.json)({ problem, config });
}
var meta14 = ({ data: data2 }) => ({
  title: `\u7F16\u8F91\u6570\u636E: ${
    data2 == null ? void 0 : data2.problem.title
  } - HITwh OJ`,
});
async function action12({ request, params }) {
  let problemId = invariant(idScheme, params.problemId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(await findProblemTeam(problemId))
      .checkPermission(Permissions.PERM_EDIT_PROBLEM);
  let form = await (0, import_node34.unstable_parseMultipartFormData)(
      request,
      handler
    ),
    _action = form.get("_action");
  switch (_action) {
    case "uploadData" /* UploadData */:
    case "uploadFile" /* UploadFile */: {
      let files = form.getAll("file").filter((file) => file instanceof File);
      if (!files.length) throw new Response("Invalid file", { status: 400 });
      return (
        await Promise.all(
          files.map((file) =>
            _action === "uploadData" /* UploadData */
              ? createProblemData(file, problemId)
              : createProblemFile(file, problemId)
          )
        ),
        null
      );
    }
    case "removeData" /* RemoveData */:
    case "removeFile" /* RemoveFile */: {
      let fid = invariant(uuidScheme, form.get("fid"));
      return await removeFile(fid), null;
    }
    case "updateConfig" /* UpdateConfig */: {
      let config = invariant(
        import_zod3.z.string().nonempty(),
        form.get("config")
      );
      return (
        await db.$transaction(async (db2) => {
          let data2 = await db2.file.findMany({
            where: {
              filename: "config.json",
              dataProblemId: problemId,
            },
            select: { id: !0 },
          });
          await Promise.all(data2.map(({ id }) => removeFile(id))),
            await createProblemData(
              new File([config], "config.json", { type: "application/json" }),
              problemId
            );
        }),
        null
      );
    }
  }
  throw new Response("I'm a teapot", { status: 418 });
}
function DataSelect({ options, ...props }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("select", {
    className: "select select-bordered",
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
        value: "",
        disabled: !0,
        children: "\u9009\u62E9\u6587\u4EF6",
      }),
      options.map((value) =>
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "option",
          {
            value,
            children: value,
          },
          value
        )
      ),
    ],
  });
}
var DEFAULT_TIME_LIMIT = 1e3,
  DEFAULT_MEMORY_LIMIT = 268435456;
function DefaultConfigEditor(props) {
  let handleAddSubtask = (0, import_react54.useCallback)(() => {
      props.config.value = {
        ...props.config.value,
        subtasks: [...props.config.value.subtasks, { score: 20, cases: [] }],
      };
    }, [props.config.value]),
    diagnostics = (0, import_signals_react30.useComputed)(() => {
      let totalScore = props.config.value.subtasks.reduce(
          (prev, cur) => prev + cur.score,
          0
        ),
        hasEmptySubtask = props.config.value.subtasks.some(
          (subtask) => subtask.cases.length === 0
        ),
        hasEmptyTask = props.config.value.subtasks.some((subtask) =>
          subtask.cases.some((task) => task.input === "" || task.output === "")
        ),
        hasInvalidScore = totalScore !== 100,
        allFiles = props.config.value.subtasks
          .flatMap((subtask) =>
            subtask.cases.flatMap((task) => [task.input, task.output])
          )
          .filter((file) => file !== ""),
        hasDuplicatedFile = new Set(allFiles).size !== allFiles.length;
      return {
        hasEmptySubtask,
        hasEmptyTask,
        hasInvalidScore,
        hasDuplicatedFile,
      };
    });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u65F6\u95F4\u9650\u5236 (ms)",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              className: "input input-bordered",
              type: "number",
              value: props.config.value.time,
              onChange: (event) => {
                props.config.value = {
                  ...props.config.value,
                  time: Number(event.target.value),
                };
              },
              placeholder: DEFAULT_TIME_LIMIT.toString(),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u5185\u5B58\u9650\u5236 (byte)",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              className: "input input-bordered",
              type: "number",
              value: props.config.value.memory,
              onChange: (event) => {
                props.config.value = {
                  ...props.config.value,
                  memory: Number(event.target.value),
                };
              },
              placeholder: DEFAULT_MEMORY_LIMIT.toString(),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h3", {
          className: "flex items-center justify-between",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u5B50\u4EFB\u52A1\u914D\u7F6E",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
              className: "btn btn-primary gap-2",
              onClick: handleAddSubtask,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_hi29.HiOutlinePlus,
                  {}
                ),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                  children: "\u6DFB\u52A0\u5B50\u4EFB\u52A1",
                }),
              ],
            }),
          ],
        }),
        props.config.value.subtasks.map((subtask, index2) => {
          let setSubtask = (subtask2) => {
              props.config.value = {
                ...props.config.value,
                subtasks: [
                  ...props.config.value.subtasks.slice(0, index2),
                  subtask2,
                  ...props.config.value.subtasks.slice(index2 + 1),
                ],
              };
            },
            handleRemoveSubtask = () => {
              props.config.value = {
                ...props.config.value,
                subtasks: [
                  ...props.config.value.subtasks.slice(0, index2),
                  ...props.config.value.subtasks.slice(index2 + 1),
                ],
              };
            },
            handleRemoveCase = (caseIndex) => {
              setSubtask({
                ...subtask,
                cases: subtask.cases.filter((_, i) => i !== caseIndex),
              });
            },
            handleAddCase = () => {
              setSubtask({
                ...subtask,
                cases: [...subtask.cases, { input: "", output: "" }],
              });
            };
          return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            "div",
            {
              className: "collapse-open collapse overflow-visible",
              tabIndex: 0,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                  className: "collapse-title flex items-center justify-between",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                      className: "inline-flex items-center gap-2",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                          children: ["\u5B50\u4EFB\u52A1 ", index2 + 1],
                        }),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                          className: "tooltip",
                          "data-tip": "\u5206\u503C",
                          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            "input",
                            {
                              className: "input input-bordered input-sm w-24",
                              type: "number",
                              value: subtask.score,
                              onChange: (event) => {
                                setSubtask({
                                  ...subtask,
                                  score: Number(event.target.value),
                                });
                              },
                            }
                          ),
                        }),
                      ],
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                      className: "inline-flex items-center gap-2",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                          className: "tooltip",
                          "data-tip": "\u65B0\u5EFA\u6D4B\u8BD5\u70B9",
                          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            "button",
                            {
                              className:
                                "btn btn-square btn-success btn-ghost btn-sm",
                              onClick: handleAddCase,
                              children: /* @__PURE__ */ (0,
                              import_jsx_runtime.jsx)(
                                import_hi29.HiOutlinePlus,
                                {
                                  className: "text-success",
                                }
                              ),
                            }
                          ),
                        }),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                          className: "tooltip",
                          "data-tip": "\u5220\u9664\u5B50\u4EFB\u52A1",
                          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            "button",
                            {
                              className:
                                "btn btn-square btn-error btn-ghost btn-sm",
                              onClick: handleRemoveSubtask,
                              children: /* @__PURE__ */ (0,
                              import_jsx_runtime.jsx)(import_hi29.HiOutlineX, {
                                className: "text-error",
                              }),
                            }
                          ),
                        }),
                      ],
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "collapse-content overflow-visible",
                  children: subtask.cases.map((task, index3) => {
                    let setTask = (task2) => {
                      setSubtask({
                        ...subtask,
                        cases: [
                          ...subtask.cases.slice(0, index3),
                          task2,
                          ...subtask.cases.slice(index3 + 1),
                        ],
                      });
                    };
                    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                      "div",
                      {
                        className: "flex items-center gap-2",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                            children: ["\u6D4B\u8BD5\u70B9 ", index3 + 1],
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            import_hi29.HiOutlineChevronLeft,
                            {}
                          ),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                            className: "tooltip",
                            "data-tip": "\u8F93\u5165\u6587\u4EF6",
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsx)(DataSelect, {
                              className: "select select-bordered select-sm",
                              value: task.input,
                              options: props.data,
                              onChange: (event) => {
                                setTask({ ...task, input: event.target.value });
                              },
                            }),
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            import_hi29.HiOutlineChevronRight,
                            {}
                          ),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                            className: "tooltip",
                            "data-tip": "\u8F93\u51FA\u6587\u4EF6",
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsx)(DataSelect, {
                              className:
                                "select tooltip select-bordered select-sm",
                              value: task.output,
                              options: props.data,
                              onChange: (event) => {
                                setTask({
                                  ...task,
                                  output: event.target.value,
                                });
                              },
                            }),
                          }),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                            className: "tooltip",
                            "data-tip": "\u5220\u9664\u6D4B\u8BD5\u70B9",
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsx)("button", {
                              className:
                                "btn btn-square btn-error btn-ghost btn-sm",
                              children: /* @__PURE__ */ (0,
                              import_jsx_runtime.jsx)(import_hi29.HiOutlineX, {
                                className: "text-error cursor-pointer",
                                onClick: () => handleRemoveCase(index3),
                              }),
                            }),
                          }),
                        ],
                      },
                      index3
                    );
                  }),
                }),
              ],
            },
            index2
          );
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "my-4 flex flex-col gap-2",
          children: [
            !props.config.value.subtasks.length &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "alert alert-warning",
                children: "\u8FD8\u6CA1\u6709\u4EFB\u4F55\u5B50\u4EFB\u52A1",
              }),
            props.config.value.subtasks.length > 0 &&
              diagnostics.value.hasInvalidScore &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "alert alert-warning",
                children:
                  "\u5B50\u4EFB\u52A1\u5206\u6570\u4E4B\u548C\u4E0D\u7B49\u4E8E 100",
              }),
            diagnostics.value.hasEmptySubtask &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "alert alert-warning",
                children: "\u5B58\u5728\u7A7A\u7684\u5B50\u4EFB\u52A1",
              }),
            diagnostics.value.hasEmptyTask &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "alert alert-warning",
                children:
                  "\u5B58\u5728\u672A\u9009\u62E9\u7684\u6D4B\u8BD5\u70B9",
              }),
            diagnostics.value.hasDuplicatedFile &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "alert alert-warning",
                children:
                  "\u5B58\u5728\u91CD\u590D\u4F7F\u7528\u7684\u6D4B\u8BD5\u6570\u636E",
              }),
          ],
        }),
      ],
    }
  );
}
function InteractiveConfigEditor(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u4EA4\u4E92\u4EE3\u7801",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DataSelect, {
              options: props.data,
              value: props.config.value.interactive,
              onChange: (event) => {
                props.config.value = {
                  ...props.config.value,
                  interactive: event.target.value,
                };
              },
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
          className: "my-4 flex flex-col gap-2",
          children:
            !props.config.value.interactive &&
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "alert alert-warning",
              children: "\u8BF7\u9009\u62E9\u4EA4\u4E92\u4EE3\u7801",
            }),
        }),
      ],
    }
  );
}
function DynamicConfigEditor(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u6570\u636E\u6784\u9020\u4EE3\u7801 (mkdata.cpp)",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DataSelect, {
              options: props.data,
              value: props.config.value.mkdata,
              onChange: (event) => {
                props.config.value = {
                  ...props.config.value,
                  mkdata: event.target.value,
                };
              },
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u6807\u51C6\u4EE3\u7801 (std.cpp)",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DataSelect, {
              options: props.data,
              value: props.config.value.std,
              onChange: (event) => {
                props.config.value = {
                  ...props.config.value,
                  std: event.target.value,
                };
              },
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "my-4 flex flex-col gap-2",
          children: [
            (!props.config.value.mkdata || !props.config.value.std) &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "alert alert-warning",
                children:
                  "\u8BF7\u9009\u62E9\u6570\u636E\u6784\u9020\u4EE3\u7801\u548C\u6807\u51C6\u4EE3\u7801",
              }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "alert alert-warning",
              children:
                "TODO \u6211\u8FD8\u6CA1\u5199\u5B8C\uFF0C\u4F60\u5148\u522B\u6025",
            }),
          ],
        }),
      ],
    }
  );
}
function SubmitAnswerConfigEditor(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u7B54\u6848",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              className: "input input-bordered",
              type: "text",
              value: props.config.value.answer,
              onChange: (event) => {
                props.config.value = {
                  ...props.config.value,
                  answer: event.target.value,
                };
              },
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
          className: "my-4 flex flex-col gap-2",
          children:
            !props.config.value.answer &&
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "alert alert-warning",
              children: "\u8BF7\u8F93\u5165\u7B54\u6848",
            }),
        }),
      ],
    }
  );
}
function ConfigJSONEditor({ config: defaultConfig, data: data2 }) {
  let config = (0, import_signals_react30.useSignal)(defaultConfig),
    fetcher = useSignalFetcher(),
    Toasts = useToasts();
  return (
    (0, import_react53.useEffect)(() => {
      fetcher.actionSuccess &&
        Toasts.success("\u66F4\u65B0\u914D\u7F6E\u6210\u529F");
    }, [fetcher.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
      className: "mb-24 flex flex-col gap-2",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u8BC4\u6D4B\u65B9\u5F0F",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("select", {
              className: "select select-bordered w-full max-w-xs",
              value: config.value.type,
              onChange: (event) => {
                let value = event.target.value;
                value === "default"
                  ? (config.value = { type: "default", subtasks: [] })
                  : value === "interactive"
                  ? (config.value = { type: "interactive", interactive: "" })
                  : value === "dynamic"
                  ? (config.value = {
                      type: "dynamic",
                      mkdata: "",
                      std: "",
                      subtasks: [],
                    })
                  : (config.value = { type: "submit_answer", answer: "" });
              },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                  value: "default",
                  children: "\u9ED8\u8BA4",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                  value: "interactive",
                  children: "\u4EA4\u4E92",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                  value: "dynamic",
                  children: "\u52A8\u6001",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                  value: "submit_answer",
                  children: "\u63D0\u7B54",
                }),
              ],
            }),
          ],
        }),
        config.value.type === "default" &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DefaultConfigEditor, {
            data: data2,
            config,
          }),
        config.value.type === "interactive" &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(InteractiveConfigEditor, {
            data: data2,
            config,
          }),
        config.value.type === "dynamic" &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DynamicConfigEditor, {
            data: data2,
            config,
          }),
        config.value.type === "submit_answer" &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            SubmitAnswerConfigEditor,
            {
              data: data2,
              config,
            }
          ),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(fetcher.Form, {
          method: "post",
          encType: "multipart/form-data",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("textarea", {
              name: "config",
              value: JSON.stringify(config.value),
              hidden: !0,
              readOnly: !0,
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
              className: "btn btn-primary w-full",
              type: "submit",
              name: "_action",
              value: "updateConfig" /* UpdateConfig */,
              disabled: fetcher.isRunning,
              children: "\u786E\u8BA4\u66F4\u65B0",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "collapse collapse-arrow",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  type: "checkbox",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "collapse-title text-xl font-medium",
                  children: "\u67E5\u770B\u751F\u6210 JSON \u6587\u4EF6",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "collapse-content",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    Highlighter,
                    {
                      language: "json",
                      children: JSON.stringify(config.value, null, 2),
                    }
                  ),
                }),
              ],
            }),
          ],
        }),
      ],
    })
  );
}
function ProblemData() {
  let loaderData = useSignalLoaderData(),
    files = (0, import_signals_react30.useComputed)(
      () => loaderData.value.problem.files
    ),
    data2 = (0, import_signals_react30.useComputed)(
      () => loaderData.value.problem.data
    ),
    config = (0, import_signals_react30.useComputed)(
      () => loaderData.value.config
    ),
    defaultConfig = (0, import_signals_react30.useComputed)(() =>
      config.value
        ? JSON.parse(config.value)
        : { type: "default", subtasks: [] }
    ),
    dataWithoutConfig = (0, import_signals_react30.useComputed)(() =>
      data2.value.filter(({ filename }) => filename !== "config.json")
    ),
    visible = (0, import_signals_react30.useSignal)(!1);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        !config.value &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
            className: "alert alert-warning",
            children:
              "\u60A8\u8FD8\u6CA1\u6709\u8FDB\u884C\u9898\u76EE\u7684\u8BC4\u6D4B\u914D\u7F6E\uFF0C\u9898\u76EE\u5F53\u524D\u65E0\u6CD5\u88AB\u8BC4\u6D4B",
          }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h2", {
          className: "flex items-center justify-between",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u6D4B\u8BD5\u6570\u636E",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
              className: "inline-flex items-center gap-4",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
                  className: "btn btn-primary gap-2",
                  onClick: () => (visible.value = !0),
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u914D\u7F6E",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi29.HiOutlineArrowsExpand,
                      {}
                    ),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FileUploader, {
                  uploadAction: "uploadData" /* UploadData */,
                }),
              ],
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
          children:
            "\u7528\u4E8E\u8BC4\u6D4B\u7684\u6570\u636E\u6587\u4EF6\u3002",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", {
          children: [
            "\u5173\u4E8E\u8BC4\u6D4B\u7684\u914D\u7F6E\u6587\u4EF6 ",
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("code", {
              children: "config.json",
            }),
            "\uFF0C\u60A8\u53EF\u4EE5\u9009\u62E9\u4F7F\u7528\u6211\u4EEC\u63D0\u4F9B\u7684\u5728\u7EBF\u7F16\u8F91\u5DE5\u5177\uFF0C\u4E5F\u53EF\u4EE5\u9009\u62E9\u624B\u52A8\u7F16\u8F91\u597D\u540E\u4E0A\u4F20\u3002",
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FileList, {
          files: dataWithoutConfig.value,
          deleteAction: "removeData" /* RemoveData */,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h2", {
          className: "flex items-center justify-between",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u9644\u52A0\u6587\u4EF6",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FileUploader, {
              uploadAction: "uploadFile" /* UploadFile */,
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
          children:
            "\u9898\u76EE\u7684\u9644\u52A0\u8D44\u6599\uFF0C\u4F8B\u5982\u6837\u4F8B\u6570\u636E\u3001PDF \u9898\u9762\u7B49",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FileList, {
          files: files.value,
          deleteAction: "removeFile" /* RemoveFile */,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Fullscreen, {
          visible: visible.value,
          className: "bg-base-100 overflow-auto",
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className: "mx-auto w-full max-w-xl p-4",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
                className: "btn btn-ghost gap-2",
                onClick: () => (visible.value = !1),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    import_hi29.HiOutlineChevronLeft,
                    {}
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                    children: "\u8FD4\u56DE",
                  }),
                ],
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                children: "\u914D\u7F6E\u8BC4\u6D4B\u4FE1\u606F",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ConfigJSONEditor, {
                config: defaultConfig.value,
                data: dataWithoutConfig.value.map(({ filename }) => filename),
              }),
            ],
          }),
        }),
      ],
    }
  );
}

// app/routes/problem/$problemId/desc.tsx
var desc_exports2 = {};
__export(desc_exports2, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ProblemIndex,
  loader: () => loader33,
  meta: () => meta15,
});
var import_node35 = require("@remix-run/node"),
  import_react55 = require("@remix-run/react");
var import_signals_react31 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader33({ request, params }) {
  let problemId = invariant(idScheme, params.problemId, { status: 404 });
  await (await findRequestUser(request))
    .team(await findProblemTeam(problemId))
    .checkPermission(
      (await findProblemPrivacy(problemId))
        ? Permissions.PERM_VIEW_PROBLEM
        : Permissions.PERM_VIEW_PROBLEM_PUBLIC
    );
  let problem = await db.problem.findUnique({
    where: { id: problemId },
    select: {
      id: !0,
      title: !0,
      description: !0,
      private: !0,
      files: { orderBy: { filename: "asc" } },
    },
  });
  if (!problem) throw new Response("Problem not found", { status: 404 });
  return (0, import_node35.json)({ problem });
}
var meta15 = ({ data: data2 }) => ({
  title: `\u9898\u76EE: ${
    data2 == null ? void 0 : data2.problem.title
  } - HITwh OJ`,
  description: data2 == null ? void 0 : data2.problem.description,
});
function ProblemIndex() {
  let loaderData = useSignalLoaderData(),
    problem = (0, import_signals_react31.useComputed)(
      () => loaderData.value.problem
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Markdown, {
          children: problem.value.description,
        }),
        problem.value.files.length > 0 &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            import_jsx_runtime.Fragment,
            {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                  children: "\u76F8\u5173\u6587\u4EF6",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ul", {
                  children: problem.value.files.map((file) =>
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      "li",
                      {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          import_react55.Link,
                          {
                            className: "link",
                            to: `/file/${file.id}`,
                            target: "_blank",
                            children: file.filename,
                          }
                        ),
                      },
                      file.id
                    )
                  ),
                }),
              ],
            }
          ),
      ],
    }
  );
}

// app/routes/problem/$problemId/edit.tsx
var edit_exports3 = {};
__export(edit_exports3, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action13,
  default: () => ProblemEdit,
  loader: () => loader34,
  meta: () => meta16,
});
var import_signals_react32 = require("@preact/signals-react"),
  import_node36 = require("@remix-run/node"),
  import_react56 = require("@remix-run/react"),
  import_react57 = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader34({ request, params }) {
  let problemId = invariant(idScheme, params.problemId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(await findProblemTeam(problemId))
      .checkPermission(Permissions.PERM_EDIT_PROBLEM);
  let problem = await db.problem.findUnique({
    where: { id: problemId },
    select: {
      id: !0,
      title: !0,
      description: !0,
      timeLimit: !0,
      memoryLimit: !0,
      private: !0,
      allowSubmit: !0,
      tags: {
        select: {
          name: !0,
        },
      },
      lockedBy: {
        select: selectUserData,
      },
    },
  });
  if (!problem)
    throw new Response("\u9898\u76EE\u672A\u627E\u5230", { status: 404 });
  return (0, import_node36.json)({ problem });
}
var meta16 = ({ data: data2 }) => ({
  title: `\u7F16\u8F91\u9898\u76EE: ${
    data2 == null ? void 0 : data2.problem.title
  } - HITwh OJ`,
});
async function action13({ request, params }) {
  var _a2, _b2;
  let problemId = invariant(idScheme, params.problemId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(await findProblemTeam(problemId))
      .checkPermission(Permissions.PERM_EDIT_PROBLEM);
  let form = await request.formData(),
    title = invariant(titleScheme, form.get("title")),
    description = invariant(descriptionScheme, form.get("description")),
    timeLimit = invariant(limitScheme, form.get("timeLimit")),
    memoryLimit = invariant(limitScheme, form.get("memoryLimit")),
    priv = form.has("private"),
    submit = form.has("allowSubmit"),
    tags = form.getAll("tag").map((value) => invariant(tagScheme, value)),
    lock = form.has("lock"),
    problem = await db.problem.findUnique({
      where: { id: problemId },
      select: { lockedBy: { select: { id: !0 } } },
    });
  if (
    ((_a2 = problem == null ? void 0 : problem.lockedBy) == null
      ? void 0
      : _a2.id) &&
    ((_b2 = problem == null ? void 0 : problem.lockedBy) == null
      ? void 0
      : _b2.id) !== self.userId
  )
    throw new Response("\u9898\u76EE\u5DF2\u88AB\u9501\u5B9A", { status: 403 });
  return (
    await db.$transaction(async (db2) => {
      let problem2 = await db2.problem.update({
        where: { id: problemId },
        data: {
          title,
          description,
          timeLimit,
          memoryLimit,
          private: priv,
          allowSubmit: submit,
          lockedBy: lock
            ? { connect: { id: self.userId } }
            : { disconnect: !0 },
        },
        select: { tags: { select: { name: !0 } } },
      });
      await db2.problem.update({
        where: { id: problemId },
        data: {
          tags: {
            connectOrCreate: tags
              .filter((tag) => !problem2.tags.some((t2) => t2.name === tag))
              .map((tag) => ({
                where: { name: tag },
                create: { name: tag },
              })),
            disconnect: problem2.tags
              .filter((tag) => !tags.includes(tag.name))
              .map((tag) => ({ name: tag.name })),
          },
        },
      });
    }),
    null
  );
}
function ProblemEdit() {
  let loaderData = useSignalLoaderData(),
    problem = (0, import_signals_react32.useComputed)(
      () => loaderData.value.problem
    ),
    transition = useSignalTransition(),
    Toasts = useToasts();
  (0, import_react57.useEffect)(() => {
    transition.actionSuccess && Toasts.success("\u66F4\u65B0\u6210\u529F");
  }, [transition.actionSuccess]);
  let userId = useUser(),
    isLocked = (0, import_signals_react32.useComputed)(
      () => problem.value.lockedBy !== null
    ),
    isLockedBySelf = (0, import_signals_react32.useComputed)(() => {
      var _a2;
      return (
        userId.value &&
        ((_a2 = problem.value.lockedBy) == null ? void 0 : _a2.id) ===
          userId.value
      );
    });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react56.Form, {
    method: "post",
    className: "form-control gap-4",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "form-control w-full max-w-xs",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
            className: "label",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "label-text",
              children: "\u9898\u76EE\u540D\u79F0",
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
            className: "input input-bordered",
            name: "title",
            required: !0,
            defaultValue: problem.value.title,
            disabled: transition.isRunning,
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TagsEditor, {
        label: "\u9898\u76EE\u6807\u7B7E",
        name: "tag",
        defaultTags: problem.value.tags.map(({ name }) => name),
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "form-control",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
            className: "label",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "label-text",
              children: "\u9898\u76EE\u6B63\u6587",
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MarkdownEditor, {
            name: "description",
            defaultValue: problem.value.description,
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "form-control w-full max-w-xs",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
            className: "label",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "label-text",
              children:
                "\u65F6\u95F4\u9650\u5236 (ms, \u4EC5\u4F9B\u9898\u9762\u53C2\u8003)",
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
            className: "input input-bordered",
            name: "timeLimit",
            type: "number",
            required: !0,
            defaultValue: String(problem.value.timeLimit),
            disabled: transition.isRunning,
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "form-control w-full max-w-xs",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
            className: "label",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "label-text",
              children:
                "\u5185\u5B58\u9650\u5236 (byte, \u4EC5\u4F9B\u9898\u9762\u53C2\u8003)",
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
            className: "input input-bordered",
            name: "memoryLimit",
            type: "number",
            required: !0,
            defaultValue: String(problem.value.memoryLimit),
            disabled: transition.isRunning,
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "form-control",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
            className: "label cursor-pointer justify-start gap-2",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                className: "checkbox checkbox-primary",
                type: "checkbox",
                name: "private",
                defaultChecked: problem.value.private,
                disabled: transition.isRunning,
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u4FDD\u6301\u9898\u76EE\u9690\u85CF",
              }),
            ],
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
            className: "label cursor-pointer justify-start gap-2",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                className: "checkbox checkbox-primary",
                type: "checkbox",
                name: "allowSubmit",
                defaultChecked: problem.value.allowSubmit,
                disabled: transition.isRunning,
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u5141\u8BB8\u7528\u6237\u63D0\u4EA4",
              }),
            ],
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
            className: "label cursor-pointer justify-start gap-2",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                className: "checkbox checkbox-primary",
                type: "checkbox",
                name: "lock",
                defaultChecked: isLocked.value,
                disabled: transition.isRunning || (isLocked && !isLockedBySelf),
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u9501\u5B9A\u9898\u76EE",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "tooltip h-10",
                "data-tip":
                  "\u9501\u5B9A\u540E\uFF0C\u53EA\u6709\u9501\u5B9A\u4EBA\u53EF\u4EE5\u7F16\u8F91\u672C\u9898",
                children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  "button",
                  {
                    className: "btn-link h-10 p-0",
                    type: "button",
                    children: "?",
                  }
                ),
              }),
              isLocked.value &&
                (isLockedBySelf.value
                  ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text text-success",
                      children: "\u60A8\u5DF2\u9501\u5B9A\u8BE5\u9898\u76EE",
                    })
                  : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                      className: "label-text text-error",
                      children: [
                        "\u8BE5\u9898\u76EE\u5DF2\u88AB",
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UserLink, {
                          user: problem.value.lockedBy,
                        }),
                        "\u9501\u5B9A",
                      ],
                    })),
            ],
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
        className: "form-control w-full max-w-xs",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
          className: "btn btn-primary",
          type: "submit",
          disabled:
            transition.isRunning || (isLocked.value && !isLockedBySelf.value),
          children: "\u786E\u8BA4\u4FEE\u6539",
        }),
      }),
    ],
  });
}

// app/routes/contest/tag/$tag.tsx
var tag_exports2 = {};
__export(tag_exports2, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ContestTag,
  loader: () => loader35,
  meta: () => meta17,
});
var import_react58 = require("@remix-run/react");
var import_signals_react33 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader35({ request, params }) {
  let tag = invariant(tagScheme, params.tag, { status: 404 }),
    self = await findRequestUser(request),
    [viewAll, viewPublic] = await self
      .team(null)
      .contest(null)
      .hasPermission(
        Permissions.PERM_VIEW_CONTEST,
        Permissions.PERM_VIEW_CONTEST_PUBLIC
      );
  return {
    contests: await db.contest.findMany({
      where: viewAll
        ? { team: null, tags: { some: { name: tag } } }
        : viewPublic
        ? { team: null, tags: { some: { name: tag } }, private: !1 }
        : { id: -1 },
      orderBy: [{ id: "asc" }],
      select: {
        ...selectContestListData,
      },
    }),
  };
}
var meta17 = ({ params }) => ({
  title: `\u6BD4\u8D5B\u6807\u7B7E: ${params.tag} - HITwh OJ`,
});
function ContestTag() {
  let loaderData = useSignalLoaderData(),
    contests = (0, import_signals_react33.useComputed)(
      () => loaderData.value.contests
    ),
    { tag } = (0, import_react58.useParams)();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h1", {
          children: ["\u6BD4\u8D5B\u6807\u7B7E\uFF1A", tag],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u6807\u9898",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u8D5B\u5236",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u5F00\u59CB\u65F6\u95F4",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u7ED3\u675F\u65F6\u95F4",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: contests.value.map((contest) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: contest.id,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ContestLink,
                          {
                            contest,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ContestSystemTag,
                          {
                            system: contest.system,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: formatDateTime(contest.beginTime),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: formatDateTime(contest.endTime),
                      }),
                    ],
                  },
                  contest.id
                )
              ),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/problem/tag/$tag.tsx
var tag_exports3 = {};
__export(tag_exports3, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ProblemIndex2,
  loader: () => loader36,
  meta: () => meta18,
});
var import_node37 = require("@remix-run/node"),
  import_react59 = require("@remix-run/react");
var import_signals_react34 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader36({ request, params }) {
  let tag = invariant(tagScheme, params.tag, { status: 404 }),
    self = await findRequestUser(request),
    [viewAll, viewPublic] = await self
      .team(null)
      .hasPermission(
        Permissions.PERM_VIEW_PROBLEM,
        Permissions.PERM_VIEW_PROBLEM_PUBLIC
      ),
    problems = await db.problem.findMany({
      where: viewAll
        ? { team: null, tags: { some: { name: tag } } }
        : viewPublic
        ? { team: null, tags: { some: { name: tag } }, private: !1 }
        : { id: -1 },
      orderBy: [{ id: "asc" }],
      select: {
        ...selectProblemListData,
        _count: {
          select: {
            relatedRecords: !0,
          },
        },
      },
    });
  return (0, import_node37.json)({ problems });
}
var meta18 = ({ params }) => ({
  title: `\u9898\u76EE\u6807\u7B7E: ${params.tag} - HITwh OJ`,
});
function ProblemIndex2() {
  let loaderData = useSignalLoaderData(),
    problems = (0, import_signals_react34.useComputed)(
      () => loaderData.value.problems
    ),
    params = (0, import_react59.useParams)();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h1", {
          children: ["\u9898\u76EE\u6807\u7B7E\uFF1A", params.tag],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u76EE",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u63D0\u4EA4",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: problems.value.map((problem) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: problem.id,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ProblemLink,
                          {
                            problem,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: problem._count.relatedRecords,
                      }),
                    ],
                  },
                  problem.id
                )
              ),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/problemset/index.tsx
var problemset_exports = {};
__export(problemset_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ProblemsetList,
  loader: () => loader37,
  meta: () => meta19,
});
var import_node38 = require("@remix-run/node"),
  import_react60 = require("@remix-run/react");
var import_hi30 = require("react-icons/hi");
var import_signals_react35 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime"),
  PAGE_SIZE2 = 15;
async function loader37({ request }) {
  let self = await findRequestUser(request),
    [viewAll, viewPublic, hasEditPerm] = await self
      .team(null)
      .hasPermission(
        Permissions.PERM_VIEW_PROBLEM_SET,
        Permissions.PERM_VIEW_PROBLEM_SET_PUBLIC,
        Permissions.PERM_EDIT_PROBLEM_SET
      ),
    url = new URL(request.url),
    page = invariant(pageScheme, url.searchParams.get("page") || "1"),
    totalProblemSets = await db.problemSet.count({
      where: viewAll
        ? { team: null }
        : viewPublic
        ? { team: null, private: !1 }
        : { id: -1 },
    });
  if (totalProblemSets && page > Math.ceil(totalProblemSets / PAGE_SIZE2))
    throw new Response("Page is out of range", { status: 404 });
  let problemSets = await db.problemSet.findMany({
    where: viewAll
      ? { team: null }
      : viewPublic
      ? { team: null, private: !1 }
      : { id: -1 },
    orderBy: [{ id: "asc" }],
    select: {
      id: !0,
      title: !0,
      private: !0,
      _count: {
        select: {
          problems: !0,
        },
      },
    },
    skip: (page - 1) * PAGE_SIZE2,
    take: PAGE_SIZE2,
  });
  return (0, import_node38.json)({
    problemSets,
    hasEditPerm,
    totalProblemSets,
    currentPage: page,
  });
}
var meta19 = () => ({
  title: "\u9898\u5355\u5217\u8868 - HITwh OJ",
});
function ProblemsetList() {
  let loaderData = useSignalLoaderData(),
    problemSets = (0, import_signals_react35.useComputed)(
      () => loaderData.value.problemSets
    ),
    hasEditPerm = (0, import_signals_react35.useComputed)(
      () => loaderData.value.hasEditPerm
    ),
    totalProblemSets = (0, import_signals_react35.useComputed)(
      () => loaderData.value.totalProblemSets
    ),
    currentPage = (0, import_signals_react35.useComputed)(
      () => loaderData.value.currentPage
    ),
    totalPages = (0, import_signals_react35.useComputed)(() =>
      Math.ceil(totalProblemSets.value / PAGE_SIZE2)
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h1", {
          className: "flex items-center justify-between",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u9898\u5355\u5217\u8868",
            }),
            hasEditPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                import_react60.Link,
                {
                  className: "btn btn-primary gap-2",
                  to: "new",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi30.HiOutlinePlus,
                      {
                        className: "h-4 w-4",
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u65B0\u5EFA\u9898\u5355",
                    }),
                  ],
                }
              ),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u5355",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u76EE\u6570\u91CF",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: problemSets.value.map((problemset, index2) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children:
                          index2 + 1 + (Number(currentPage) - 1) * PAGE_SIZE2,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ProblemSetLink,
                          {
                            problemset,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: problemset._count.problems,
                      }),
                    ],
                  },
                  problemset.id
                )
              ),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Pagination, {
          action: "/problemset",
          totalPages: totalPages.value,
          currentPage: currentPage.value,
        }),
      ],
    }
  );
}

// app/routes/problemset/new.tsx
var new_exports = {};
__export(new_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action14,
  default: () => ProblemSetNew,
  loader: () => loader38,
  meta: () => meta20,
});
var import_node39 = require("@remix-run/node"),
  import_react61 = require("@remix-run/react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader38({ request }) {
  let self = await findRequestUser(request);
  return (
    await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.team(null).checkPermission(Permissions.PERM_CREATE_PROBLEM_SET),
    null
  );
}
async function action14({ request }) {
  let self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.team(null).checkPermission(Permissions.PERM_CREATE_PROBLEM_SET);
  let form = await request.formData(),
    title = invariant(titleScheme, form.get("title")),
    { id: problemSetId } = await db.problemSet.create({
      data: { title },
    });
  return (0, import_node39.redirect)(`/problemset/${problemSetId}/edit`);
}
var meta20 = () => ({
  title: "\u521B\u5EFA\u9898\u5355 - HITwh OJ",
});
function ProblemSetNew() {
  let transition = useSignalTransition();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: "\u521B\u5EFA\u516C\u5171\u9898\u5355",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react61.Form, {
          method: "post",
          className: "form-control w-full max-w-xs gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u6807\u9898",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "text",
                  name: "title",
                  disabled: transition.isRunning,
                  required: !0,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "form-control",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                className: "btn btn-primary",
                type: "submit",
                disabled: transition.isRunning,
                children: "\u521B\u5EFA\u9898\u5355",
              }),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/contest/index.tsx
var contest_exports = {};
__export(contest_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ContestListIndex,
  loader: () => loader39,
  meta: () => meta21,
});
var import_signals_react36 = require("@preact/signals-react"),
  import_node40 = require("@remix-run/node"),
  import_react62 = require("@remix-run/react"),
  import_hi31 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime"),
  PAGE_SIZE3 = 15;
async function loader39({ request }) {
  let self = await findRequestUser(request),
    [hasCreatePerm] = await self
      .team(null)
      .hasPermission(Permissions.PERM_CREATE_CONTEST),
    [viewAll, viewPublic] = await self
      .team(null)
      .contest(null)
      .hasPermission(
        Permissions.PERM_VIEW_CONTEST,
        Permissions.PERM_VIEW_CONTEST_PUBLIC
      ),
    url = new URL(request.url),
    page = invariant(pageScheme, url.searchParams.get("page") || "1"),
    totalTeams = await db.contest.count({
      where: viewAll
        ? { team: null }
        : viewPublic
        ? { team: null, private: !1 }
        : { id: -1 },
    });
  if (totalTeams && page > Math.ceil(totalTeams / PAGE_SIZE3))
    throw new Response("Page is out of range", { status: 404 });
  let contests = await db.contest.findMany({
    where: viewAll
      ? { team: null }
      : viewPublic
      ? { team: null, private: !1 }
      : { id: -1 },
    orderBy: [{ id: "asc" }],
    select: {
      ...selectContestListData,
    },
    skip: (page - 1) * PAGE_SIZE3,
    take: PAGE_SIZE3,
  });
  return (0, import_node40.json)({
    contests,
    hasCreatePerm,
    totalTeams,
    currentPage: page,
  });
}
var meta21 = () => ({
  title: "\u6BD4\u8D5B\u5217\u8868 - HITwh OJ",
});
function ContestListIndex() {
  let loaderData = useSignalLoaderData(),
    contests = (0, import_signals_react36.useComputed)(
      () => loaderData.value.contests
    ),
    hasCreatePerm = (0, import_signals_react36.useComputed)(
      () => loaderData.value.hasCreatePerm
    ),
    totalTeams = (0, import_signals_react36.useComputed)(
      () => loaderData.value.totalTeams
    ),
    currentPage = (0, import_signals_react36.useComputed)(
      () => loaderData.value.currentPage
    ),
    totalPages = (0, import_signals_react36.useComputed)(() =>
      Math.ceil(totalTeams.value / PAGE_SIZE3)
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h1", {
          className: "flex items-center justify-between",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u6BD4\u8D5B\u5217\u8868",
            }),
            hasCreatePerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                import_react62.Link,
                {
                  className: "btn btn-primary gap-2",
                  to: "/contest/new",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi31.HiOutlinePlus,
                      {
                        className: "h-4 w-4",
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u65B0\u5EFA\u6BD4\u8D5B",
                    }),
                  ],
                }
              ),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u6807\u9898",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u8D5B\u5236",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u5F00\u59CB\u65F6\u95F4",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u7ED3\u675F\u65F6\u95F4",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: contests.value.map((contest) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: contest.id,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ContestLink,
                          {
                            contest,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ContestSystemTag,
                          {
                            system: contest.system,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: formatDateTime(contest.beginTime),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: formatDateTime(contest.endTime),
                      }),
                    ],
                  },
                  contest.id
                )
              ),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Pagination, {
          action: "/contest",
          totalPages: totalPages.value,
          currentPage: currentPage.value,
        }),
      ],
    }
  );
}

// app/routes/problem/index.tsx
var problem_exports3 = {};
__export(problem_exports3, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ProblemIndex3,
  loader: () => loader40,
  meta: () => meta22,
});
var import_node41 = require("@remix-run/node"),
  import_react63 = require("@remix-run/react");
var import_hi32 = require("react-icons/hi");
var import_signals_react37 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime"),
  PAGE_SIZE4 = 15;
async function loader40({ request }) {
  let self = await findRequestUser(request),
    [viewAll, viewPublic, hasCreatePerm] = await self
      .team(null)
      .hasPermission(
        Permissions.PERM_VIEW_PROBLEM,
        Permissions.PERM_VIEW_PROBLEM_PUBLIC,
        Permissions.PERM_CREATE_PROBLEM
      ),
    url = new URL(request.url),
    page = invariant(pageScheme, url.searchParams.get("page") || "1"),
    totalProblems = await db.problem.count({
      where: viewAll
        ? { team: null }
        : viewPublic
        ? { team: null, private: !1 }
        : { id: -1 },
    });
  if (totalProblems && page > Math.ceil(totalProblems / PAGE_SIZE4))
    throw new Response("Page is out of range", { status: 404 });
  let problems = await db.problem.findMany({
    where: viewAll
      ? { team: null }
      : viewPublic
      ? { team: null, private: !1 }
      : { id: -1 },
    orderBy: [{ id: "asc" }],
    select: {
      ...selectProblemListData,
      _count: {
        select: {
          relatedRecords: !0,
        },
      },
    },
    skip: (page - 1) * PAGE_SIZE4,
    take: PAGE_SIZE4,
  });
  return (0, import_node41.json)({
    problems,
    hasCreatePerm,
    totalProblems,
    currentPage: page,
  });
}
var meta22 = () => ({
  title: "\u9898\u76EE\u5217\u8868 - HITwh OJ",
});
function ProblemIndex3() {
  let loaderData = useSignalLoaderData(),
    problems = (0, import_signals_react37.useComputed)(
      () => loaderData.value.problems
    ),
    hasCreatePerm = (0, import_signals_react37.useComputed)(
      () => loaderData.value.hasCreatePerm
    ),
    totalProblems = (0, import_signals_react37.useComputed)(
      () => loaderData.value.totalProblems
    ),
    currentPage = (0, import_signals_react37.useComputed)(
      () => loaderData.value.currentPage
    ),
    totalPages = (0, import_signals_react37.useComputed)(() =>
      Math.ceil(totalProblems.value / PAGE_SIZE4)
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h1", {
          className: "flex items-center justify-between",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u9898\u76EE\u5217\u8868",
            }),
            hasCreatePerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                import_react63.Link,
                {
                  to: "/problem/new",
                  className: "btn btn-primary gap-2",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi32.HiOutlinePlus,
                      {
                        className: "h-4 w-4",
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u65B0\u5EFA\u9898\u76EE",
                    }),
                  ],
                }
              ),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u76EE",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u63D0\u4EA4",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: problems.value.map((problem) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: problem.id,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ProblemLink,
                          {
                            problem,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: problem._count.relatedRecords,
                      }),
                    ],
                  },
                  problem.id
                )
              ),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Pagination, {
          action: "/problem",
          totalPages: totalPages.value,
          currentPage: currentPage.value,
        }),
      ],
    }
  );
}

// app/routes/file/$fileId.tsx
var fileId_exports = {};
__export(fileId_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => FileIndex,
  loader: () => loader41,
});
var import_node42 = require("@remix-run/node"),
  import_react64 = require("@remix-run/react");
var import_signals_react38 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader41({ params }) {
  let fileId = invariant(uuidScheme, params.fileId, { status: 404 }),
    file = await db.file.findUnique({
      where: { id: fileId },
      select: { filename: !0 },
    });
  if (!file) throw new Response("File not found", { status: 404 });
  return (0, import_node42.json)({ filename: file.filename });
}
function FileIndex() {
  let loaderData = useSignalLoaderData(),
    filename = (0, import_signals_react38.useComputed)(
      () => loaderData.value.filename
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: filename.value,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react64.Outlet, {}),
      ],
    }
  );
}

// app/routes/file/$fileId/$filename.tsx
var filename_exports = {};
__export(filename_exports, {
  loader: () => loader42,
});
var WHITELIST = ["video/", "audio/", "text/plain", "image/", "application/pdf"];
function parseRange(range, filesize) {
  if (!range.startsWith("bytes=")) return !1;
  let bytes = range.slice(6),
    match = /^(\d+)-(\d*)$/.exec(bytes);
  if (!match) return !1;
  let start = parseInt(match[1]),
    end = match[2] ? parseInt(match[2]) : filesize - 1;
  return start < 0 || start > end || end >= filesize ? !1 : [start, end];
}
async function loader42({ request, params }) {
  let fileId = invariant(uuidScheme, params.fileId, { status: 404 }),
    file = await db.file.findUnique({
      where: { id: fileId },
      select: { id: !0, filesize: !0, mimetype: !0, filename: !0 },
    });
  if (!file) throw new Response("File not found", { status: 404 });
  let filepath = `/file/${file.id}`,
    headers = new Headers();
  if (
    (headers.set("Accept-Ranges", "bytes"),
    WHITELIST.some((prefix) => file.mimetype.startsWith(prefix)) ||
      (headers.set("Content-Security-Policy", "default-src 'none'"),
      headers.set("X-Content-Type-Options", "nosniff")),
    request.headers.has("Range"))
  ) {
    let range = request.headers.get("Range"),
      result = parseRange(range, file.filesize);
    if (!result)
      throw (
        (headers.set("Content-Range", `bytes */${file.filesize}`),
        new Response("Invalid range", { status: 416, headers }))
      );
    let [start, end] = result;
    return (
      headers.set("Content-Type", file.mimetype),
      headers.set("Content-Range", `bytes ${start}-${end}/${file.filesize}`),
      new Response(await s3.readFilePartial(filepath, start, end - start + 1), {
        status: 206,
        headers,
      })
    );
  } else
    return (
      headers.set("Content-Type", file.mimetype),
      headers.set("Cache-Control", "public, max-age=31536000"),
      headers.set("Content-Disposition", "inline"),
      new Response(await s3.readFile(filepath), { headers })
    );
}

// app/routes/file/$fileId/index.tsx
var fileId_exports2 = {};
__export(fileId_exports2, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => FileIndex2,
  loader: () => loader43,
  meta: () => meta23,
});
var import_node43 = require("@remix-run/node"),
  import_react65 = require("@remix-run/react");
var import_hi33 = require("react-icons/hi");
var import_signals_react39 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader43({ params }) {
  let fileId = invariant(uuidScheme, params.fileId, { status: 404 }),
    file = await db.file.findUnique({
      where: { id: fileId },
      select: {
        id: !0,
        mimetype: !0,
        filename: !0,
      },
    });
  if (!file) throw new Response("File not found", { status: 404 });
  return (0, import_node43.json)({ file });
}
var meta23 = ({ data: data2 }) => ({
  title: `\u6587\u4EF6: ${
    data2 == null ? void 0 : data2.file.filename
  } - HITwh OJ`,
});
function FileIndex2() {
  let loaderData = useSignalLoaderData(),
    file = (0, import_signals_react39.useComputed)(() => loaderData.value.file),
    filelink = (0, import_signals_react39.useComputed)(
      () => `/file/${file.value.id}/${file.value.filename}`
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        file.value.mimetype.startsWith("audio/")
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("audio", {
              controls: !0,
              src: filelink.value,
              style: { maxWidth: "100%" },
            })
          : file.value.mimetype.startsWith("video/")
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("video", {
              controls: !0,
              src: filelink.value,
              style: { maxHeight: "80vh", maxWidth: "100%" },
            })
          : file.value.mimetype.startsWith("image/")
          ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("img", {
              src: filelink.value,
              alt: file.value.filename,
            })
          : null,
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", {
          className: "flex gap-4",
          children: [
            file.value.mimetype === "application/pdf" &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                import_react65.Link,
                {
                  to: filelink.value,
                  className: "btn btn-primary gap-2",
                  reloadDocument: !0,
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi33.HiOutlineArrowsExpand,
                      {}
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u5728\u6807\u7B7E\u9875\u4E2D\u6253\u5F00",
                    }),
                  ],
                }
              ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react65.Link, {
              className: "btn btn-primary gap-2",
              to: filelink.value,
              target: "_blank",
              rel: "noreferrer noopener",
              "aria-label": "download",
              download: !0,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_hi33.HiOutlineDownload,
                  {}
                ),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                  children: "\u4E0B\u8F7D",
                }),
              ],
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/problem/data.tsx
var data_exports2 = {};
__export(data_exports2, {
  loader: () => loader44,
});
var import_node44 = require("@remix-run/node");
async function loader44({ request }) {
  let self = await findRequestUser(request),
    [viewAll, viewPublic] = await self
      .team(null)
      .hasPermission(
        Permissions.PERM_VIEW_PROBLEM,
        Permissions.PERM_VIEW_PROBLEM_PUBLIC
      ),
    problems = await db.problem.findMany({
      where: viewAll
        ? { team: null }
        : viewPublic
        ? { team: null, private: !1 }
        : { id: -1 },
      orderBy: [{ id: "asc" }],
      select: {
        id: !0,
        title: !0,
        tags: { select: { name: !0 } },
      },
    });
  return (0, import_node44.json)({ problems });
}

// app/routes/record/index.tsx
var record_exports = {};
__export(record_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => RecordList,
  loader: () => loader45,
  meta: () => meta24,
});
var import_signals_react40 = require("@preact/signals-react"),
  import_node45 = require("@remix-run/node"),
  import_react66 = require("@remix-run/react"),
  import_hi34 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime"),
  PAGE_SIZE5 = 15;
async function loader45({ request }) {
  let url = new URL(request.url),
    uid = invariant(nullableIdScheme, url.searchParams.get("uid")),
    pid = invariant(nullableIdScheme, url.searchParams.get("pid")),
    cid = invariant(nullableIdScheme, url.searchParams.get("cid")),
    page = invariant(pageScheme, url.searchParams.get("page") || "1"),
    totalRecords = await db.record.count({
      where: {
        contestId: cid || null,
        submitterId: uid || void 0,
        problemId: pid || void 0,
      },
    });
  if (totalRecords && page > Math.ceil(totalRecords / PAGE_SIZE5))
    throw new Response("Page is out of range", { status: 404 });
  let records = await db.record.findMany({
    where: {
      contestId: cid || null,
      submitterId: uid || void 0,
      problemId: pid || void 0,
    },
    orderBy: [{ id: "desc" }],
    skip: (page - 1) * PAGE_SIZE5,
    take: PAGE_SIZE5,
    select: {
      id: !0,
      status: !0,
      submittedAt: !0,
      problem: {
        select: {
          id: !0,
          title: !0,
          private: !0,
        },
      },
      submitter: {
        select: {
          ...selectUserData,
        },
      },
    },
  });
  return (0, import_node45.json)(
    { records, totalRecords, currentPage: page, uid, pid, cid },
    { status: 200 }
  );
}
var meta24 = () => ({
  title: "\u8BC4\u6D4B\u8BB0\u5F55 - HITwh OJ",
});
function RecordList() {
  let loaderData = useSignalLoaderData(),
    records = (0, import_signals_react40.useComputed)(
      () => loaderData.value.records
    ),
    totalRecords = (0, import_signals_react40.useComputed)(
      () => loaderData.value.totalRecords
    ),
    currentPage = (0, import_signals_react40.useComputed)(
      () => loaderData.value.currentPage
    ),
    uid = (0, import_signals_react40.useComputed)(() => loaderData.value.uid),
    pid = (0, import_signals_react40.useComputed)(() => loaderData.value.pid),
    cid = (0, import_signals_react40.useComputed)(() => loaderData.value.cid),
    totalPages = (0, import_signals_react40.useComputed)(() =>
      Math.ceil(totalRecords.value / PAGE_SIZE5)
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: "\u8BC4\u6D4B\u8BB0\u5F55",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react66.Form, {
          className: "flex flex-row flex-wrap items-end justify-between gap-4",
          method: "get",
          action: "/record",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control flex-1",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u7531\u7528\u6237",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  type: "text",
                  className: "input input-bordered",
                  name: "uid",
                  defaultValue: uid.value || "",
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control flex-1",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u7531\u9898\u76EE",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  type: "text",
                  className: "input input-bordered",
                  name: "pid",
                  defaultValue: pid.value || "",
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control flex-1",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u7531\u6BD4\u8D5B",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  type: "text",
                  className: "input input-bordered",
                  name: "cid",
                  defaultValue: cid.value || "",
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
              className: "btn btn-primary gap-2",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_hi34.HiOutlineFilter,
                  {}
                ),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                  children: "\u8FC7\u6EE4",
                }),
              ],
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u72B6\u6001",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "hidden md:table-cell",
                    children: "\u9898\u76EE",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u7528\u6237",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "hidden xl:table-cell",
                    children: "\u63D0\u4EA4\u65F6\u95F4",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: records.value.map((record) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: record.id,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          import_react66.Link,
                          {
                            to: `/record/${record.id}`,
                            children: /* @__PURE__ */ (0,
                            import_jsx_runtime.jsx)(RecordStatus, {
                              status: record.status,
                            }),
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        className: "hidden md:table-cell",
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ProblemLink,
                          {
                            problem: record.problem,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          UserLink,
                          {
                            user: record.submitter,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        className: "hidden xl:table-cell",
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          "span",
                          {
                            className: "tooltip",
                            "data-tip": formatDateTime(record.submittedAt),
                            children: formatRelativeDateTime(
                              record.submittedAt
                            ),
                          }
                        ),
                      }),
                    ],
                  },
                  record.id
                )
              ),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Pagination, {
          action: `/record?uid=${uid.value || ""}&pid=${pid.value || ""}&cid=${
            cid.value || ""
          }`,
          totalPages: totalPages.value,
          currentPage: currentPage.value,
        }),
      ],
    }
  );
}

// app/routes/team/$teamId.tsx
var teamId_exports = {};
__export(teamId_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => Record,
  loader: () => loader46,
});
var import_react67 = require("@remix-run/react");
var import_node46 = require("@remix-run/node");
var import_hi35 = require("react-icons/hi");
var import_signals_react41 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader46({ request, params }) {
  let teamId = invariant(idScheme, params.teamId, { status: 404 }),
    self = await findRequestUser(request),
    [hasViewPerm, hasEditPerm] = await self
      .team(teamId)
      .hasPermission(
        Permissions.PERM_TEAM_VIEW_INTERNAL,
        Permissions.PERM_TEAM_EDIT_INTERNAL
      ),
    team = await db.team.findUnique({
      where: { id: teamId },
      select: { name: !0 },
    });
  if (!team)
    throw new Response("\u56E2\u961F\u4E0D\u5B58\u5728", { status: 404 });
  return (0, import_node46.json)({ team, hasViewPerm, hasEditPerm });
}
function Record() {
  let loaderData = useSignalLoaderData(),
    team = (0, import_signals_react41.useComputed)(() => loaderData.value.team),
    hasEditPerm = (0, import_signals_react41.useComputed)(
      () => loaderData.value.hasEditPerm
    ),
    hasViewPerm = (0, import_signals_react41.useComputed)(
      () => loaderData.value.hasViewPerm
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h1", {
          className: "flex items-center gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_hi35.HiOutlineUserGroup,
              {
                className: "shrink-0",
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: team.value.name,
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "not-prose tabs tabs-boxed bg-base-100",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_react67.NavLink,
              {
                className: "tab",
                to: "profile",
                children: "\u4FE1\u606F",
              }
            ),
            hasViewPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react67.NavLink,
                {
                  className: "tab",
                  to: "members",
                  children: "\u6210\u5458",
                }
              ),
            hasViewPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react67.NavLink,
                {
                  className: "tab",
                  to: "contest",
                  children: "\u6BD4\u8D5B",
                }
              ),
            hasEditPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react67.NavLink,
                {
                  className: "tab",
                  to: "settings",
                  children: "\u8BBE\u7F6E",
                }
              ),
            hasViewPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react67.NavLink,
                {
                  className: "tab",
                  to: "problemset",
                  children: "\u9898\u5355",
                }
              ),
            hasViewPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react67.NavLink,
                {
                  className: "tab",
                  to: "problem",
                  children: "\u9898\u76EE",
                }
              ),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react67.Outlet, {}),
      ],
    }
  );
}

// app/routes/team/$teamId/problemset/$problemSetId.tsx
var problemSetId_exports3 = {};
__export(problemSetId_exports3, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => Problemset2,
  loader: () => loader47,
});
var import_signals_react42 = require("@preact/signals-react"),
  import_node47 = require("@remix-run/node"),
  import_react68 = require("@remix-run/react"),
  import_hi36 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader47({ request, params }) {
  let teamId = invariant(idScheme, params.teamId, { status: 404 }),
    problemSetId = invariant(idScheme, params.problemSetId, {
      status: 404,
    }),
    team = (await findRequestUser(request)).team(teamId);
  await team.checkPermission(
    (await findProblemSetPrivacy(problemSetId))
      ? Permissions.PERM_VIEW_PROBLEM_SET
      : Permissions.PERM_VIEW_PROBLEM_SET_PUBLIC
  );
  let [hasEditPerm] = await team.hasPermission(
      Permissions.PERM_EDIT_PROBLEM_SET
    ),
    problemSet = await db.problemSet.findUnique({
      where: { id: problemSetId },
      select: {
        title: !0,
        description: !0,
        private: !0,
        teamId: !0,
        tags: { select: { name: !0 } },
      },
    });
  if (!problemSet) throw new Response("Problem Set not found", { status: 404 });
  return (0, import_node47.json)({ problemSet, hasEditPerm });
}
function Problemset2() {
  let loaderData = useSignalLoaderData(),
    problemSet = (0, import_signals_react42.useComputed)(
      () => loaderData.value.problemSet
    ),
    hasEditPerm = (0, import_signals_react42.useComputed)(
      () => loaderData.value.hasEditPerm
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
          children: problemSet.value.title,
        }),
        (problemSet.value.tags.length > 0 || problemSet.value.private) &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className: "not-prose flex flex-wrap gap-2",
            children: [
              problemSet.value.private &&
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                  className: "badge badge-warning gap-1",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi36.HiOutlineEyeOff,
                      {}
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u9690\u85CF",
                    }),
                  ],
                }),
              problemSet.value.tags.map(({ name }) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  import_react68.Link,
                  {
                    className: "badge gap-1",
                    to: `team/$teamId/problemset/tag/${name}`,
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                        import_hi36.HiOutlineTag,
                        {}
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                        children: name,
                      }),
                    ],
                  },
                  name
                )
              ),
            ],
          }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", {
          className: "not-prose tabs tabs-boxed bg-base-100",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_react68.NavLink,
              {
                className: "tab",
                to: "problem",
                children: "\u8BE6\u60C5",
              }
            ),
            hasEditPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react68.NavLink,
                {
                  className: "tab",
                  to: "edit",
                  children: "\u7F16\u8F91",
                }
              ),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react68.Outlet, {}),
      ],
    }
  );
}

// app/routes/team/$teamId/problemset/$problemSetId/problem.tsx
var problem_exports4 = {};
__export(problem_exports4, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ProblemSetIndex2,
  loader: () => loader48,
});
var import_signals_react43 = require("@preact/signals-react"),
  import_node48 = require("@remix-run/node");
var import_jsx_runtime = require("react/jsx-runtime"),
  PAGE_SIZE6 = 15;
async function loader48({ request, params }) {
  var _a2;
  let teamId = await invariant(idScheme, params.teamId, { status: 404 }),
    problemSetId = invariant(idScheme, params.problemSetId, {
      status: 404,
    });
  await (await findRequestUser(request))
    .team(teamId)
    .checkPermission(
      (await findProblemSetPrivacy(problemSetId))
        ? Permissions.PERM_VIEW_PROBLEM_SET
        : Permissions.PERM_VIEW_PROBLEM_SET_PUBLIC
    );
  let url = new URL(request.url),
    page = invariant(pageScheme, url.searchParams.get("page") || "1"),
    problemSet = await db.problemSet.findUnique({
      where: { id: problemSetId },
      select: {
        id: !0,
        title: !0,
        description: !0,
        tags: !0,
        _count: {
          select: {
            problems: !0,
          },
        },
        problems: {
          orderBy: { rank: "asc" },
          select: {
            rank: !0,
            problem: {
              select: {
                ...selectProblemListData,
              },
            },
          },
          skip: (page - 1) * PAGE_SIZE6,
          take: PAGE_SIZE6,
        },
      },
    }),
    totalProblems =
      ((_a2 = problemSet == null ? void 0 : problemSet._count) == null
        ? void 0
        : _a2.problems) || 0;
  if (totalProblems && page > Math.ceil(totalProblems / PAGE_SIZE6))
    throw new Response("Page is out of range", { status: 404 });
  if (!problemSet) throw new Response("Problem Set not found", { status: 404 });
  return (0, import_node48.json)({
    problemSet,
    totalProblems,
    currentPage: page,
  });
}
function ProblemSetIndex2() {
  let loaderData = useSignalLoaderData(),
    problemSet = (0, import_signals_react43.useComputed)(
      () => loaderData.value.problemSet
    ),
    totalProblems = (0, import_signals_react43.useComputed)(
      () => loaderData.value.totalProblems
    ),
    currentPage = (0, import_signals_react43.useComputed)(
      () => loaderData.value.currentPage
    ),
    totalPages = (0, import_signals_react43.useComputed)(() =>
      Math.ceil(totalProblems.value / PAGE_SIZE6)
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Markdown, {
          children: problemSet.value.description,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u76EE",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: problemSet.value.problems.map((problem) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        className: "text-center",
                        children: problem.rank,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ProblemLink,
                          {
                            problem: problem.problem,
                          }
                        ),
                      }),
                    ],
                  },
                  problem.problem.id
                )
              ),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Pagination, {
          action: `/problemset/${problemSet.value.id}/problem`,
          totalPages: totalPages.value,
          currentPage: currentPage.value,
        }),
      ],
    }
  );
}

// app/routes/team/$teamId/problemset/$problemSetId/index.tsx
var problemSetId_exports4 = {};
__export(problemSetId_exports4, {
  loader: () => loader49,
});
var import_node49 = require("@remix-run/node");
function loader49({ params }) {
  return (0, import_node49.redirect)(
    `/team/${params.teamId}/problemset/${params.problemSetId}/problem`
  );
}

// app/routes/team/$teamId/problemset/$problemSetId/edit.tsx
var edit_exports4 = {};
__export(edit_exports4, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action15,
  default: () => ProblemSetEdit2,
  loader: () => loader50,
  meta: () => meta25,
});
var import_signals_react45 = require("@preact/signals-react"),
  import_node50 = require("@remix-run/node"),
  import_react70 = require("@remix-run/react"),
  import_react71 = require("react");

// app/src/problem/TeamProblemEditor.tsx
var import_hi38 = require("react-icons/hi");

// app/src/problem/TeamProblemEditorCreator.tsx
var import_signals_react44 = require("@preact/signals-react"),
  import_react69 = require("react"),
  import_hi37 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime");
function ProblemEditorCreator2(props) {
  let fetcher = useSignalFetcher(),
    Toasts = useToasts(),
    problems = (0, import_signals_react44.useSignal)([]);
  (0, import_react69.useEffect)(() => {
    let controller = new AbortController(),
      signal4 = controller.signal;
    return (
      fetch(`/team/${props.teamId}/problem/data`, { signal: signal4 })
        .then((res) => res.json())
        .then((data2) => (problems.value = data2.problems)),
      () => controller.abort()
    );
  }, []);
  let filter10 = (0, import_signals_react44.useSignal)(""),
    available = (0, import_signals_react44.useComputed)(() =>
      problems.value.filter(({ id }) => !props.existProblem.includes(id))
    ),
    datalist = (0, import_signals_react44.useComputed)(() =>
      available.value.filter(
        ({ title, tags, id }) =>
          id.toString().includes(filter10.value) ||
          title.includes(filter10.value) ||
          tags.some(({ name }) => name.includes(filter10.value))
      )
    ),
    selected = (0, import_signals_react44.useComputed)(() => {
      let index2 = filter10.value.indexOf(".");
      if (index2 === -1) return 0;
      let id = parseInt(filter10.value.slice(0, index2));
      return available.value.some((p2) => p2.id === id) ? id : 0;
    });
  return (
    (0, import_react69.useEffect)(() => {
      fetcher.actionSuccess &&
        ((filter10.value = ""), Toasts.success("\u66F4\u65B0\u6210\u529F"));
    }, [fetcher.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(fetcher.Form, {
      method: "post",
      className: "not-prose inline-flex gap-4",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
          type: "hidden",
          name: "pid",
          value: selected.value,
          required: !0,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
          className: "input-group",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "dropdown",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  placeholder: "\u641C\u7D22\u9898\u76EE...",
                  list: "search-problem",
                  value: filter10.value,
                  disabled: fetcher.isRunning,
                  onChange: (event) => (filter10.value = event.target.value),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("datalist", {
                  id: "search-problem",
                  children: datalist.value.map(({ id, title }) =>
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      "option",
                      {
                        value: `${id}. ${title}`,
                      },
                      id
                    )
                  ),
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
              className: "btn gap-2",
              type: "submit",
              name: "_action",
              value: props.createAction,
              disabled: fetcher.isRunning || !selected,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_hi37.HiOutlinePlus,
                  {}
                ),
                "\u6DFB\u52A0\u56E2\u961F\u9898\u76EE",
              ],
            }),
          ],
        }),
      ],
    })
  );
}

// app/src/problem/TeamProblemEditor.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function ProblemEditorOperations2(props) {
  let fetcher = useSignalFetcher();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(fetcher.Form, {
    method: "post",
    className: "inline-flex gap-2",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
        type: "hidden",
        name: "pid",
        value: props.pid,
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
        className: "btn btn-primary btn-error btn-square btn-sm",
        type: "submit",
        name: "_action",
        value: props.deleteAction,
        disabled: fetcher.isRunning,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi38.HiOutlineTrash,
          {}
        ),
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
        className: "btn btn-ghost btn-square btn-sm",
        type: "submit",
        name: "_action",
        value: props.moveUpAction,
        disabled: props.first || fetcher.isRunning,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi38.HiOutlineChevronUp,
          {}
        ),
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
        className: "btn btn-ghost btn-square btn-sm",
        type: "submit",
        name: "_action",
        value: props.moveDownAction,
        disabled: props.last || fetcher.isRunning,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi38.HiOutlineChevronDown,
          {}
        ),
      }),
    ],
  });
}
function TeamProblemEditor(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ProblemEditorCreator2, {
          teamId: props.teamId,
          createAction: props.createAction,
          existProblem: props.problems.map(({ id }) => id),
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u56E2\u961F\u9898\u76EE",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16 text-center",
                    children: "\u64CD\u4F5C",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: props.problems.map((problem, index2) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: problem.id,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ProblemLink,
                          {
                            problem,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ProblemEditorOperations2,
                          {
                            pid: problem.id,
                            first: index2 === 0,
                            last: index2 === props.problems.length - 1,
                            deleteAction: props.deleteAction,
                            moveUpAction: props.moveUpAction,
                            moveDownAction: props.moveDownAction,
                          }
                        ),
                      }),
                    ],
                  },
                  problem.id
                )
              ),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/team/$teamId/problemset/$problemSetId/edit.tsx
var import_jsx_runtime = require("react/jsx-runtime");
async function loader50({ request, params }) {
  let teamId = await invariant(idScheme, params.teamId, { status: 404 }),
    problemSetId = await invariant(idScheme, params.problemSetId, {
      status: 404,
    }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.team(teamId).checkPermission(Permissions.PERM_EDIT_PROBLEM_SET);
  let problemSet = await db.problemSet.findUnique({
    where: { id: problemSetId },
    select: {
      id: !0,
      title: !0,
      description: !0,
      private: !0,
      tags: !0,
      problems: {
        orderBy: { rank: "asc" },
        select: {
          problem: {
            select: {
              ...selectProblemListData,
            },
          },
        },
      },
    },
  });
  if (!problemSet) throw new Response("Problem Set not found", { status: 404 });
  return (0, import_node50.json)({ problemSet, teamId });
}
async function action15({ request, params }) {
  let problemSetId = await invariant(idScheme, params.problemSetId, {
      status: 404,
    }),
    teamId = await invariant(idScheme, params.teamId, { status: 404 });
  await (await findRequestUser(request))
    .team(teamId)
    .checkPermission(Permissions.PERM_EDIT_PROBLEM_SET);
  let form = await request.formData(),
    _action = form.get("_action");
  switch (_action) {
    case "createProblem" /* CreateProblem */: {
      let problemId = await invariant(idScheme, form.get("pid"));
      return (
        await db.$transaction(async (db2) => {
          let {
            _max: { rank },
          } = await db2.problemSetProblem.aggregate({
            where: { problemSetId },
            _max: { rank: !0 },
          });
          await db2.problemSetProblem.create({
            data: {
              problemSetId,
              problemId,
              rank: (rank ?? 0) + 1,
            },
          });
        }),
        null
      );
    }
    case "deleteProblem" /* DeleteProblem */: {
      let problemId = invariant(idScheme, form.get("pid"));
      return (
        await db.$transaction(async () => {
          let { rank } = await db.problemSetProblem.delete({
            where: {
              problemSetId_problemId: {
                problemSetId,
                problemId,
              },
            },
          });
          await db.problemSetProblem.updateMany({
            where: { rank: { gte: rank } },
            data: { rank: { decrement: 1 } },
          });
        }),
        null
      );
    }
    case "moveProblemUp" /* MoveProblemUp */:
    case "moveProblemDown" /* MoveProblemDown */: {
      let problemId = invariant(idScheme, form.get("pid"));
      return (
        await db.$transaction(async (db2) => {
          let problem = await db2.problemSetProblem.findUnique({
            where: {
              problemSetId_problemId: {
                problemSetId,
                problemId,
              },
            },
          });
          if (!problem)
            throw new Response("\u9898\u76EE\u4E0D\u5B58\u5728", {
              status: 404,
            });
          let { rank } = problem,
            target = await db2.problemSetProblem.findUnique({
              where: {
                problemSetId_rank: {
                  problemSetId,
                  rank:
                    _action === "moveProblemUp" /* MoveProblemUp */
                      ? rank - 1
                      : rank + 1,
                },
              },
            });
          if (!target)
            throw new Response("\u79FB\u52A8\u5931\u8D25", { status: 400 });
          await db2.problemSetProblem.delete({
            where: {
              problemSetId_problemId: {
                problemSetId,
                problemId,
              },
            },
          }),
            await db2.problemSetProblem.delete({
              where: {
                problemSetId_problemId: {
                  problemSetId,
                  problemId: target.problemId,
                },
              },
            }),
            await db2.problemSetProblem.createMany({
              data: [
                {
                  problemSetId,
                  problemId: target.problemId,
                  rank,
                },
                {
                  problemSetId,
                  problemId,
                  rank:
                    rank +
                    (_action === "moveProblemUp" /* MoveProblemUp */ ? -1 : 1),
                },
              ],
            });
        }),
        null
      );
    }
    case "updateInformation" /* UpdateInformation */: {
      let title = invariant(titleScheme, form.get("title")),
        description = invariant(descriptionScheme, form.get("description")),
        priv = form.has("private"),
        tags = form.getAll("tag").map((tag) => invariant(tagScheme, tag));
      return (
        await db.$transaction(async (db2) => {
          let problemset = await db2.problemSet.update({
            where: { id: problemSetId },
            data: {
              title,
              description,
              private: priv,
            },
            select: { tags: { select: { name: !0 } } },
          });
          await db2.problemSet.update({
            where: { id: problemSetId },
            data: {
              tags: {
                connectOrCreate: tags
                  .filter(
                    (tag) => !problemset.tags.some((t2) => t2.name === tag)
                  )
                  .map((tag) => ({
                    where: { name: tag },
                    create: { name: tag },
                  })),
                disconnect: problemset.tags
                  .filter((tag) => !tags.includes(tag.name))
                  .map((tag) => ({ name: tag.name })),
              },
            },
          });
        }),
        null
      );
    }
  }
  throw new Response("I'm a teapot", { status: 418 });
}
var meta25 = ({ data: data2 }) => ({
  title: `\u7F16\u8F91\u9898\u5355: ${
    data2 == null ? void 0 : data2.problemSet.title
  } - HITwh OJ`,
});
function ProblemSetEdit2() {
  let loaderData = useSignalLoaderData(),
    problemSet = (0, import_signals_react45.useComputed)(
      () => loaderData.value.problemSet
    ),
    transition = useSignalTransition(),
    Toasts = useToasts();
  return (
    (0, import_react71.useEffect)(() => {
      transition.actionSuccess && Toasts.success("\u66F4\u65B0\u6210\u529F");
    }, [transition.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h3", {
          children: "\u7F16\u8F91\u56E2\u961F\u9898\u5355\u4FE1\u606F",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react70.Form, {
          method: "post",
          className: "form-control gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u6807\u9898",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "text",
                  name: "title",
                  defaultValue: problemSet.value.title,
                  disabled: transition.isRunning,
                  required: !0,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TagsEditor, {
              label: "\u9898\u5355\u6807\u7B7E",
              name: "tag",
              defaultTags: problemSet.value.tags.map(({ name }) => name),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u7B80\u4ECB",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MarkdownEditor, {
                  name: "description",
                  defaultValue: problemSet.value.description,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "form-control",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
                className: "label cursor-pointer justify-start gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                    className: "checkbox checkbox-primary",
                    type: "checkbox",
                    name: "private",
                    defaultChecked: problemSet.value.private,
                    disabled: transition.isRunning,
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                    className: "label-text",
                    children: "\u4FDD\u6301\u9898\u5355\u9690\u85CF",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "form-control w-full max-w-xs",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                className: "btn btn-primary",
                type: "submit",
                name: "_action",
                value: "updateInformation" /* UpdateInformation */,
                disabled: transition.isRunning,
                children: "\u786E\u8BA4\u4FEE\u6539",
              }),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h3", {
          children: "\u9898\u76EE",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TeamProblemEditor, {
          teamId: loaderData.value.teamId,
          problems: problemSet.value.problems.map(({ problem }) => problem),
          createAction: "createProblem" /* CreateProblem */,
          deleteAction: "deleteProblem" /* DeleteProblem */,
          moveUpAction: "moveProblemUp" /* MoveProblemUp */,
          moveDownAction: "moveProblemDown" /* MoveProblemDown */,
        }),
      ],
    })
  );
}

// app/routes/team/$teamId/problemset/tag/$tag.tsx
var tag_exports4 = {};
__export(tag_exports4, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ProblemSetTag2,
  loader: () => loader51,
});
var import_signals_react46 = require("@preact/signals-react"),
  import_node51 = require("@remix-run/node"),
  import_react73 = require("@remix-run/react");

// app/src/problemset/TeamProblemSetLink.tsx
var import_react72 = require("@remix-run/react"),
  import_hi39 = require("react-icons/hi"),
  import_jsx_runtime = require("react/jsx-runtime");
function TeamProblemSetLink({ problemset, teamId }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react72.Link, {
    className: "link inline-flex items-center gap-2",
    to: `/team/${teamId}/problemset/${problemset.id}`,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
        children: problemset.title,
      }),
      problemset.private &&
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi39.HiOutlineEyeOff,
          {
            className: "inline-block",
          }
        ),
    ],
  });
}

// app/routes/team/$teamId/problemset/tag/$tag.tsx
var import_jsx_runtime = require("react/jsx-runtime");
async function loader51({ request, params }) {
  let teamId = invariant(idScheme, params.teamId, { status: 404 }),
    tag = invariant(tagScheme, params.tag, { status: 404 }),
    self = await findRequestUser(request),
    [viewAll, viewPublic] = await self
      .team(teamId)
      .hasPermission(
        Permissions.PERM_VIEW_PROBLEM_SET,
        Permissions.PERM_VIEW_PROBLEM_SET_PUBLIC
      ),
    problemSets = await db.problemSet.findMany({
      where: viewAll
        ? { teamId, tags: { some: { name: tag } } }
        : viewPublic
        ? { teamId, tags: { some: { name: tag } }, private: !1 }
        : { id: -1 },
      orderBy: { id: "asc" },
      select: {
        id: !0,
        title: !0,
        private: !0,
        _count: {
          select: {
            problems: !0,
          },
        },
      },
    });
  if (!problemSets.length)
    throw new Response("Problem Set Tag not found", { status: 404 });
  return (0, import_node51.json)({ problemSets, teamId });
}
function ProblemSetTag2() {
  let { tag } = (0, import_react73.useParams)(),
    loaderData = useSignalLoaderData(),
    problemSets = (0, import_signals_react46.useComputed)(
      () => loaderData.value.problemSets
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h1", {
          children: ["\u9898\u5355\u6807\u7B7E\uFF1A", tag],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u5355",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u76EE\u6570\u91CF",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: problemSets.value.map((problemset) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: problemset.id,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          TeamProblemSetLink,
                          {
                            problemset,
                            teamId: loaderData.value.teamId,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: problemset._count.problems,
                      }),
                    ],
                  },
                  problemset.id
                )
              ),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/team/$teamId/problemset/index.tsx
var problemset_exports2 = {};
__export(problemset_exports2, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ProblemsetList2,
  loader: () => loader52,
  meta: () => meta26,
});
var import_signals_react47 = require("@preact/signals-react"),
  import_node52 = require("@remix-run/node"),
  import_react74 = require("@remix-run/react"),
  import_hi40 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime"),
  PAGE_SIZE7 = 15;
async function loader52({ request, params }) {
  let self = await findRequestUser(request),
    teamId = await invariant(idScheme, params.teamId, { status: 404 }),
    [viewAll, viewPublic, hasEditPerm] = await self
      .team(teamId)
      .hasPermission(
        Permissions.PERM_VIEW_PROBLEM_SET,
        Permissions.PERM_VIEW_PROBLEM_SET_PUBLIC,
        Permissions.PERM_EDIT_PROBLEM_SET
      ),
    url = new URL(request.url),
    page = invariant(pageScheme, url.searchParams.get("page") || "1"),
    totalProblemSets = await db.problemSet.count({
      where: viewAll
        ? { teamId }
        : viewPublic
        ? { teamId, private: !1 }
        : { id: -1 },
    });
  if (totalProblemSets && page > Math.ceil(totalProblemSets / PAGE_SIZE7))
    throw new Response("Page is out of range", { status: 404 });
  let problemSets = await db.problemSet.findMany({
    where: viewAll
      ? { teamId }
      : viewPublic
      ? { teamId, private: !1 }
      : { id: -1 },
    orderBy: [{ id: "asc" }],
    select: {
      id: !0,
      title: !0,
      private: !0,
      _count: {
        select: {
          problems: !0,
        },
      },
    },
    skip: (page - 1) * PAGE_SIZE7,
    take: PAGE_SIZE7,
  });
  return (0, import_node52.json)({
    problemSets,
    hasEditPerm,
    totalProblemSets,
    currentPage: page,
    teamId,
  });
}
var meta26 = () => ({
  title: "\u56E2\u961F\u9898\u5355 - HITwh OJ",
});
function ProblemsetList2() {
  let loaderData = useSignalLoaderData(),
    problemSets = (0, import_signals_react47.useComputed)(
      () => loaderData.value.problemSets
    ),
    hasEditPerm = (0, import_signals_react47.useComputed)(
      () => loaderData.value.hasEditPerm
    ),
    totalProblemSets = (0, import_signals_react47.useComputed)(
      () => loaderData.value.totalProblemSets
    ),
    currentPage = (0, import_signals_react47.useComputed)(
      () => loaderData.value.currentPage
    ),
    totalPages = (0, import_signals_react47.useComputed)(() =>
      Math.ceil(totalProblemSets.value / PAGE_SIZE7)
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h2", {
          className: "flex items-center justify-between",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u9898\u5355\u5217\u8868",
            }),
            hasEditPerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                import_react74.Link,
                {
                  className: "btn btn-primary gap-2",
                  to: "new",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi40.HiOutlinePlus,
                      {
                        className: "h-4 w-4",
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u65B0\u5EFA\u9898\u5355",
                    }),
                  ],
                }
              ),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u5355",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u76EE\u6570\u91CF",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: problemSets.value.map((problemset, index2) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children:
                          index2 + 1 + (Number(currentPage) - 1) * PAGE_SIZE7,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          TeamProblemSetLink,
                          {
                            problemset,
                            teamId: loaderData.value.teamId,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: problemset._count.problems,
                      }),
                    ],
                  },
                  problemset.id
                )
              ),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Pagination, {
          action: "/problemset",
          totalPages: totalPages.value,
          currentPage: currentPage.value,
        }),
      ],
    }
  );
}

// app/routes/team/$teamId/problemset/new.tsx
var new_exports2 = {};
__export(new_exports2, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action16,
  default: () => ProblemSetNew2,
  loader: () => loader53,
  meta: () => meta27,
});
var import_node53 = require("@remix-run/node"),
  import_react75 = require("@remix-run/react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader53({ request, params }) {
  let teamId = await invariant(idScheme, params.teamId, { status: 404 }),
    self = await findRequestUser(request);
  return (
    await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(teamId)
      .checkPermission(Permissions.PERM_CREATE_PROBLEM_SET),
    null
  );
}
async function action16({ request, params }) {
  let teamId = await invariant(idScheme, params.teamId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self
      .team(teamId)
      .checkPermission(Permissions.PERM_CREATE_PROBLEM_SET);
  let form = await request.formData(),
    title = invariant(titleScheme, form.get("title")),
    { id: problemSetId } = await db.problemSet.create({
      data: {
        title,
        teamId,
      },
    });
  return (0, import_node53.redirect)(
    `/team/${teamId}/problemset/${problemSetId}/edit`
  );
}
var meta27 = () => ({
  title: "\u521B\u5EFA\u9898\u5355 - HITwh OJ",
});
function ProblemSetNew2() {
  let transition = useSignalTransition();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
          children: "\u521B\u5EFA\u56E2\u961F\u9898\u5355",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react75.Form, {
          method: "post",
          className: "form-control w-full max-w-xs gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u6807\u9898",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "text",
                  name: "title",
                  disabled: transition.isRunning,
                  required: !0,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "form-control",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                className: "btn btn-primary",
                type: "submit",
                disabled: transition.isRunning,
                children: "\u521B\u5EFA\u9898\u5355",
              }),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/team/$teamId/contest/index.tsx
var contest_exports2 = {};
__export(contest_exports2, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => HomeworkList,
  loader: () => loader54,
  meta: () => meta28,
});
var import_node54 = require("@remix-run/node"),
  import_react76 = require("@remix-run/react");
var import_hi41 = require("react-icons/hi");
var import_signals_react48 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader54({ params, request }) {
  let teamId = invariant(idScheme, params.teamId, { status: 404 }),
    self = await findRequestUser(request);
  await self.team(teamId).checkPermission(Permissions.PERM_TEAM_VIEW_INTERNAL);
  let [hasCreatePerm] = await self
      .team(teamId)
      .hasPermission(Permissions.PERM_CREATE_CONTEST),
    [viewAll, viewPublic] = await self
      .team(teamId)
      .contest(null)
      .hasPermission(
        Permissions.PERM_VIEW_CONTEST,
        Permissions.PERM_VIEW_CONTEST_PUBLIC
      ),
    contests = await db.contest.findMany({
      where: viewAll
        ? { teamId }
        : viewPublic
        ? { teamId, private: !1 }
        : { id: -1 },
      orderBy: [{ id: "desc" }],
      select: {
        ...selectContestListData,
      },
    });
  return (0, import_node54.json)({ contests, hasCreatePerm });
}
var meta28 = () => ({
  title: "\u56E2\u961F\u6BD4\u8D5B\u5217\u8868 - HITwh OJ",
});
function HomeworkList() {
  let loaderData = useSignalLoaderData(),
    contests = (0, import_signals_react48.useComputed)(
      () => loaderData.value.contests
    ),
    hasCreatePerm = (0, import_signals_react48.useComputed)(
      () => loaderData.value.hasCreatePerm
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h2", {
          className: "flex items-center justify-between",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u56E2\u961F\u6BD4\u8D5B",
            }),
            hasCreatePerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                import_react76.Link,
                {
                  className: "btn btn-primary gap-2",
                  to: "new",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi41.HiOutlinePlus,
                      {}
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u521B\u5EFA\u6BD4\u8D5B",
                    }),
                  ],
                }
              ),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u6807\u9898",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u8D5B\u5236",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u5F00\u59CB\u65F6\u95F4",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u7ED3\u675F\u65F6\u95F4",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: contests.value.map((contest) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: contest.id,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ContestLink,
                          {
                            contest,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ContestSystemTag,
                          {
                            system: contest.system,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: formatDateTime(contest.beginTime),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: formatDateTime(contest.endTime),
                      }),
                    ],
                  },
                  contest.id
                )
              ),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/team/$teamId/problem/index.tsx
var problem_exports5 = {};
__export(problem_exports5, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => ProblemIndex4,
  loader: () => loader55,
  meta: () => meta29,
});
var import_signals_react49 = require("@preact/signals-react"),
  import_node55 = require("@remix-run/node"),
  import_react77 = require("@remix-run/react"),
  import_hi42 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime"),
  PAGE_SIZE8 = 15;
async function loader55({ request, params }) {
  let self = await findRequestUser(request),
    teamId = await invariant(idScheme, params.teamId, { status: 404 }),
    [viewAll, viewPublic, hasCreatePerm] = await self
      .team(null)
      .hasPermission(
        Permissions.PERM_VIEW_PROBLEM,
        Permissions.PERM_VIEW_PROBLEM_PUBLIC,
        Permissions.PERM_CREATE_PROBLEM
      ),
    url = new URL(request.url),
    page = invariant(pageScheme, url.searchParams.get("page") || "1"),
    totalProblems = await db.problem.count({
      where: viewAll
        ? { teamId }
        : viewPublic
        ? { teamId, private: !1 }
        : { id: -1 },
    });
  if (totalProblems && page > Math.ceil(totalProblems / PAGE_SIZE8))
    throw new Response("Page is out of range", { status: 404 });
  let problems = await db.problem.findMany({
    where: viewAll
      ? { teamId }
      : viewPublic
      ? { teamId, private: !1 }
      : { id: -1 },
    orderBy: [{ id: "asc" }],
    select: {
      ...selectProblemListData,
      _count: {
        select: {
          relatedRecords: !0,
        },
      },
    },
    skip: (page - 1) * PAGE_SIZE8,
    take: PAGE_SIZE8,
  });
  return (0, import_node55.json)({
    problems,
    hasCreatePerm,
    totalProblems,
    currentPage: page,
  });
}
var meta29 = () => ({
  title: "\u56E2\u961F\u9898\u76EE - HITwh OJ",
});
function ProblemIndex4() {
  let loaderData = useSignalLoaderData(),
    problems = (0, import_signals_react49.useComputed)(
      () => loaderData.value.problems
    ),
    hasCreatePerm = (0, import_signals_react49.useComputed)(
      () => loaderData.value.hasCreatePerm
    ),
    totalProblems = (0, import_signals_react49.useComputed)(
      () => loaderData.value.totalProblems
    ),
    currentPage = (0, import_signals_react49.useComputed)(
      () => loaderData.value.currentPage
    ),
    totalPages = (0, import_signals_react49.useComputed)(() =>
      Math.ceil(totalProblems.value / PAGE_SIZE8)
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h2", {
          className: "flex items-center justify-between",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u9898\u76EE\u5217\u8868",
            }),
            hasCreatePerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                import_react77.Link,
                {
                  to: "new",
                  className: "btn btn-primary gap-2",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi42.HiOutlinePlus,
                      {
                        className: "h-4 w-4",
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u65B0\u5EFA\u9898\u76EE",
                    }),
                  ],
                }
              ),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u9898\u76EE",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u63D0\u4EA4",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: problems.value.map((problem, index2) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children:
                          index2 + 1 + (Number(currentPage) - 1) * PAGE_SIZE8,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          ProblemLink,
                          {
                            problem,
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: problem._count.relatedRecords,
                      }),
                    ],
                  },
                  problem.id
                )
              ),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Pagination, {
          action: "/problem",
          totalPages: totalPages.value,
          currentPage: currentPage.value,
        }),
      ],
    }
  );
}

// app/routes/team/$teamId/problem/data.tsx
var data_exports3 = {};
__export(data_exports3, {
  loader: () => loader56,
});
var import_node56 = require("@remix-run/node");
async function loader56({ request, params }) {
  let teamId = await invariant(idScheme, params.teamId, { status: 404 }),
    self = await findRequestUser(request),
    [viewAll, viewPublic] = await self
      .team(teamId)
      .hasPermission(
        Permissions.PERM_VIEW_PROBLEM,
        Permissions.PERM_VIEW_PROBLEM_PUBLIC
      ),
    problems = await db.problem.findMany({
      where: viewAll
        ? { teamId }
        : viewPublic
        ? { teamId, private: !1 }
        : { id: -1 },
      orderBy: [{ id: "asc" }],
      select: {
        id: !0,
        title: !0,
        tags: { select: { name: !0 } },
      },
    });
  return (0, import_node56.json)({ problems });
}

// app/routes/team/$teamId/contest/new.tsx
var new_exports3 = {};
__export(new_exports3, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action17,
  default: () => TeamContestNew,
  loader: () => loader57,
  meta: () => meta30,
});
var import_node57 = require("@remix-run/node"),
  import_react78 = require("@remix-run/react");
var import_client6 = require("@prisma/client");
var import_react79 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader57({ request, params }) {
  let teamId = invariant(idScheme, params.teamId, { status: 404 }),
    self = await findRequestUser(request);
  return (
    await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.team(teamId).checkPermission(Permissions.PERM_CREATE_CONTEST),
    null
  );
}
async function action17({ request, params }) {
  let teamId = invariant(idScheme, params.teamId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.team(teamId).checkPermission(Permissions.PERM_CREATE_CONTEST);
  let form = await request.formData(),
    title = invariant(titleScheme, form.get("title")),
    description = invariant(descriptionScheme, form.get("description")),
    timezone = invariant(timezoneScheme, form.get("timezone")),
    beginTime = adjustTimezone(
      invariant(datetimeStringScheme, form.get("beginTime")),
      timezone
    ),
    endTime = adjustTimezone(
      invariant(datetimeStringScheme, form.get("endTime")),
      timezone
    ),
    system = invariant(systemScheme, import_client6.ContestSystem.Homework),
    { id: contestId } = await db.contest.create({
      data: {
        title,
        description,
        beginTime,
        endTime,
        system,
        teamId,
        participants: {
          create: [
            {
              userId: self.userId,
              role: import_client6.ContestParticipantRole.Mod,
            },
          ],
        },
      },
    });
  return (0, import_node57.redirect)(`/contest/${contestId}`);
}
var meta30 = () => ({
  title: "\u521B\u5EFA\u56E2\u961F\u6BD4\u8D5B - HITwh OJ",
});
function TeamContestNew() {
  let transition = useSignalTransition(),
    Toasts = useToasts();
  return (
    (0, import_react79.useEffect)(() => {
      transition.actionSuccess && Toasts.success("\u521B\u5EFA\u6210\u529F");
    }, [transition.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
          children: "\u521B\u5EFA\u56E2\u961F\u6BD4\u8D5B",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react78.Form, {
          method: "post",
          className: "form-control gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u6807\u9898",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "text",
                  name: "title",
                  required: !0,
                  disabled: transition.isRunning,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u6BD4\u8D5B\u4ECB\u7ECD",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MarkdownEditor, {
                  name: "description",
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
                  className: "label",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text",
                      children: "\u6BD4\u8D5B\u5F00\u59CB\u65F6\u95F4",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text-alt",
                      children:
                        Intl.DateTimeFormat().resolvedOptions().timeZone,
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "datetime-local",
                  name: "beginTime",
                  required: !0,
                  disabled: transition.isRunning,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
                  className: "label",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text",
                      children: "\u6BD4\u8D5B\u7ED3\u675F\u65F6\u95F4",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text-alt",
                      children:
                        Intl.DateTimeFormat().resolvedOptions().timeZone,
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "datetime-local",
                  name: "endTime",
                  required: !0,
                  disabled: transition.isRunning,
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  type: "hidden",
                  name: "timezone",
                  value: new Date().getTimezoneOffset(),
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u6BD4\u8D5B\u8D5B\u5236",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("select", {
                  className: "select select-bordered",
                  name: "system",
                  required: !0,
                  disabled: transition.isRunning,
                  defaultValue: "",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                      value: "",
                      disabled: !0,
                      children:
                        "\u8BF7\u9009\u62E9\u6BD4\u8D5B\u7684\u8D5B\u5236",
                    }),
                    Object.keys(import_client6.ContestSystem).map((key) =>
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                        "option",
                        {
                          value: key,
                          children: key,
                        },
                        key
                      )
                    ),
                  ],
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "form-control w-full max-w-xs",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                className: "btn btn-primary",
                type: "submit",
                disabled: transition.isRunning,
                children: "\u521B\u5EFA\u6BD4\u8D5B",
              }),
            }),
          ],
        }),
      ],
    })
  );
}

// app/routes/team/$teamId/problem/new.tsx
var new_exports4 = {};
__export(new_exports4, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action18,
  default: () => ProblemNew,
  loader: () => loader58,
});
var import_node58 = require("@remix-run/node"),
  import_react80 = require("@remix-run/react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader58({ request, params }) {
  let teamId = await invariant(idScheme, params.teamId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.team(teamId).checkPermission(Permissions.PERM_CREATE_PROBLEM);
  for (var i = 0; i < 100; ++i) console.log("Hello!");
  return null;
}
async function action18({ request, params }) {
  let self = await findRequestUser(request),
    teamId = await invariant(idScheme, params.teamId, { status: 404 });
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.team(teamId).checkPermission(Permissions.PERM_CREATE_PROBLEM);
  let form = await request.formData(),
    title = invariant(titleScheme, form.get("title"));
  for (var i = 0; i < 100; ++i) console.log("teamId: ", teamId);
  let { id } = await db.problem.create({
    data: {
      title,
      teamId,
    },
  });
  return (0, import_node58.redirect)(`/problem/${id}/edit`);
}
function ProblemNew() {
  let transition = useSignalTransition();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
          children: "\u65B0\u5EFA\u9898\u76EE",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react80.Form, {
          method: "post",
          className: "form-control w-full max-w-xs gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u9898\u76EE\u540D\u79F0",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "text",
                  name: "title",
                  required: !0,
                  disabled: transition.isRunning,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "form-control",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                className: "btn btn-primary",
                type: "submit",
                disabled: transition.isRunning,
                children: "\u521B\u5EFA\u9898\u76EE",
              }),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/team/$teamId/settings.tsx
var settings_exports = {};
__export(settings_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action19,
  default: () => TeamSettings,
  loader: () => loader59,
});
var import_node59 = require("@remix-run/node"),
  import_node60 = require("@remix-run/node");
var import_client7 = require("@prisma/client");
var import_hi43 = require("react-icons/hi");
var import_signals_react50 = require("@preact/signals-react");
var import_react81 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader59({ request, params }) {
  let teamId = invariant(idScheme, params.teamId),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE);
  let selfTeam = self.team(teamId),
    [hasEditPerm, hasLeavePerm] = await selfTeam.hasPermission(
      Permissions.PERM_TEAM_EDIT_INTERNAL,
      TeamPermission.Members.with(UserPermission.Nobody)
    ),
    team = await db.team.findUnique({
      where: { id: teamId },
      select: {
        name: !0,
        description: !0,
        invitationType: !0,
        invitationCode: !0,
        allowMembersInvite: !0,
      },
    });
  if (!team) throw new Response("Team not exists", { status: 404 });
  return (0, import_node59.json)({
    profile: team,
    hasEditPerm,
    hasLeavePerm,
  });
}
async function action19({ params, request }) {
  let teamId = invariant(idScheme, params.teamId),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE);
  let form = await request.formData();
  switch (form.get("_action")) {
    case "EditProfile" /* EditProfile */:
      return (
        await self
          .team(teamId)
          .checkPermission(Permissions.PERM_TEAM_EDIT_INTERNAL),
        await db.$transaction(async (db2) => {
          let name = invariant(teamNameScheme, form.get("name")),
            description = invariant(descriptionScheme, form.get("description")),
            invitationType = invariant(
              teamInvitationScheme,
              form.get("invitation")
            ),
            invitationCode =
              invitationType === import_client7.InvitationType.CODE
                ? invariant(teamInvitationCodeScheme, form.get("code"))
                : "",
            allowMembersInvite = form.has("allow_invite"),
            team = await db2.team.findUnique({ where: { name } });
          if (team && team.id !== teamId)
            throw new Response("Team name already exists.", { status: 403 });
          await db2.team.update({
            where: { id: teamId },
            data: {
              name,
              description,
              invitationType,
              invitationCode,
              allowMembersInvite,
            },
          });
        }),
        null
      );
    case "ExitTeam" /* ExitTeam */:
      return (
        await self
          .team(teamId)
          .checkPermission(TeamPermission.Members.with(UserPermission.Nobody)),
        await db.teamMember.delete({
          where: {
            userId_teamId: {
              userId: self.userId,
              teamId,
            },
          },
        }),
        (0, import_node60.redirect)(`/team/${teamId}`)
      );
  }
  throw new Response("Unknown action", { status: 400 });
}
function EditProfile({
  name,
  description,
  invitationType: type,
  invitationCode: code3,
  allowMembersInvite: allow2,
}) {
  let fetcher = useSignalFetcher(),
    Toasts = useToasts();
  (0, import_react81.useEffect)(() => {
    fetcher.actionSuccess &&
      Toasts.success("\u66F4\u65B0\u56E2\u961F\u4FE1\u606F\u6210\u529F");
  }, [fetcher.actionSuccess]);
  let invitationType = (0, import_signals_react50.useSignal)(type);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(fetcher.Form, {
    method: "post",
    className: "form-control gap-4",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "form-control w-full max-w-xs",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
            className: "label",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "label-text",
              children: "\u56E2\u961F\u540D\u79F0",
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
            className: "input input-bordered",
            name: "name",
            defaultValue: name,
            disabled: fetcher.isRunning,
            required: !0,
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "form-control",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
            className: "label",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "label-text",
              children: "\u56E2\u961F\u63CF\u8FF0",
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MarkdownEditor, {
            name: "description",
            defaultValue: description,
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "form-control",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
            className: "label",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "label-text",
              children: "\u9080\u8BF7\u5236",
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className: "flex gap-4",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("select", {
                className: "select select-bordered",
                name: "invitation",
                value: invitationType.value,
                onChange: (event) =>
                  (invitationType.value = event.target.value),
                disabled: fetcher.isRunning,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                    value: import_client7.InvitationType.FREE,
                    children: "\u6240\u6709\u4EBA\u5747\u53EF\u52A0\u5165",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                    value: import_client7.InvitationType.CODE,
                    children: "\u9700\u8981\u586B\u5199\u9080\u8BF7\u7801",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                    value: import_client7.InvitationType.NONE,
                    children: "\u7981\u6B62\u4EFB\u4F55\u4EBA\u52A0\u5165",
                  }),
                ],
              }),
              invitationType.value === import_client7.InvitationType.CODE &&
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  name: "code",
                  defaultValue: code3,
                  placeholder: "\u9080\u8BF7\u7801",
                  disabled: fetcher.isRunning,
                  required: !0,
                }),
            ],
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
        className: "form-control",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
          className: "label cursor-pointer justify-start gap-2",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              className: "checkbox checkbox-primary",
              type: "checkbox",
              name: "allow_invite",
              defaultChecked: allow2,
              disabled: fetcher.isRunning,
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              className: "label-text",
              children:
                "\u5141\u8BB8\u56E2\u961F\u6210\u5458\u9080\u8BF7\u5176\u4ED6\u7528\u6237\u76F4\u63A5\u52A0\u5165",
            }),
          ],
        }),
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
        className: "form-control w-full max-w-xs",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
          className: "btn btn-primary",
          type: "submit",
          disabled: fetcher.isRunning,
          name: "_action",
          value: "EditProfile" /* EditProfile */,
          children: "\u786E\u8BA4\u66F4\u65B0",
        }),
      }),
    ],
  });
}
function ExitTeam() {
  let fetcher = useSignalFetcher(),
    Toasts = useToasts();
  return (
    (0, import_react81.useEffect)(() => {
      fetcher.actionSuccess &&
        Toasts.success("\u6210\u529F\u9000\u51FA\u56E2\u961F");
    }, [fetcher.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(fetcher.Form, {
      method: "post",
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
        className: "btn btn-error gap-2",
        type: "submit",
        disabled: fetcher.isRunning,
        name: "_action",
        value: "ExitTeam" /* ExitTeam */,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_hi43.HiOutlineLogout,
            {}
          ),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
            children: "\u9000\u51FA\u56E2\u961F",
          }),
        ],
      }),
    })
  );
}
function TeamSettings() {
  let loaderData = useSignalLoaderData(),
    profile = (0, import_signals_react50.useComputed)(
      () => loaderData.value.profile
    ),
    hasLeavePerm = (0, import_signals_react50.useComputed)(
      () => loaderData.value.hasLeavePerm
    ),
    hasEditPerm = (0, import_signals_react50.useComputed)(
      () => loaderData.value.hasEditPerm
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        hasEditPerm.value &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            import_jsx_runtime.Fragment,
            {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                  children: "\u56E2\u961F\u8BBE\u7F6E",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(EditProfile, {
                  ...profile.value,
                }),
              ],
            }
          ),
        hasLeavePerm.value &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            import_jsx_runtime.Fragment,
            {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                  children: "\u5371\u9669\u533A\u57DF",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ExitTeam, {}),
              ],
            }
          ),
      ],
    }
  );
}

// app/routes/team/$teamId/members.tsx
var members_exports2 = {};
__export(members_exports2, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action20,
  default: () => MemberList,
  loader: () => loader60,
});
var import_node61 = require("@remix-run/node"),
  import_react82 = require("@remix-run/react");
var import_client8 = require("@prisma/client");

// app/utils/db/team.ts
async function findTeamAllowMembersInvite(teamId) {
  let team = await db.team.findUnique({
    where: { id: teamId },
    select: { allowMembersInvite: !0 },
  });
  if (!team) throw new Response("Team not found", { status: 404 });
  return team.allowMembersInvite;
}
async function findTeamMemberRole(teamId, userId) {
  let member = await db.teamMember.findUnique({
    where: { userId_teamId: { teamId, userId } },
    select: { role: !0 },
  });
  return member ? member.role : null;
}

// app/routes/team/$teamId/members.tsx
var import_hi44 = require("react-icons/hi");
var import_signals_react51 = require("@preact/signals-react");
var import_react83 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader60({ request, params }) {
  let teamId = invariant(idScheme, params.teamId),
    self = await findRequestUser(request);
  await self.team(teamId).checkPermission(Permissions.PERM_TEAM_VIEW_INTERNAL);
  let [hasEditPerm, hasInvitePerm, hasKickAdminPerm, hasKickMemberPerm] =
      await self
        .team(teamId)
        .hasPermission(
          Permissions.PERM_TEAM_EDIT_MEMBER_ROLE,
          (await findTeamAllowMembersInvite(teamId))
            ? Permissions.PERM_TEAM_INVITE_MEMBER
            : Permissions.PERM_TEAM_INVITE_ADMIN,
          Permissions.PERM_TEAM_KICK_ADMIN,
          Permissions.PERM_TEAM_KICK_MEMBER
        ),
    members = await db.teamMember.findMany({
      where: { teamId },
      select: {
        user: { select: selectUserData },
        role: !0,
      },
    });
  return (0, import_node61.json)({
    members,
    hasEditPerm,
    hasInvitePerm,
    hasKickAdminPerm,
    hasKickMemberPerm,
  });
}
async function action20({ params, request }) {
  let teamId = invariant(idScheme, params.teamId),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE);
  let form = await request.formData(),
    _action = form.get("_action"),
    memberId = invariant(idScheme, form.get("member"));
  switch (_action) {
    case "AddMember" /* AddMember */:
      return (
        await self
          .team(teamId)
          .checkPermission(
            (await findTeamAllowMembersInvite(teamId))
              ? Permissions.PERM_TEAM_INVITE_MEMBER
              : Permissions.PERM_TEAM_INVITE_ADMIN
          ),
        await db.$transaction(async (db2) => {
          if (
            await db2.teamMember.findUnique({
              where: { userId_teamId: { teamId, userId: memberId } },
            })
          )
            throw new Response("User is already in this team", { status: 400 });
          await db2.teamMember.create({
            data: { teamId, userId: memberId },
          });
        }),
        null
      );
    case "DeleteMember" /* DeleteMember */:
      return (
        await self
          .team(teamId)
          .checkPermission(
            (await findTeamMemberRole(teamId, memberId)) ===
              import_client8.TeamMemberRole.Member
              ? Permissions.PERM_TEAM_KICK_MEMBER
              : Permissions.PERM_TEAM_KICK_ADMIN
          ),
        await db.$transaction(async (db2) => {
          if (
            !(await db2.teamMember.findUnique({
              where: { userId_teamId: { teamId, userId: memberId } },
            }))
          )
            throw new Response("User is not in this team", { status: 400 });
          await db2.teamMember.delete({
            where: { userId_teamId: { userId: memberId, teamId } },
          });
        }),
        null
      );
    case "ChangeRole" /* ChangeRole */: {
      await self
        .team(teamId)
        .checkPermission(Permissions.PERM_TEAM_EDIT_MEMBER_ROLE);
      let role = invariant(teamMemberRoleScheme, form.get("role"));
      return (
        await db.$transaction(async (db2) => {
          if (
            !(await db2.teamMember.findUnique({
              where: { userId_teamId: { teamId, userId: memberId } },
            }))
          )
            throw new Response("User is not in this team", { status: 400 });
          await db2.teamMember.update({
            where: { userId_teamId: { userId: memberId, teamId } },
            data: { role },
          });
        }),
        null
      );
    }
  }
  throw new Response("Unknown action type", { status: 400 });
}
function DeleteMember2({ id }) {
  let fetcher = useSignalFetcher(),
    Toasts = useToasts();
  return (
    (0, import_react83.useEffect)(() => {
      fetcher.actionSuccess && Toasts.success("\u8E22\u51FA\u6210\u529F");
    }, [fetcher.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(fetcher.Form, {
      method: "post",
      className: "tooltip tooltip-error",
      "data-tip": "\u8E22\u51FA\u56E2\u961F",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
          type: "hidden",
          name: "member",
          value: id,
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
          className: "btn btn-square btn-error",
          type: "submit",
          name: "_action",
          value: "DeleteMember" /* DeleteMember */,
          disabled: fetcher.isRunning,
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_hi44.HiOutlineLogout,
            {
              className: "h-6 w-6",
            }
          ),
        }),
      ],
    })
  );
}
function SetMemberRole2({ id, role }) {
  let fetcher = useSignalFetcher(),
    Toasts = useToasts();
  (0, import_react83.useEffect)(() => {
    fetcher.actionSuccess &&
      Toasts.success("\u8BBE\u5B9A\u6210\u5458\u89D2\u8272\u6210\u529F");
  }, [fetcher.actionSuccess]);
  let isOwner = role === "Owner",
    isAdmin = role === "Admin",
    isMember = role === "Member";
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(fetcher.Form, {
    method: "post",
    className: "dropdown dropdown-hover",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
        type: "hidden",
        name: "member",
        value: id,
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
        type: "hidden",
        name: "_action",
        value: "ChangeRole" /* ChangeRole */,
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
        tabIndex: 0,
        className: "btn btn-square",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_hi44.HiOutlineCog,
          {
            className: "h-6 w-6",
          }
        ),
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("ul", {
        className:
          "dropdown-content menu rounded-box bg-base-300 w-72 p-2 shadow-2xl",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
            className: isOwner ? "disabled" : "",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
              type: "submit",
              name: "role",
              value: import_client8.TeamMemberRole.Owner,
              disabled: isOwner || fetcher.isRunning,
              children: "\u8BBE\u7F6E\u4E3A\u6240\u6709\u4EBA",
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
            className: isAdmin ? "disabled" : "",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
              type: "submit",
              name: "role",
              value: import_client8.TeamMemberRole.Admin,
              disabled: isAdmin || fetcher.isRunning,
              children: "\u8BBE\u7F6E\u4E3A\u7BA1\u7406\u5458",
            }),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("li", {
            className: isMember ? "disabled" : "",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
              type: "submit",
              name: "role",
              value: import_client8.TeamMemberRole.Member,
              disabled: isMember || fetcher.isRunning,
              children: "\u8BBE\u7F6E\u4E3A\u6210\u5458",
            }),
          }),
        ],
      }),
    ],
  });
}
var memberRoleTranslation = {
  Owner: "\u6240\u6709\u4EBA",
  Admin: "\u7BA1\u7406\u5458",
  Member: "\u6210\u5458",
};
function MemberList() {
  let loaderData = useSignalLoaderData(),
    members = (0, import_signals_react51.useComputed)(
      () => loaderData.value.members
    ),
    hasEditPerm = (0, import_signals_react51.useComputed)(
      () => loaderData.value.hasEditPerm
    ),
    hasInvitePerm = (0, import_signals_react51.useComputed)(
      () => loaderData.value.hasInvitePerm
    ),
    hasKickAdminPerm = (0, import_signals_react51.useComputed)(
      () => loaderData.value.hasKickAdminPerm
    ),
    hasKickMemberPerm = (0, import_signals_react51.useComputed)(
      () => loaderData.value.hasKickMemberPerm
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h2", {
          className: "flex items-center justify-between",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u56E2\u961F\u6210\u5458",
            }),
            hasInvitePerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
                className: "btn btn-primary gap-2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    import_hi44.HiOutlinePlus,
                    {}
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                    children: "\u6DFB\u52A0\u6210\u5458",
                  }),
                ],
              }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
          className: "not-prose grid grid-cols-1 gap-4 md:grid-cols-2",
          children: members.value.map((member) =>
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "div",
              {
                className: "card bg-base-200 overflow-visible",
                children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "card-body",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                    "div",
                    {
                      className: "flex items-center justify-between",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                          className: "flex items-center gap-4",
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                              UserAvatar,
                              {
                                user: member.user,
                                className:
                                  "bg-base-100 h-16 w-16 shrink-0 text-2xl",
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                              "div",
                              {
                                children: [
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    import_react82.Link,
                                    {
                                      to: `/user/${member.user.id}`,
                                      className:
                                        "link link-hover block font-bold",
                                      children:
                                        member.user.nickname ||
                                        member.user.username,
                                    }
                                  ),
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    "div",
                                    {
                                      className: `badge ${
                                        member.role === "Owner"
                                          ? "badge-primary"
                                          : member.role === "Admin"
                                          ? "badge-secondary"
                                          : ""
                                      }`,
                                      children:
                                        memberRoleTranslation[member.role],
                                    }
                                  ),
                                ],
                              }
                            ),
                          ],
                        }),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                          className: "flex shrink-0 items-center gap-4",
                          children: [
                            hasEditPerm.value &&
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                SetMemberRole2,
                                {
                                  id: member.user.id,
                                  role: member.role,
                                }
                              ),
                            hasKickAdminPerm.value &&
                              member.role === "Admin" &&
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                DeleteMember2,
                                {
                                  id: member.user.id,
                                }
                              ),
                            hasKickMemberPerm.value &&
                              member.role === "Member" &&
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                DeleteMember2,
                                {
                                  id: member.user.id,
                                }
                              ),
                          ],
                        }),
                      ],
                    }
                  ),
                }),
              },
              member.user.id
            )
          ),
        }),
      ],
    }
  );
}

// app/routes/team/$teamId/profile.tsx
var profile_exports = {};
__export(profile_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action21,
  default: () => TeamDetail,
  loader: () => loader61,
  meta: () => meta31,
});
var import_node62 = require("@remix-run/node"),
  import_react84 = require("@remix-run/react");
var import_client9 = require("@prisma/client");
var import_signals_react52 = require("@preact/signals-react");
var import_react85 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader61({ request, params }) {
  let teamId = invariant(idScheme, params.teamId, { status: 404 }),
    self = await findRequestUser(request),
    [hasViewPerm] = await self
      .team(teamId)
      .hasPermission(Permissions.PERM_TEAM_VIEW_INTERNAL),
    team = await db.team.findUnique({
      where: { id: teamId },
      select: {
        id: !0,
        name: !0,
        description: !0,
        createdAt: !0,
        invitationType: !0,
        _count: {
          select: {
            members: !0,
            contests: !0,
            problems: !0,
            problemSets: !0,
          },
        },
      },
    });
  if (!team) throw new Response("Team not found", { status: 404 });
  return (0, import_node62.json)({ team, hasViewPerm });
}
var action21 = async ({ params, request }) => {
    let teamId = invariant(idScheme, params.teamId),
      self = await findRequestUser(request);
    return (
      await self.checkPrivilege(Privileges.PRIV_OPERATE),
      await db.$transaction(async (db2) => {
        let team = await db2.team.findUnique({
          where: { id: teamId },
          select: { invitationType: !0, invitationCode: !0 },
        });
        if (!team)
          throw new Response("\u56E2\u961F\u4E0D\u5B58\u5728", { status: 404 });
        if (
          await db2.teamMember.findUnique({
            where: {
              userId_teamId: {
                userId: self.userId,
                teamId,
              },
            },
          })
        )
          throw new Response(
            "\u4F60\u5DF2\u7ECF\u662F\u8BE5\u56E2\u961F\u6210\u5458\u4E86",
            { status: 403 }
          );
        if (team.invitationType === import_client9.InvitationType.NONE)
          throw new Response(
            "\u8BE5\u56E2\u961F\u4E0D\u5141\u8BB8\u52A0\u5165",
            { status: 403 }
          );
        if (team.invitationType === import_client9.InvitationType.CODE) {
          let form = await request.formData();
          if (
            invariant(teamInvitationCodeScheme, form.get("code")) !==
            team.invitationCode
          )
            throw new Response("\u9080\u8BF7\u7801\u9519\u8BEF", {
              status: 403,
            });
        }
        await db2.teamMember.create({
          data: {
            userId: self.userId,
            teamId,
            role: import_client9.TeamMemberRole.Member,
          },
        });
      }),
      null
    );
  },
  meta31 = ({ data: data2 }) => ({
    title: `\u56E2\u961F: ${
      data2 == null ? void 0 : data2.team.name
    } - HITwh OJ`,
  });
function TeamDetail() {
  let loaderData = useSignalLoaderData(),
    team = (0, import_signals_react52.useComputed)(() => loaderData.value.team),
    hasViewPerm = (0, import_signals_react52.useComputed)(
      () => loaderData.value.hasViewPerm
    ),
    self = useUser(),
    transition = useSignalTransition(),
    isNotMember = (0, import_signals_react52.useComputed)(
      () => self.value && !hasViewPerm.value
    ),
    Toasts = useToasts();
  return (
    (0, import_react85.useEffect)(() => {
      transition.actionSuccess &&
        Toasts.success("\u6210\u529F\u52A0\u5165\u56E2\u961F");
    }, [transition.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tr", {
                children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                  children: "\u56E2\u961F\u4FE1\u606F",
                }),
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tbody", {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                      children: "\u521B\u5EFA\u65F6\u95F4",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                      children: formatDateTime(team.value.createdAt),
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                      children: "\u6210\u5458\u6570\u91CF",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                      children: team.value._count.members,
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                      children: "\u9898\u76EE\u6570\u91CF",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                      children: team.value._count.problems,
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                      children: "\u9898\u5355\u6570\u91CF",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                      children: team.value._count.problemSets,
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                      children: "\u6BD4\u8D5B\u6570\u91CF",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                      children: team.value._count.contests,
                    }),
                  ],
                }),
              ],
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Markdown, {
          children: team.value.description,
        }),
        isNotMember &&
          (team.value.invitationType === import_client9.InvitationType.NONE
            ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "alert alert-info",
                children:
                  "\u8BE5\u56E2\u961F\u672A\u5F00\u653E\u7533\u8BF7\u52A0\u5165",
              })
            : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                import_react84.Form,
                {
                  method: "post",
                  className: "flex gap-4",
                  children: [
                    team.value.invitationType ===
                      import_client9.InvitationType.CODE &&
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                        className: "input input-bordered",
                        name: "code",
                        placeholder: "\u8BF7\u8F93\u5165\u9080\u8BF7\u7801",
                        required: !0,
                        disabled: transition.isRunning,
                      }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                      className: "btn btn-primary",
                      type: "submit",
                      disabled: transition.isRunning,
                      children: "\u52A0\u5165\u56E2\u961F",
                    }),
                  ],
                }
              )),
      ],
    })
  );
}

// app/routes/team/$teamId/index.ts
var teamId_exports2 = {};
__export(teamId_exports2, {
  loader: () => loader62,
});
var import_node63 = require("@remix-run/node");
function loader62({ params }) {
  return (0, import_node63.redirect)(`/team/${params.teamId}/profile`);
}

// app/routes/user/$userId.tsx
var userId_exports = {};
__export(userId_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => UserProfile,
  loader: () => loader63,
  meta: () => meta32,
});
var import_node64 = require("@remix-run/node"),
  import_react86 = require("@remix-run/react");
var import_signals_react53 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader63({ request, params }) {
  let userId = invariant(idScheme, params.userId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPermission(
    self.userId === userId
      ? Permissions.PERM_VIEW_USER_PROFILE_SELF
      : Permissions.PERM_VIEW_USER_PROFILE
  );
  let [hasEditPerm, hasEditPrivPerm, hasEditRolePerm] =
      await self.hasPermission(
        self.userId === userId
          ? Permissions.PERM_EDIT_USER_PROFILE_SELF
          : Permissions.PERM_EDIT_USER_PROFILE,
        Permissions.PERM_EDIT_USER_PRIVILEGE,
        Permissions.PERM_EDIT_USER_ROLE
      ),
    user = await db.user.findUnique({
      where: { id: userId },
      select: {
        nickname: !0,
        username: !0,
        avatar: !0,
        bio: !0,
        id: !0,
        role: !0,
        premium: !0,
      },
    });
  if (!user) throw new Response("User not found", { status: 404 });
  return (0, import_node64.json)({
    user,
    hasEditPerm,
    hasAdminPerm: hasEditPrivPerm || hasEditRolePerm,
  });
}
var meta32 = ({ data: data2 }) => ({
  title: `\u7528\u6237: ${
    (data2 == null ? void 0 : data2.user.nickname) ||
    (data2 == null ? void 0 : data2.user.username)
  } - HITwh OJ`,
});
function UserProfile() {
  let loaderData = useSignalLoaderData(),
    user = (0, import_signals_react53.useComputed)(() => loaderData.value.user),
    hasEditPerm = (0, import_signals_react53.useComputed)(
      () => loaderData.value.hasEditPerm
    ),
    hasAdminPerm = (0, import_signals_react53.useComputed)(
      () => loaderData.value.hasAdminPerm
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("header", {
        className: "not-prose my-4 text-center",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UserAvatar, {
            user: user.value,
            className: "bg-base-200 mx-auto h-20 w-20 text-3xl",
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
            className: "mt-4 text-lg font-bold",
            children: user.value.nickname || user.value.username,
          }),
          user.value.bio &&
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
              className: "mt-3 text-sm",
              children: user.value.bio,
            }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className: "tabs tabs-boxed bg-base-100 mt-5 justify-center",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react86.NavLink,
                {
                  className: "tab",
                  to: "profile",
                  children: "\u8D44\u6599",
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_react86.NavLink,
                {
                  className: "tab",
                  to: "statistics",
                  children: "\u7EDF\u8BA1",
                }
              ),
              hasEditPerm.value &&
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_react86.NavLink,
                  {
                    className: "tab",
                    to: "files",
                    children: "\u6587\u4EF6",
                  }
                ),
              hasEditPerm.value &&
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_react86.NavLink,
                  {
                    className: "tab",
                    to: "edit",
                    children: "\u7F16\u8F91",
                  }
                ),
              hasAdminPerm.value &&
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_react86.NavLink,
                  {
                    className: "tab",
                    to: "admin",
                    children: "\u6EE5\u6743",
                  }
                ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react86.Link, {
                className: "tab",
                to: `/chat/user/${user.value.id}`,
                children: "\u804A\u5929",
              }),
            ],
          }),
        ],
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_react86.Outlet,
          {}
        ),
      }),
    ],
  });
}

// app/routes/user/$userId/statistics.tsx
var statistics_exports = {};
__export(statistics_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => UserStatistics,
  loader: () => loader64,
});
var import_node65 = require("@remix-run/node");
var import_react_activity_calendar = __toESM(
    require("react-activity-calendar")
  ),
  import_react_tooltip = __toESM(require("react-tooltip"));
var import_signals_react54 = require("@preact/signals-react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader64({ request, params }) {
  let userId = invariant(idScheme, params.userId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPermission(
    self.userId === userId
      ? Permissions.PERM_VIEW_USER_PROFILE_SELF
      : Permissions.PERM_VIEW_USER_PROFILE
  );
  let now = new Date(),
    user = await db.user.findUnique({
      where: { id: userId },
      select: {
        participatedContests: {
          select: {
            contest: {
              select: {
                ...selectContestListData,
              },
            },
          },
        },
        _count: {
          select: {
            createdRecords: !0,
            createdComments: !0,
            createdReplies: !0,
          },
        },
        createdRecords: {
          select: {
            submittedAt: !0,
          },
          where: {
            submittedAt: {
              lte: now,
              gt: new Date(now.getTime() - 365 * 24 * 60 * 60 * 1e3),
            },
          },
        },
      },
    });
  if (!user) throw new Response("User not found", { status: 404 });
  return (0, import_node65.json)({ user });
}
function getLevelColors(fromColor, toColor) {
  let fromRGB = hexToRGB(fromColor),
    toRGB = hexToRGB(toColor),
    levelColors = [];
  for (let i = 0; i < 5; i++) {
    let color3 = `rgb(${fromRGB[0] + (toRGB[0] - fromRGB[0]) * (i / 4)}, ${
      fromRGB[1] + (toRGB[1] - fromRGB[1]) * (i / 4)
    }, ${fromRGB[2] + (toRGB[2] - fromRGB[2]) * (i / 4)})`;
    levelColors.push(color3);
  }
  return levelColors;
}
function hexToRGB(color3) {
  let r2 = parseInt(color3.slice(1, 3), 16),
    g = parseInt(color3.slice(3, 5), 16),
    b = parseInt(color3.slice(5, 7), 16);
  return [r2, g, b];
}
function UserStatistics() {
  let loaderData = useSignalLoaderData(),
    user = (0, import_signals_react54.useComputed)(() => loaderData.value.user),
    theme = useTheme(),
    activityCalendarTheme = (0, import_signals_react54.useComputed)(() => {
      let fromColor = defaultThemeColor[theme.value].base200,
        toColor = defaultThemeColor[theme.value].primary,
        [level0, level1, level2, level3, level4] = getLevelColors(
          fromColor,
          toColor
        );
      return { level0, level1, level2, level3, level4 };
    }),
    activityCalendarData = (0, import_signals_react54.useComputed)(() => {
      let now = new Date();
      return Object.entries(
        user.value.createdRecords.reduce(
          (cur, record) => {
            let date = new Date(record.submittedAt).toISOString().slice(0, 10);
            return cur[date] ? cur[date]++ : (cur[date] = 1), cur;
          },
          {
            [now.toISOString().slice(0, 10)]: 0,
            [new Date(now.getTime() - 365 * 24 * 60 * 60 * 1e3)
              .toISOString()
              .slice(0, 10)]: 0,
          }
        )
      )
        .map(([date, count]) => {
          let level = Math.min(Math.floor(count + 0.5), 4);
          return { date, count, level };
        })
        .sort((a, b) => (a.date > b.date ? 1 : -1));
    });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
          className: "stats w-full",
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
            className: "stat place-items-center",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_react_activity_calendar.default,
              {
                data: activityCalendarData.value,
                labels: {
                  tooltip:
                    "<span style='font-weight: bold;' color='white'>{{count}} submitions</span> on {{date}}",
                  totalCount: "{{count}} submitions in {{year}}",
                },
                theme: activityCalendarTheme.value,
                children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_react_tooltip.default,
                  {
                    html: !0,
                  }
                ),
              }
            ),
          }),
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "stats w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "stat place-items-center",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-value",
                  children: formatNumber(user.value._count.createdRecords),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-desc",
                  children: "\u63D0\u4EA4",
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "stat place-items-center",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-value",
                  children: formatNumber(user.value._count.createdComments),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-desc",
                  children: "\u8BC4\u8BBA",
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "stat place-items-center",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-value",
                  children: formatNumber(user.value._count.createdReplies),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-desc",
                  children: "\u56DE\u590D",
                }),
              ],
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
          children: "\u53C2\u4E0E\u7684\u6BD4\u8D5B",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ul", {
          children: user.value.participatedContests.map(({ contest }) =>
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "li",
              {
                children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  ContestLink,
                  {
                    contest,
                  }
                ),
              },
              contest.id
            )
          ),
        }),
      ],
    }
  );
}

// app/routes/user/$userId/profile.tsx
var profile_exports2 = {};
__export(profile_exports2, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => Profile,
  loader: () => loader65,
  meta: () => meta33,
});
var import_node66 = require("@remix-run/node");
var import_signals_react55 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader65({ request, params }) {
  let userId = invariant(idScheme, params.userId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPermission(
    self.userId === userId
      ? Permissions.PERM_VIEW_USER_PROFILE_SELF
      : Permissions.PERM_VIEW_USER_PROFILE
  );
  let user = await db.user.findUnique({
    where: { id: userId },
    select: {
      id: !0,
      bio: !0,
      username: !0,
      nickname: !0,
      email: !0,
      department: !0,
      studentId: !0,
    },
  });
  if (!user) throw new Response("User not found", { status: 404 });
  return (0, import_node66.json)({ user });
}
var meta33 = ({ data: data2 }) => ({
  title: `\u7528\u6237: ${
    (data2 == null ? void 0 : data2.user.nickname) ||
    (data2 == null ? void 0 : data2.user.username)
  } - HITwh OJ`,
  description: data2 == null ? void 0 : data2.user.bio,
});
function Profile() {
  let loaderData = useSignalLoaderData(),
    user = (0, import_signals_react55.useComputed)(() => loaderData.value.user);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tr", {
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
            children: "\u7528\u6237\u8D44\u6599",
          }),
        }),
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tbody", {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                children: "\u7528\u6237\u540D",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                children: user.value.username,
              }),
            ],
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                children: "\u7528\u6237\u6635\u79F0",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                children: user.value.nickname || "-",
              }),
            ],
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                children: "\u7535\u5B50\u90AE\u7BB1",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                children: user.value.email
                  ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("a", {
                      href: `mailto:${user.value.email}`,
                      children: user.value.email,
                    })
                  : "-",
              }),
            ],
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                children: "\u5DE5\u4F5C\u5355\u4F4D",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                children: user.value.department || "-",
              }),
            ],
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                children: "\u5B66\u53F7",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                children: user.value.studentId || "-",
              }),
            ],
          }),
        ],
      }),
    ],
  });
}

// app/routes/user/$userId/admin.tsx
var admin_exports = {};
__export(admin_exports, {
  action: () => action22,
  default: () => UserManage,
  loader: () => loader66,
});
var import_signals_react56 = require("@preact/signals-react"),
  import_client10 = require("@prisma/client"),
  import_node67 = require("@remix-run/node"),
  import_react87 = require("@remix-run/react"),
  import_hi45 = require("react-icons/hi");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader66({ request, params }) {
  let userId = invariant(idScheme, params.userId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.checkPermission(
      self.userId === userId
        ? Permissions.PERM_VIEW_USER_PROFILE_SELF
        : Permissions.PERM_VIEW_USER_PROFILE
    );
  let user = await db.user.findUnique({
    where: { id: userId },
    select: {
      id: !0,
      role: !0,
      privilege: !0,
    },
  });
  if (!user) throw new Response("User not found", { status: 404 });
  let [hasEditPrivPerm, hasEditRolePerm] = await self.hasPermission(
    Permissions.PERM_EDIT_USER_PRIVILEGE,
    Permissions.PERM_EDIT_USER_ROLE
  );
  return (0, import_node67.json)({ user, hasEditPrivPerm, hasEditRolePerm });
}
async function action22({ request, params }) {
  let userId = invariant(idScheme, params.userId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE);
  let form = await request.formData();
  switch (form.get("_action")) {
    case "setRole" /* SetRole */: {
      await self.checkPermission(Permissions.PERM_EDIT_USER_ROLE);
      let role = invariant(roleScheme, form.get("role"));
      return (
        await db.$transaction(async (db2) => {
          if (
            !(await db2.user.findUnique({
              where: { id: userId },
              select: { id: !0, role: !0 },
            }))
          )
            throw new Response("User not found", { status: 404 });
          await db2.user.update({
            where: { id: userId },
            data: { role },
          });
        }),
        null
      );
    }
    case "setPrivilege" /* SetPrivilege */: {
      await self.checkPermission(Permissions.PERM_EDIT_USER_PRIVILEGE);
      let privilege = invariant(privilegeScheme, form.get("privilege"));
      return (
        await db.$transaction(async (db2) => {
          if (
            !(await db2.user.findUnique({
              where: { id: userId },
              select: { id: !0, privilege: !0 },
            }))
          )
            throw new Response("User not found", { status: 404 });
          await db2.user.update({
            where: { id: userId },
            data: { privilege },
          });
        }),
        null
      );
    }
  }
  throw new Response("Invalid action", { status: 400 });
}
function UserManage() {
  let loaderData = useSignalLoaderData(),
    user = (0, import_signals_react56.useComputed)(() => loaderData.value.user),
    hasEditPrivPerm = (0, import_signals_react56.useComputed)(
      () => loaderData.value.hasEditPrivPerm
    ),
    hasEditRolePerm = (0, import_signals_react56.useComputed)(
      () => loaderData.value.hasEditRolePerm
    ),
    transition = useSignalTransition(),
    isUserBanned = (0, import_signals_react56.useComputed)(
      () => !(user.value.privilege & Privileges.PRIV_OPERATE)
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        hasEditPrivPerm.value &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            import_jsx_runtime.Fragment,
            {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                  children: "\u7BA1\u7406\u5458\u64CD\u4F5C",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  import_react87.Form,
                  {
                    method: "post",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                        type: "hidden",
                        name: "privilege",
                        value: user.value.privilege ^ Privileges.PRIV_OPERATE,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
                        className: "btn btn-primary gap-2",
                        type: "submit",
                        name: "_action",
                        value: "setPrivilege" /* SetPrivilege */,
                        disabled: transition.isRunning,
                        children: [
                          isUserBanned.value
                            ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                import_hi45.HiOutlineLockOpen,
                                {}
                              )
                            : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                import_hi45.HiOutlineXCircle,
                                {}
                              ),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                            children: isUserBanned.value
                              ? "\u53D6\u6D88\u5C01\u7981"
                              : "\u5C01\u7981\u7528\u6237",
                          }),
                        ],
                      }),
                    ],
                  }
                ),
              ],
            }
          ),
        hasEditRolePerm.value &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            import_jsx_runtime.Fragment,
            {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                  children: "\u4FEE\u6539\u7528\u6237\u7CFB\u7EDF\u89D2\u8272",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  import_react87.Form,
                  {
                    method: "post",
                    className: "flex gap-4",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("select", {
                        className: "select select-bordered",
                        name: "role",
                        defaultValue: user.value.role,
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            "option",
                            {
                              value: import_client10.SystemUserRole.Root,
                              children: "\u8D85\u7EA7\u7BA1\u7406\u5458",
                            }
                          ),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            "option",
                            {
                              value: import_client10.SystemUserRole.Admin,
                              children: "\u7CFB\u7EDF\u7BA1\u7406\u5458",
                            }
                          ),
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            "option",
                            {
                              value: import_client10.SystemUserRole.User,
                              children: "\u666E\u901A\u7528\u6237",
                            }
                          ),
                        ],
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
                        className: "btn btn-primary gap-2",
                        type: "submit",
                        name: "_action",
                        value: "setRole" /* SetRole */,
                        disabled: transition.isRunning,
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            import_hi45.HiOutlineCheck,
                            {}
                          ),
                          "\u786E\u8BA4\u4FEE\u6539",
                        ],
                      }),
                    ],
                  }
                ),
              ],
            }
          ),
        !hasEditPrivPerm.value &&
          !hasEditRolePerm.value &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
            children:
              "\u4F60\u662F\u600E\u4E48\u8FDB\u5230\u8FD9\u4E2A\u9875\u9762\u7684\uFF1F",
          }),
      ],
    }
  );
}

// app/routes/user/$userId/files.tsx
var files_exports = {};
__export(files_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action23,
  default: () => UserFilePage,
  loader: () => loader67,
  meta: () => meta34,
});
var import_node68 = require("@remix-run/node"),
  import_node69 = require("@remix-run/node");
var import_signals_react57 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader67({ request, params }) {
  let userId = invariant(idScheme, params.userId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.checkPermission(
      self.userId === userId
        ? Permissions.PERM_EDIT_USER_PROFILE_SELF
        : Permissions.PERM_EDIT_USER_PROFILE
    );
  let user = await db.user.findUnique({
    where: { id: userId },
    select: {
      username: !0,
      nickname: !0,
      createdFiles: {
        orderBy: [{ createdAt: "desc" }, { filename: "asc" }],
      },
    },
  });
  if (!user) throw new Response("User not found", { status: 404 });
  return (0, import_node68.json)({ user });
}
var meta34 = ({ data: data2 }) => ({
  title: `\u7528\u6237\u6587\u4EF6: ${
    (data2 == null ? void 0 : data2.user.nickname) ||
    (data2 == null ? void 0 : data2.user.username)
  } - HITwh OJ`,
});
async function action23({ request, params }) {
  let userId = invariant(idScheme, params.userId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.checkPermission(
      self.userId === userId
        ? Permissions.PERM_EDIT_USER_PROFILE_SELF
        : Permissions.PERM_EDIT_USER_PROFILE
    );
  let form = await (0, import_node69.unstable_parseMultipartFormData)(
    request,
    handler
  );
  switch (form.get("_action")) {
    case "uploadFile" /* UploadFile */: {
      let files = form.getAll("file").filter((file) => file instanceof File);
      if (!files.length) throw new Response("File missing", { status: 400 });
      let result = await Promise.all(
        files.map((file) => createUserFile(file, userId))
      );
      return (0, import_node68.json)(result);
    }
    case "removeFile" /* RemoveFile */: {
      let fid = invariant(uuidScheme, form.get("fid")),
        file = await db.file.findUnique({
          where: { id: fid },
          select: { userId: !0 },
        });
      if (!file || file.userId !== userId)
        throw new Response("File not found", { status: 404 });
      return await removeFile(fid), null;
    }
  }
  throw new Response("I'm a teapot", { status: 418 });
}
function UserFilePage() {
  let loaderData = useSignalLoaderData(),
    files = (0, import_signals_react57.useComputed)(
      () => loaderData.value.user.createdFiles
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h2", {
          className: "flex items-center justify-between",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u7528\u6237\u6587\u4EF6",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FileUploader, {
              uploadAction: "uploadFile" /* UploadFile */,
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
          children:
            "\u4E0A\u4F20\u5373\u4EE3\u8868\u540C\u610F\u6211\u4EEC\u7684\u7528\u6237\u624B\u518C\uFF08\u867D\u7136\u6CA1\u6709\u8FD9\u4E2A\u4E1C\u897F\uFF09",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FileList, {
          files: files.value,
          deleteAction: "removeFile" /* RemoveFile */,
        }),
      ],
    }
  );
}

// app/routes/user/$userId/index.ts
var userId_exports2 = {};
__export(userId_exports2, {
  loader: () => loader68,
});
var import_node70 = require("@remix-run/node");
function loader68({ params }) {
  return (0, import_node70.redirect)(`/user/${params.userId}/profile`);
}

// app/routes/user/$userId/edit.tsx
var edit_exports5 = {};
__export(edit_exports5, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action24,
  default: () => UserEdit,
  loader: () => loader69,
  meta: () => meta35,
});
var import_node71 = require("@remix-run/node"),
  import_react88 = require("@remix-run/react"),
  import_zod4 = require("zod");
var import_signals_react58 = require("@preact/signals-react");
var import_react89 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader69({ request, params }) {
  let userId = invariant(idScheme, params.userId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.checkPermission(
      self.userId === userId
        ? Permissions.PERM_EDIT_USER_PROFILE_SELF
        : Permissions.PERM_EDIT_USER_PROFILE
    );
  let user = await db.user.findUnique({
    where: { id: userId },
    select: {
      username: !0,
      nickname: !0,
      avatar: !0,
      email: !0,
      bio: !0,
      department: !0,
      studentId: !0,
    },
  });
  if (!user) throw new Response("User not found", { status: 404 });
  return (0, import_node71.json)({ user });
}
var meta35 = ({ data: data2 }) => ({
  title: `\u7F16\u8F91\u7528\u6237: ${
    (data2 == null ? void 0 : data2.user.nickname) ||
    (data2 == null ? void 0 : data2.user.username)
  } - HITwh OJ`,
});
async function action24({ request, params }) {
  let userId = invariant(idScheme, params.userId, { status: 404 }),
    self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.checkPermission(
      self.userId === userId
        ? Permissions.PERM_EDIT_USER_PROFILE_SELF
        : Permissions.PERM_EDIT_USER_PROFILE
    );
  let form = await request.formData(),
    username = invariant(usernameScheme, form.get("username")),
    nickname = invariant(
      nicknameScheme.or(emptyStringScheme),
      form.get("nickname")
    ),
    avatar = invariant(
      import_zod4.z
        .string()
        .url("Avatar must be a valid URL")
        .or(emptyStringScheme),
      form.get("avatar")
    ),
    email = invariant(emailScheme.or(emptyStringScheme), form.get("email")),
    bio = invariant(bioScheme.or(emptyStringScheme), form.get("bio")),
    department = invariant(import_zod4.z.string(), form.get("department")),
    studentId = invariant(import_zod4.z.string(), form.get("studentId"));
  return (
    await db.$transaction(async (db2) => {
      let user = await db2.user.findUnique({
        where: { username },
        select: { id: !0 },
      });
      if (user && user.id !== userId)
        throw new Response("Username already taken", { status: 400 });
      await db2.user.update({
        where: { id: userId },
        data: {
          username,
          nickname,
          avatar,
          email,
          bio,
          department,
          studentId,
        },
      });
    }),
    null
  );
}
function UserEdit() {
  let loaderData = useSignalLoaderData(),
    user = (0, import_signals_react58.useComputed)(() => loaderData.value.user),
    transition = useSignalTransition(),
    Toasts = useToasts();
  return (
    (0, import_react89.useEffect)(() => {
      transition.actionSuccess && Toasts.success("\u66F4\u65B0\u6210\u529F");
    }, [transition.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react88.Form, {
      method: "post",
      className: "form-control mx-auto w-full max-w-lg gap-4",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children:
                  "\u7528\u6237\u540D (\u5B57\u6BCD\u6570\u5B57\u4E0B\u5212\u7EBF)",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              className: "input input-bordered",
              type: "text",
              name: "username",
              defaultValue: user.value.username,
              disabled: transition.isRunning,
              required: !0,
              pattern: "\\w+",
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u7528\u6237\u6635\u79F0",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              className: "input input-bordered",
              type: "text",
              name: "nickname",
              defaultValue: user.value.nickname,
              disabled: transition.isRunning,
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u4E2A\u6027\u7B7E\u540D",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              className: "input input-bordered",
              type: "text",
              name: "bio",
              defaultValue: user.value.bio,
              disabled: transition.isRunning,
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u7535\u5B50\u90AE\u7BB1",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              className: "input input-bordered",
              type: "email",
              name: "email",
              defaultValue: user.value.email,
              disabled: transition.isRunning,
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children:
                  "\u5934\u50CF\u5730\u5740 (\u6BD4\u8F83\u8BE1\u5F02\uFF0C\u4F30\u8BA1\u8981\u6539)",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              className: "input input-bordered",
              type: "text",
              name: "avatar",
              defaultValue: user.value.avatar,
              placeholder: "https://",
              disabled: transition.isRunning,
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u5DE5\u4F5C\u5355\u4F4D",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              className: "input input-bordered",
              type: "text",
              name: "department",
              defaultValue: user.value.department,
              disabled: transition.isRunning,
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "form-control",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
              className: "label",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                className: "label-text",
                children: "\u5B66\u53F7",
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              className: "input input-bordered",
              type: "text",
              name: "studentId",
              defaultValue: user.value.studentId,
              disabled: transition.isRunning,
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
          className: "form-control",
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
            className: "btn btn-primary",
            type: "submit",
            disabled: transition.isRunning,
            children: "\u786E\u8BA4\u4FEE\u6539",
          }),
        }),
      ],
    })
  );
}

// app/routes/admin/judge.tsx
var judge_exports = {};
__export(judge_exports, {
  default: () => JudgeAdmin,
  loader: () => loader70,
  meta: () => meta36,
});
var import_signals_react59 = require("@preact/signals-react"),
  import_node72 = require("@remix-run/node");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader70({ request }) {
  let self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.checkPermission(UserPermission.Roots);
  let judges = await db.judge.findMany({
      select: {
        id: !0,
        ip: !0,
        port: !0,
        name: !0,
      },
    }),
    states = judge.getState();
  return (0, import_node72.json)({ judges, states });
}
var meta36 = () => ({
  title: "\u8BC4\u6D4B\u673A\u7BA1\u7406 - HITwh OJ",
});
function JudgeAdmin() {
  let loaderData = useSignalLoaderData(),
    judges = (0, import_signals_react59.useComputed)(
      () => loaderData.value.judges
    ),
    states = (0, import_signals_react59.useComputed)(
      () => loaderData.value.states
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: "\u8BC4\u6D4B\u673A\u7BA1\u7406",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className: "stats w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "stat",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-title",
                  children: "\u5728\u7EBF\u8BC4\u6D4B\u673A",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-value",
                  children: states.value.filter(
                    ({ state }) => state.status === "Online"
                  ).length,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "stat",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-title",
                  children: "\u6389\u7EBF\u8BC4\u6D4B\u673A",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "stat-value",
                  children: states.value.filter(
                    ({ state }) => state.status === "Offline"
                  ).length,
                }),
              ],
            }),
          ],
        }),
        judges.value.map((judge2) => {
          var _a2;
          let state =
            (_a2 = states.value.find((s2) => s2.id === judge2.id)) == null
              ? void 0
              : _a2.state;
          return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            "div",
            {
              className: "not-prose card bg-base-200 my-4",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                className: "card-body",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                    className: "card-title",
                    children: judge2.name,
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", {
                    className: "flex gap-4",
                    children: [
                      (state == null ? void 0 : state.status) === "Online"
                        ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                            className: "text-success",
                            children: "\u5728\u7EBF",
                          })
                        : /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                            className: "text-error",
                            children: "\u79BB\u7EBF",
                          }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", {
                        className: "opacity-60",
                        children: [judge2.ip, ":", judge2.port],
                      }),
                    ],
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                    className: "card-actions justify-end",
                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      "button",
                      {
                        className: "btn btn-primary",
                        onClick: () => alert("TODO: \u8FD8\u6CA1\u5199"),
                        children: "\u91CD\u8FDE",
                      }
                    ),
                  }),
                ],
              }),
            },
            judge2.id
          );
        }),
      ],
    }
  );
}

// app/routes/chat/events.tsx
var events_exports4 = {};
__export(events_exports4, {
  loader: () => loader71,
});
var import_rxjs11 = require("rxjs");
var observer6 = privateMessageSubject.pipe(
  (0, import_rxjs11.mergeMap)((id) =>
    (0, import_rxjs11.from)(
      db.privateMessage.findUnique({
        where: { id },
        select: {
          to: { select: { ...selectUserData } },
          from: { select: { ...selectUserData } },
          content: !0,
          sentAt: !0,
        },
      })
    )
  ),
  (0, import_rxjs11.filter)(isNotNull)
);
async function loader71({ request }) {
  let self = await findRequestUser(request);
  if (!self.userId) throw new Response("Unauthorized", { status: 401 });
  return (
    await self.checkPermission(Permissions.PERM_VIEW_USER_PM_SELF),
    createEventSource(
      request,
      observer6.pipe(
        (0, import_rxjs11.filter)((message) => message.to.id === self.userId)
      )
    )
  );
}

// app/routes/contest/new.tsx
var new_exports5 = {};
__export(new_exports5, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action25,
  default: () => ContestNew,
  loader: () => loader72,
  meta: () => meta37,
});
var import_node73 = require("@remix-run/node"),
  import_react90 = require("@remix-run/react");
var import_client11 = require("@prisma/client");
var import_react91 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader72({ request }) {
  let self = await findRequestUser(request);
  return (
    await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.team(null).checkPermission(Permissions.PERM_CREATE_CONTEST),
    null
  );
}
async function action25({ request }) {
  let self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.team(null).checkPermission(Permissions.PERM_CREATE_CONTEST);
  let form = await request.formData(),
    title = invariant(titleScheme, form.get("title")),
    description = invariant(descriptionScheme, form.get("description")),
    timezone = invariant(timezoneScheme, form.get("timezone")),
    beginTime = adjustTimezone(
      invariant(datetimeStringScheme, form.get("beginTime")),
      timezone
    ),
    endTime = adjustTimezone(
      invariant(datetimeStringScheme, form.get("endTime")),
      timezone
    ),
    system = invariant(systemScheme, form.get("system")),
    { id: contestId } = await db.contest.create({
      data: {
        title,
        description,
        beginTime,
        endTime,
        system,
        participants: {
          create: {
            userId: self.userId,
            role: "Mod",
          },
        },
      },
    });
  return (0, import_node73.redirect)(`/contest/${contestId}/edit`);
}
var meta37 = () => ({
  title: "\u521B\u5EFA\u6BD4\u8D5B - HITwh OJ",
});
function ContestNew() {
  let transition = useSignalTransition(),
    Toasts = useToasts();
  return (
    (0, import_react91.useEffect)(() => {
      transition.actionSuccess && Toasts.success("\u521B\u5EFA\u6210\u529F");
    }, [transition.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: "\u521B\u5EFA\u6BD4\u8D5B",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react90.Form, {
          method: "post",
          className: "form-control gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u6807\u9898",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "text",
                  name: "title",
                  required: !0,
                  disabled: transition.isRunning,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u6BD4\u8D5B\u4ECB\u7ECD",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MarkdownEditor, {
                  name: "description",
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
                  className: "label",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text",
                      children: "\u6BD4\u8D5B\u5F00\u59CB\u65F6\u95F4",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text-alt",
                      children:
                        Intl.DateTimeFormat().resolvedOptions().timeZone,
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "datetime-local",
                  name: "beginTime",
                  required: !0,
                  disabled: transition.isRunning,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
                  className: "label",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text",
                      children: "\u6BD4\u8D5B\u7ED3\u675F\u65F6\u95F4",
                    }),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      className: "label-text-alt",
                      children:
                        Intl.DateTimeFormat().resolvedOptions().timeZone,
                    }),
                  ],
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "datetime-local",
                  name: "endTime",
                  required: !0,
                  disabled: transition.isRunning,
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  type: "hidden",
                  name: "timezone",
                  value: new Date().getTimezoneOffset(),
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control w-full max-w-xs",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u6BD4\u8D5B\u8D5B\u5236",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("select", {
                  className: "select select-bordered",
                  name: "system",
                  required: !0,
                  disabled: transition.isRunning,
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                      value: "",
                      disabled: !0,
                      selected: !0,
                      children:
                        "\u8BF7\u9009\u62E9\u6BD4\u8D5B\u7684\u8D5B\u5236",
                    }),
                    Object.keys(import_client11.ContestSystem).map((key) =>
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                        "option",
                        {
                          value: key,
                          children: key,
                        },
                        key
                      )
                    ),
                  ],
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "form-control w-full max-w-xs",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                className: "btn btn-primary",
                type: "submit",
                disabled: transition.isRunning,
                children: "\u521B\u5EFA\u6BD4\u8D5B",
              }),
            }),
          ],
        }),
      ],
    })
  );
}

// app/routes/problem/new.tsx
var new_exports6 = {};
__export(new_exports6, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action26,
  default: () => ProblemNew2,
  loader: () => loader73,
});
var import_node74 = require("@remix-run/node"),
  import_react92 = require("@remix-run/react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader73({ request }) {
  let self = await findRequestUser(request);
  return (
    await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.team(null).checkPermission(Permissions.PERM_CREATE_PROBLEM),
    null
  );
}
async function action26({ request }) {
  let self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.team(null).checkPermission(Permissions.PERM_CREATE_PROBLEM);
  let form = await request.formData(),
    title = invariant(titleScheme, form.get("title")),
    { id } = await db.problem.create({
      data: { title },
    });
  return (0, import_node74.redirect)(`/problem/${id}/edit`);
}
function ProblemNew2() {
  let transition = useSignalTransition();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: "\u65B0\u5EFA\u9898\u76EE",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react92.Form, {
          method: "post",
          className: "form-control w-full max-w-xs gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u9898\u76EE\u540D\u79F0",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "text",
                  name: "title",
                  required: !0,
                  disabled: transition.isRunning,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "form-control",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                className: "btn btn-primary",
                type: "submit",
                disabled: transition.isRunning,
                children: "\u521B\u5EFA\u9898\u76EE",
              }),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/playground.tsx
var playground_exports = {};
__export(playground_exports, {
  default: () => PlayGround,
});
var import_signals_react60 = require("@preact/signals-react"),
  import_react93 = require("@remix-run/react"),
  import_react94 = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
function PlayGround() {
  let code3 = (0, import_signals_react60.useSignal)(`#include <stdio.h>
int main() {
  int a, b;
  scanf("%d%d", &a, &b);
  printf("%d\\n", a + b);
}
`),
    stdin = (0, import_signals_react60.useSignal)("114 514"),
    stdout = (0, import_signals_react60.useSignal)(""),
    language2 = (0, import_signals_react60.useSignal)("cpp");
  return (
    (0, import_react94.useEffect)(() => {
      let cacheCode = localStorage.getItem("playground.code");
      typeof cacheCode == "string" && (code3.value = cacheCode);
      let cacheLanguage = localStorage.getItem("playground.language");
      typeof cacheLanguage == "string" && (language2.value = cacheLanguage);
    }, []),
    (0, import_react93.useBeforeUnload)(
      (0, import_react94.useCallback)(() => {
        localStorage.setItem("playground.code", code3.value),
          localStorage.setItem("playground.language", language2.value);
      }, [code3.value, language2.value])
    ),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Fullscreen, {
      visible: !0,
      className: "bg-base-100",
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "flex h-full flex-row",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
            className: "flex-1",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              VscodeEditor,
              {
                code: code3,
                language: language2.value,
              }
            ),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className: "w-96 overflow-auto p-4",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                children: "\u9009\u62E9\u8BED\u8A00",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("select", {
                className: "select select-bordered",
                value: language2.value,
                onChange: (e) => (language2.value = e.currentTarget.value),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                    value: "c",
                    children: "C",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                    value: "cpp",
                    children: "C++",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
                    value: "python",
                    children: "Python",
                  }),
                ],
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                children: "\u8F93\u5165",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("textarea", {
                className: "textarea textarea-bordered w-full",
                value: stdin.value,
                onChange: (e) => (stdin.value = e.target.value),
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                className: "btn",
                onClick: () => {
                  (stdout.value = "[INFO] Initializing..."),
                    Promise.resolve()
                      .then(() => (init_wasi(), wasi_exports))
                      .then(
                        ({ runCode: runCode2 }) => (
                          (stdout.value = "[INFO] Downloading..."),
                          runCode2(code3.value, stdin.value, language2.value)
                        )
                      )
                      .then((output) => (stdout.value = output));
                },
                children: "\u70B9\u51FB\u8FD0\u884C",
              }),
              stdout.value &&
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  import_jsx_runtime.Fragment,
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                        children: "\u8F93\u51FA",
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("pre", {
                        children: stdout.value,
                      }),
                    ],
                  }
                ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "alert alert-info mt-4",
                children:
                  "\u6CE8\u610F\uFF1A\u5B9E\u9A8C\u6027\u529F\u80FD\uFF0C\u76EE\u524D\u6682\u4E0D\u652F\u6301 bits/stdc++.h \u5934\u6587\u4EF6",
              }),
            ],
          }),
        ],
      }),
    })
  );
}

// app/routes/team/index.tsx
var team_exports = {};
__export(team_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => TeamList,
  loader: () => loader74,
  meta: () => meta38,
});
var import_node75 = require("@remix-run/node"),
  import_react96 = require("@remix-run/react");

// app/src/team/TeamLink.tsx
var import_react95 = require("@remix-run/react"),
  import_hi46 = require("react-icons/hi"),
  import_jsx_runtime = require("react/jsx-runtime");
function TeamLink({ team }) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react95.Link, {
    className: "link inline-flex items-center gap-2",
    to: `/team/${team.id}`,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_hi46.HiOutlineUserGroup,
        {}
      ),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
        children: team.name,
      }),
    ],
  });
}

// app/routes/team/index.tsx
var import_hi47 = require("react-icons/hi");
var import_signals_react61 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime"),
  meta38 = () => ({
    title: "\u56E2\u961F\u5217\u8868 - HITwh OJ",
  }),
  PAGE_SIZE9 = 15;
async function loader74({ request }) {
  let self = await findRequestUser(request),
    [hasCreatePerm] = await self.hasPermission(Permissions.PERM_TEAM_CREATE),
    url = new URL(request.url),
    page = invariant(pageScheme, url.searchParams.get("page") || "1"),
    totalTeams = await db.team.count({});
  if (totalTeams && page > Math.ceil(totalTeams / PAGE_SIZE9))
    throw new Response("Page is out of range", { status: 404 });
  let teams = await db.team.findMany({
    orderBy: { name: "asc" },
    skip: (page - 1) * PAGE_SIZE9,
    take: PAGE_SIZE9,
  });
  return (0, import_node75.json)({
    teams,
    totalTeams,
    currentPage: page,
    hasCreatePerm,
  });
}
function TeamList() {
  let loaderData = useSignalLoaderData(),
    teams = (0, import_signals_react61.useComputed)(
      () => loaderData.value.teams
    ),
    totalTeams = (0, import_signals_react61.useComputed)(
      () => loaderData.value.totalTeams
    ),
    currentPage = (0, import_signals_react61.useComputed)(
      () => loaderData.value.currentPage
    ),
    hasCreatePerm = (0, import_signals_react61.useComputed)(
      () => loaderData.value.hasCreatePerm
    ),
    totalPages = (0, import_signals_react61.useComputed)(() =>
      Math.ceil(totalTeams.value / PAGE_SIZE9)
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("h1", {
          className: "flex items-center justify-between",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
              children: "\u56E2\u961F\u5217\u8868",
            }),
            hasCreatePerm.value &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                import_react96.Link,
                {
                  className: "btn btn-primary",
                  to: "new",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_hi47.HiOutlinePlus,
                      {}
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                      children: "\u65B0\u5EFA\u56E2\u961F",
                    }),
                  ],
                }
              ),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
          className: "not-prose table-compact table w-full",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    className: "w-16",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                    children: "\u56E2\u961F",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
              children: teams.value.map((team) =>
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                  "tr",
                  {
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("th", {
                        className: "text-center",
                        children: team.id,
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          TeamLink,
                          {
                            team,
                          }
                        ),
                      }),
                    ],
                  },
                  team.id
                )
              ),
            }),
          ],
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Pagination, {
          action: "/team",
          totalPages: totalPages.value,
          currentPage: currentPage.value,
        }),
      ],
    }
  );
}

// app/routes/chat/user.tsx
var user_exports = {};
__export(user_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => UserChatIndex,
  loader: () => loader75,
});
var import_react97 = require("@remix-run/react");
var import_hi48 = require("react-icons/hi");
var import_signals_react62 = require("@preact/signals-react");
var import_jsx_runtime = require("react/jsx-runtime");
async function loader75({ request }) {
  let self = await findRequestUser(request);
  if (!self.userId) throw new Response("Unauthorized", { status: 401 });
  return (
    await self.checkPermission(Permissions.PERM_VIEW_USER_PM_SELF),
    {
      messages: await db.privateMessage.findMany({
        where: {
          OR: [{ fromId: self.userId }, { toId: self.userId }],
        },
        orderBy: { sentAt: "desc" },
        distinct: ["fromId", "toId"],
        select: {
          from: { select: { ...selectUserData } },
          to: { select: { ...selectUserData } },
          content: !0,
          sentAt: !0,
        },
      }),
    }
  );
}
function UserChatIndex() {
  let loaderData = useSignalLoaderData(),
    self = useUser(),
    messages = useSynchronized(() => loaderData.value.messages),
    users = (0, import_signals_react62.useComputed)(() => {
      let set = /* @__PURE__ */ new Set();
      return messages.value
        .map((message) => ({
          user: message.from.id === self.value ? message.to : message.from,
          message,
        }))
        .filter(({ user }) => (set.has(user.id) ? !1 : (set.add(user.id), !0)));
    });
  return (
    (0, import_signals_react62.useSignalEffect)(() => {
      if (self.value) {
        let subscription = fromEventSource("/chat/events").subscribe(
          (message) => {
            messages.value = [message, ...messages.value];
          }
        );
        return () => subscription.unsubscribe();
      }
    }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Fullscreen, {
      visible: !0,
      className: "not-prose bg-base-100 flex",
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
        className: "drawer-mobile drawer",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
            type: "checkbox",
            className: "drawer-toggle",
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
            className: "drawer-content overflow-hidden px-4",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              import_react97.Outlet,
              {}
            ),
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
            className: "drawer-side",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                className: "drawer-overlay",
              }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("aside", {
                className: "bg-base-200 p-4",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                    import_react97.Link,
                    {
                      className: "btn btn-ghost gap-2",
                      to: "/",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                          import_hi48.HiOutlineChevronLeft,
                          {}
                        ),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                          children: "\u8FD4\u56DE\u5230\u4E0A\u4E00\u9875",
                        }),
                      ],
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ul", {
                    className: "menu mt-4 w-72 p-0",
                    children: users.value.map(({ user, message }) =>
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                        "li",
                        {
                          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                            import_react97.NavLink,
                            {
                              to: `/chat/user/${user.id}`,
                              className: "w-full p-4",
                              children: /* @__PURE__ */ (0,
                              import_jsx_runtime.jsxs)("div", {
                                className: "flex w-full items-center gap-3",
                                children: [
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    UserAvatar,
                                    {
                                      user,
                                      className:
                                        "bg-base-300 h-16 w-16 flex-shrink-0 text-3xl",
                                    }
                                  ),
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                                    "div",
                                    {
                                      className: "overflow-hidden",
                                      children: [
                                        /* @__PURE__ */ (0,
                                        import_jsx_runtime.jsx)("div", {
                                          className:
                                            "overflow-hidden text-ellipsis whitespace-nowrap text-xl font-bold",
                                          children:
                                            user.nickname || user.username,
                                        }),
                                        /* @__PURE__ */ (0,
                                        import_jsx_runtime.jsx)("div", {
                                          className:
                                            "overflow-hidden text-ellipsis whitespace-nowrap",
                                          children: message.content,
                                        }),
                                      ],
                                    }
                                  ),
                                ],
                              }),
                            }
                          ),
                        },
                        user.id
                      )
                    ),
                  }),
                ],
              }),
            ],
          }),
        ],
      }),
    })
  );
}

// app/routes/chat/user/$userId/events.tsx
var events_exports5 = {};
__export(events_exports5, {
  loader: () => loader76,
});
var import_rxjs12 = require("rxjs");
var observer7 = privateMessageSubject.pipe(
  (0, import_rxjs12.mergeMap)((id) =>
    (0, import_rxjs12.from)(
      db.privateMessage.findUnique({
        where: { id },
        select: {
          id: !0,
          fromId: !0,
          toId: !0,
          content: !0,
          sentAt: !0,
        },
      })
    )
  ),
  (0, import_rxjs12.filter)(isNotNull)
);
async function loader76({ request, params }) {
  let userId = invariant(idScheme, params.userId, { status: 404 }),
    self = await findRequestUser(request);
  if (!self.userId) throw new Response("Unauthorized", { status: 401 });
  return (
    await self.checkPermission(Permissions.PERM_VIEW_USER_PM_SELF),
    createEventSource(
      request,
      observer7.pipe(
        (0, import_rxjs12.filter)(
          (message) =>
            (message.toId === self.userId && message.fromId === userId) ||
            (message.toId === userId && message.fromId === self.userId)
        )
      )
    )
  );
}

// app/routes/chat/user/$userId/index.tsx
var userId_exports3 = {};
__export(userId_exports3, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action27,
  default: () => ChatIndex,
  loader: () => loader77,
  meta: () => meta39,
});
var import_node76 = require("@remix-run/node");
var import_react98 = require("@remix-run/react"),
  import_react99 = require("react");
var import_hi49 = require("react-icons/hi");
var import_signals_react63 = require("@preact/signals-react");
var import_jsx_runtime = require("react/jsx-runtime"),
  meta39 = ({ data: data2 }) => ({
    title: `\u804A\u5929: ${
      (data2 == null ? void 0 : data2.target.nickname) ||
      (data2 == null ? void 0 : data2.target.username)
    } - HITwh OJ`,
  });
async function loader77({ request, params }) {
  let self = await findRequestUser(request);
  if (!self.userId) throw new Response("Unauthorized", { status: 401 });
  await self.checkPermission(Permissions.PERM_VIEW_USER_PM_SELF);
  let userId = invariant(idScheme, params.userId, { status: 404 }),
    [target, source2] = await db.$transaction([
      db.user.findUnique({
        where: { id: userId },
        select: { ...selectUserData },
      }),
      db.user.findUnique({
        where: { id: self.userId },
        select: { ...selectUserData },
      }),
    ]);
  if (!target || !source2)
    throw new Response("User not exists", { status: 404 });
  let msgs = await db.privateMessage.findMany({
    where: {
      OR: [
        { fromId: self.userId, toId: userId },
        { fromId: userId, toId: self.userId },
      ],
    },
    orderBy: {
      sentAt: "asc",
    },
    select: {
      id: !0,
      fromId: !0,
      toId: !0,
      content: !0,
      sentAt: !0,
    },
  });
  return (0, import_node76.json)({ source: source2, target, msgs });
}
async function action27({ request }) {
  let self = await findRequestUser(request);
  if (!self.userId) throw new Response("Unauthorized", { status: 401 });
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.checkPermission(Permissions.PERM_VIEW_USER_PM_SELF);
  let form = await request.formData(),
    to = invariant(idScheme, form.get("to")),
    content3 = invariant(contentScheme, form.get("content")),
    message = await db.privateMessage.create({
      data: {
        from: { connect: { id: self.userId } },
        to: { connect: { id: to } },
        content: content3,
      },
      select: { id: !0 },
    });
  return privateMessageSubject.next(message.id), null;
}
function ChatIndex() {
  let loaderData = useSignalLoaderData(),
    target = (0, import_signals_react63.useComputed)(
      () => loaderData.value.target
    ),
    source2 = (0, import_signals_react63.useComputed)(
      () => loaderData.value.source
    ),
    msgs = (0, import_signals_react63.useComputed)(() => loaderData.value.msgs),
    messages = useSynchronized(() => msgs.value);
  (0, import_signals_react63.useSignalEffect)(() => {
    let subscription = fromEventSource(`./${target.value.id}/events`).subscribe(
      (message) => {
        messages.value = [...messages.value, message];
      }
    );
    return () => subscription.unsubscribe();
  });
  let formRef = (0, import_react99.useRef)(null),
    transition = useSignalTransition();
  return (
    (0, import_react99.useEffect)(() => {
      var _a2;
      transition.actionSuccess &&
        ((_a2 = formRef.current) == null || _a2.reset());
    }, [transition.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
      className: "flex h-full w-full flex-col",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("header", {
          className: "bg-base-100 sticky top-0 z-10 py-4",
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
            className: "text-2xl font-bold",
            children: target.value.nickname || target.value.username,
          }),
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
          className: "flex-1",
          children:
            messages.value.length > 0
              ? messages.value.map((message, index2, array) => {
                  let isFirst =
                      index2 === 0 ||
                      array[index2 - 1].fromId !== message.fromId ||
                      new Date(message.sentAt).getTime() -
                        new Date(array[index2 - 1].sentAt).getTime() >
                        3e5,
                    from8 =
                      message.fromId === target.value.id ? target : source2;
                  return isFirst
                    ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                        "div",
                        {
                          className:
                            "hover:bg-base-200 flex gap-4 px-2 pt-2 transition",
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                              UserAvatar,
                              {
                                className:
                                  "bg-base-300 h-12 w-12 flex-shrink-0 text-2xl",
                                user: from8.value,
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                              "div",
                              {
                                className: "flex-1",
                                children: [
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    "div",
                                    {
                                      className: "flex w-full justify-between",
                                      children: /* @__PURE__ */ (0,
                                      import_jsx_runtime.jsx)("span", {
                                        className: "text-primary",
                                        children:
                                          from8.value.nickname ||
                                          from8.value.username,
                                      }),
                                    }
                                  ),
                                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                    "div",
                                    {
                                      className: "min-w-0 break-words",
                                      children: message.content,
                                    }
                                  ),
                                ],
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                              children: /* @__PURE__ */ (0,
                              import_jsx_runtime.jsx)("span", {
                                className: "tooltip tooltip-left",
                                "data-tip": formatDateTime(message.sentAt),
                                children: /* @__PURE__ */ (0,
                                import_jsx_runtime.jsx)("time", {
                                  className:
                                    "text-base-content text-sm opacity-60",
                                  children: formatTime(message.sentAt),
                                }),
                              }),
                            }),
                          ],
                        },
                        message.id
                      )
                    : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                        "div",
                        {
                          className:
                            "hover:bg-base-200 group flex gap-4 px-2 transition",
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                              className: "h-0 w-12 flex-shrink-0",
                            }),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                              "span",
                              {
                                className: "min-w-0 flex-1 break-words",
                                children: message.content,
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                              children: /* @__PURE__ */ (0,
                              import_jsx_runtime.jsx)("span", {
                                className: "tooltip tooltip-left",
                                "data-tip": formatDateTime(message.sentAt),
                                children: /* @__PURE__ */ (0,
                                import_jsx_runtime.jsx)("time", {
                                  className:
                                    "text-sm opacity-0 transition group-hover:opacity-60",
                                  children: formatTime(message.sentAt),
                                }),
                              }),
                            }),
                          ],
                        },
                        message.id
                      );
                })
              : /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                  className: "grid h-full w-full place-items-center",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "text-base-content",
                      children:
                        "\u5FEB\u6765\u8DDF TA \u6253\u4E2A\u62DB\u547C\u5427",
                    }
                  ),
                }),
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react98.Form, {
          method: "post",
          ref: formRef,
          className: "bg-base-100 sticky bottom-0 z-10 flex gap-4 py-4",
          autoComplete: "off",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              type: "hidden",
              name: "to",
              value: target.value.id,
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
              className: "input input-bordered flex-1",
              type: "text",
              placeholder: "\u8F93\u5165\u6D88\u606F...",
              name: "content",
              required: !0,
              disabled: transition.isRunning,
              autoComplete: "false",
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", {
              className: "btn btn-primary gap-2",
              type: "submit",
              disabled: transition.isRunning,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_hi49.HiOutlinePaperAirplane,
                  {
                    className: "rotate-90",
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
                  children: "\u53D1\u9001",
                }),
              ],
            }),
          ],
        }),
      ],
    })
  );
}

// app/routes/chat/user/index.tsx
var user_exports2 = {};
__export(user_exports2, {
  default: () => UserChatIndex2,
});
var import_jsx_runtime = require("react/jsx-runtime");
function UserChatIndex2() {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
    className: "grid h-full w-full place-items-center",
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
      className: "text-base-content",
      children: "\u8BF7\u5728\u5DE6\u4FA7\u9009\u62E9\u4F1A\u8BDD",
    }),
  });
}

// app/routes/register.tsx
var register_exports2 = {};
__export(register_exports2, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action28,
  default: () => Register,
});
var import_node77 = require("@remix-run/node"),
  import_node78 = require("@remix-run/node");
var import_react100 = require("@remix-run/react");
var import_signals_react64 = require("@preact/signals-react");
var import_react101 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function action28({ request }) {
  let form = await request.formData(),
    username = invariant(usernameScheme, form.get("username")),
    password = invariant(passwordScheme, form.get("password")),
    result = await db.$transaction(async (db2) => {
      if (await db2.user.findUnique({ where: { username } }))
        return { success: !1, reason: "\u7528\u6237\u5DF2\u5B58\u5728" };
      let hashedPassword = passwordHash(password);
      return {
        success: !0,
        user: await db2.user.create({
          data: { username, password: hashedPassword },
        }),
      };
    });
  return result.success
    ? (0, import_node77.redirect)("/", {
        headers: { "Set-Cookie": await commitSession(result.user.id) },
      })
    : (0, import_node78.json)(result, 400);
}
function Register() {
  let data2 = (0, import_react100.useActionData)(),
    transition = useSignalTransition(),
    Toasts = useToasts();
  (0, import_react101.useEffect)(() => {
    transition.actionSuccess && Toasts.success("\u767B\u5F55\u6210\u529F");
  }, [transition.actionSuccess]);
  let password = (0, import_signals_react64.useSignal)("");
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: "\u6CE8\u518C",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
          children:
            "\u7F51\u7AD9\u5185\u6D4B\u4E2D\uFF0C\u968F\u65F6\u5220\u6863\uFF0C\u8BF7\u4E0D\u8981\u4E0A\u4F20\u4EFB\u4F55\u8FDD\u53CD\u6CD5\u5F8B\u6CD5\u89C4\u7684\u5185\u5BB9\u3002",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react100.Form, {
          method: "post",
          className: "not-prose form-control w-full max-w-xs gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children:
                        "\u7528\u6237\u540D (\u8BF7\u4F7F\u7528\u5B57\u6BCD\u6570\u5B57\u4E0B\u5212\u7EBF)",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered w-full max-w-xs",
                  type: "text",
                  name: "username",
                  required: !0,
                  disabled: transition.isRunning,
                  pattern: "\\w+",
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  type: "hidden",
                  name: "password",
                  value: passwordHash(password.value),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u5BC6\u7801",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered w-full max-w-xs",
                  type: "password",
                  value: password.value,
                  onChange: (event) =>
                    (password.value = event.currentTarget.value),
                  required: !0,
                  disabled: transition.isRunning,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                  className: "btn btn-primary",
                  type: "submit",
                  children: "\u6CE8\u518C",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    import_react100.Link,
                    {
                      className: "link link-hover label-text-alt",
                      to: "/login",
                      children: "\u767B\u5F55",
                    }
                  ),
                }),
              ],
            }),
          ],
        }),
        (data2 == null ? void 0 : data2.reason) &&
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
            className: "alert alert-error shadow-lg",
            children: data2.reason,
          }),
      ],
    }
  );
}

// app/routes/team/new.tsx
var new_exports7 = {};
__export(new_exports7, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action29,
  default: () => NewTeam,
  loader: () => loader78,
  meta: () => meta40,
});
var import_node79 = require("@remix-run/node");
var import_client12 = require("@prisma/client");
var import_react102 = require("@remix-run/react");
var import_react103 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader78({ request }) {
  let self = await findRequestUser(request);
  return (
    await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.checkPermission(Permissions.PERM_TEAM_CREATE),
    null
  );
}
var meta40 = () => ({
  title: "\u65B0\u5EFA\u56E2\u961F - HITwh OJ",
});
async function action29({ request }) {
  let self = await findRequestUser(request);
  await self.checkPrivilege(Privileges.PRIV_OPERATE),
    await self.checkPermission(Permissions.PERM_TEAM_CREATE);
  let form = await request.formData(),
    name = invariant(teamNameScheme, form.get("name")),
    { id: teamId } = await db.team.create({
      data: {
        name,
        members: {
          create: [
            {
              userId: self.userId,
              role: import_client12.TeamMemberRole.Owner,
            },
          ],
        },
      },
    });
  return (0, import_node79.redirect)(`/team/${teamId}/settings`);
}
function NewTeam() {
  let transition = useSignalTransition(),
    Toasts = useToasts();
  return (
    (0, import_react103.useEffect)(() => {
      transition.actionSuccess && Toasts.success("\u521B\u5EFA\u6210\u529F");
    }, [transition.actionSuccess]),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: "\u521B\u5EFA\u56E2\u961F",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
          children: "\u521B\u5EFA\u4E00\u4E2A\u65B0\u7684\u56E2\u961F\uFF01",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react102.Form, {
          method: "post",
          className: "form-control w-full max-w-xs gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u56E2\u961F\u540D\u79F0",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered",
                  type: "text",
                  name: "name",
                  required: !0,
                  disabled: transition.actionSuccess,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "form-control",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                className: "btn btn-primary",
                type: "submit",
                disabled: transition.actionSuccess,
                children: "\u521B\u5EFA\u56E2\u961F",
              }),
            }),
          ],
        }),
      ],
    })
  );
}

// app/routes/docs/$.tsx
var __exports = {};
__export(__exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  default: () => DocsPage,
  loader: () => loader79,
  meta: () => meta41,
});
var import_node80 = require("@remix-run/node"),
  import_node81 = require("@remix-run/node");

// app/utils/fs.ts
var import_fs = require("fs");

// app/routes/docs/$.tsx
var import_path2 = require("path");
var import_signals_react65 = require("@preact/signals-react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function loader79({ params }) {
  let path2 = params["*"];
  if (path2) {
    if (!path2.endsWith(".md"))
      throw (0, import_node81.redirect)(`/docs/${path2}.md`);
  } else throw (0, import_node81.redirect)("/docs/index.md");
  let filepath = (0, import_path2.resolve)("docs", path2);
  try {
    await import_fs.promises.access(filepath, import_fs.constants.R_OK);
  } catch {
    throw new Response("\u9875\u9762\u4E0D\u5B58\u5728", { status: 404 });
  }
  try {
    let markdown2 = (
        await import_fs.promises.readFile(filepath, "utf8")
      ).trim(),
      _title = markdown2.startsWith("# ")
        ? (markdown2.indexOf(`
`) > -1
            ? markdown2.slice(
                0,
                markdown2.indexOf(`
`)
              )
            : markdown2
          ).slice(2)
        : "",
      title = _title
        ? `\u5E2E\u52A9: ${_title} - HITwhOJ`
        : "\u5E2E\u52A9 - HITwh OJ";
    return (0, import_node80.json)({ markdown: markdown2, title });
  } catch {
    throw new Response("\u8BFB\u53D6\u6587\u4EF6\u5931\u8D25", { status: 500 });
  }
}
var meta41 = ({ data: data2 }) => ({
  title: data2 == null ? void 0 : data2.title,
});
function DocsPage() {
  let loaderData = useSignalLoaderData(),
    markdown2 = (0, import_signals_react65.useComputed)(
      () => loaderData.value.markdown
    );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Markdown, {
    children: markdown2.value,
  });
}

// app/routes/logout.tsx
var logout_exports = {};
__export(logout_exports, {
  action: () => action30,
});
var import_node82 = require("@remix-run/node");
async function action30({ request }) {
  if (!(await findRequestUser(request)).userId)
    return (0, import_node82.json)(
      { success: !1, reason: "\u7528\u6237\u672A\u767B\u5F55" },
      { status: 401 }
    );
  let session = getSession(request);
  return (0, import_node82.json)(
    { success: !0 },
    { headers: { "Set-Cookie": await destroySession(session) } }
  );
}

// app/routes/index.tsx
var routes_exports = {};
__export(routes_exports, {
  CatchBoundary: () => CatchBoundary,
  ErrorBoundary: () => ErrorBoundary,
  action: () => action31,
  default: () => Index,
  loader: () => loader80,
  meta: () => meta42,
});
var import_node83 = require("@remix-run/node"),
  import_react104 = require("@remix-run/react");
var import_jsx_runtime = require("react/jsx-runtime"),
  meta42 = () => ({
    title: "\u9996\u9875 - HITwh OJ",
  });
async function action31({ request }) {
  let form = await request.formData(),
    pid = invariant(idScheme, form.get("pid"));
  return (0, import_node83.redirect)(`/problem/${pid}`);
}
var problemPageSize = 7,
  contestSize = 4;
async function loader80({ request }) {
  let self = await findRequestUser(request),
    [viewPublicProblems] = await self
      .team(null)
      .hasPermission(Permissions.PERM_VIEW_PROBLEM_PUBLIC),
    [viewPublicContests] = await self
      .team(null)
      .contest(null)
      .hasPermission(Permissions.PERM_VIEW_CONTEST_PUBLIC),
    problems = await db.problem.findMany({
      where: viewPublicProblems ? { team: null, private: !1 } : { id: -1 },
      orderBy: [{ id: "asc" }],
      select: {
        ...selectProblemListData,
        _count: {
          select: {
            relatedRecords: !0,
          },
        },
      },
      take: problemPageSize,
    }),
    contests = await db.contest.findMany({
      where: viewPublicContests ? { team: null, private: !1 } : { id: -1 },
      orderBy: [{ id: "asc" }],
      select: {
        ...selectContestListData,
      },
      take: contestSize,
    });
  return (0, import_node83.json)({ problems, contests });
}
var QQ_LINK =
    "https://qm.qq.com/cgi-bin/qm/qr?k=uFHY05vPwIamUXG6L-xDQvhkA0acwZqA&jump_from=webapi&authKey=96ylLScWBoTxF6zMOsP7wdIbC/7PN1bMs5T74AIOpqeBE6h4NAGnYx/ngkxkVhyx",
  ISSUE_LINK = "https://git.hit.edu.cn/hitwhoj/hitwhoj/-/issues";
function Index() {
  let loaderData = useSignalLoaderData();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: "Welcome to HITwh OJ",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
          className:
            "not-prose grid grid-cols-8 place-content-between gap-4 md:grid-cols-12",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className:
                "card bg-info text-info-content col-span-8 md:col-span-12",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                className: "card-body",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                    className: "card-title",
                    children: "\u7EB3\u65B0\u516C\u544A",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
                    children:
                      "HITwh OJ \u9879\u76EE\u7EC4\u548C HITwh FP \u9879\u76EE\u7EC4\u7EDD\u8D5E\u7EB3\u65B0\u4E2D\uFF01\uFF01\uFF01",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
                    children:
                      "\u9700\u8981\u719F\u6089 nodejs \u5F00\u53D1\u73AF\u5883\uFF0C\u6709 React \u5F00\u53D1\u7ECF\u9A8C\uFF0C\u6709\u70ED\u60C5\u5B66\u4E60\u6700\u65B0\u6700\u524D\u6CBF\u7684\u524D\u7AEF\u6280\u672F\u6808\u3002",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
                    children:
                      "\u8BE6\u60C5\u8BF7\u8054\u7CFB QQ 3224177294 \u6216\u8005\u53D1\u9001\u90AE\u4EF6\u5230 contact#hitwh.moe\u3002",
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "card bg-base-200 col-span-8 row-span-2",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                className: "card-body",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                    className: "card-title",
                    children: "\u901A\u77E5\u516C\u544A",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", {
                    className: "flex items-center",
                    children: [
                      "\u6B22\u8FCE\u52A0\u5165 HITwh OJ \u53CD\u9988 QQ \u7FA4\uFF1A",
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("a", {
                        className: "underline",
                        href: QQ_LINK,
                        target: "_blank",
                        rel: "noreferrer",
                        children: "721141362",
                      }),
                    ],
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("a", {
                      className: "underline",
                      href: ISSUE_LINK,
                      target: "_blank",
                      rel: "noreferrer",
                      children:
                        "\u5982\u679C\u60A8\u53D1\u73B0\u6709\u4EC0\u4E48 BUG\uFF0C\u53EF\u4EE5\u5728\u8FD9\u91CC\u63D0\u4EA4 issue",
                    }),
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "stats bg-base-200 col-span-4",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                className: "stat",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                    className: "stat-title",
                    children: "\u4ECA\u5929",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                    className: "stat-value",
                    children: new Date().toLocaleDateString("zh-CN"),
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                    className: "stat-desc",
                    children: new Date().toLocaleDateString("zh-CN", {
                      weekday: "long",
                    }),
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "stats bg-base-200 col-span-4",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                className: "stat",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                    className: "stat-title",
                    children: "\u5FEB\u901F\u8DF3\u9898",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                    import_react104.Form,
                    {
                      className: "input-group",
                      method: "post",
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                          className: "input input-bordered input-sm w-2/3",
                          type: "text",
                          name: "pid",
                          required: !0,
                          placeholder:
                            "\u8BF7\u8F93\u5165\u9898\u76EE\u7F16\u53F7",
                        }),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                          className: "btn btn-primary btn-sm w-1/3",
                          type: "submit",
                          children: "\u8DF3\u8F6C",
                        }),
                      ],
                    }
                  ),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "card bg-base-200 col-span-8 md:col-span-6",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                className: "card-body",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                    className: "card-title",
                    children: "\u8FD1\u671F\u6BD4\u8D5B",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
                    className: "flex flex-col gap-4",
                    children: loaderData.value.contests.map((contest) =>
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                        import_react104.Link,
                        {
                          className: "card bg-base-100",
                          to: `/contest/${contest.id}`,
                          children: /* @__PURE__ */ (0,
                          import_jsx_runtime.jsxs)("div", {
                            className: "card-body",
                            children: [
                              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                                "h2",
                                {
                                  className: "card-title",
                                  children: [
                                    contest.title,
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      ContestStateTag,
                                      {
                                        beginTime: contest.beginTime,
                                        endTime: contest.endTime,
                                      }
                                    ),
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      ContestSystemTag,
                                      {
                                        system: contest.system,
                                      }
                                    ),
                                  ],
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                                "p",
                                {
                                  children: [
                                    "\u5F00\u59CB\u65F6\u95F4\uFF1A",
                                    formatDateTime(contest.beginTime),
                                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                      "br",
                                      {}
                                    ),
                                    "\u6BD4\u8D5B\u65F6\u957F\uFF1A",
                                    formatDurationTime(
                                      new Date(contest.endTime).getTime() -
                                        new Date(contest.beginTime).getTime()
                                    ),
                                  ],
                                }
                              ),
                            ],
                          }),
                        },
                        contest.id
                      )
                    ),
                  }),
                ],
              }),
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
              className: "card bg-base-200 col-span-8 md:col-span-6",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
                className: "card-body",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", {
                    className: "card-title",
                    children: "\u63A8\u8350\u9898\u76EE",
                  }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("table", {
                    className: "table-compact table",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
                        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                          "tr",
                          {
                            children: [
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "th",
                                {
                                  children: "\u9898\u76EE",
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                "th",
                                {
                                  children: "\u63D0\u4EA4\u6570",
                                }
                              ),
                            ],
                          }
                        ),
                      }),
                      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
                        children: loaderData.value.problems.map((problem) =>
                          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
                            "tr",
                            {
                              children: [
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "td",
                                  {
                                    children: /* @__PURE__ */ (0,
                                    import_jsx_runtime.jsx)(ProblemLink, {
                                      problem,
                                    }),
                                  }
                                ),
                                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                                  "td",
                                  {
                                    children: problem._count.relatedRecords,
                                  }
                                ),
                              ],
                            },
                            problem.id
                          )
                        ),
                      }),
                    ],
                  }),
                ],
              }),
            }),
          ],
        }),
      ],
    }
  );
}

// app/routes/login.tsx
var login_exports = {};
__export(login_exports, {
  action: () => action32,
  default: () => Register2,
});
var import_node84 = require("@remix-run/node"),
  import_node85 = require("@remix-run/node");
var import_react105 = require("@remix-run/react"),
  import_signals_react66 = require("@preact/signals-react");
var import_react106 = require("react"),
  import_jsx_runtime = require("react/jsx-runtime");
async function action32({ request }) {
  let form = await request.formData(),
    username = invariant(usernameScheme, form.get("username")),
    password = invariant(passwordScheme, form.get("password")),
    user = await db.user.findUnique({
      where: { username },
      select: { password: !0, id: !0 },
    });
  return user
    ? user.password !== passwordHash(password)
      ? (0, import_node85.json)({ reason: "\u5BC6\u7801\u9519\u8BEF" }, 400)
      : (await new User(user.id).checkPrivilege(Privileges.PRIV_LOGIN),
        (0, import_node84.redirect)("/", {
          headers: { "Set-Cookie": await commitSession(user.id) },
        }))
    : (0, import_node85.json)(
        { reason: "\u7528\u6237\u4E0D\u5B58\u5728" },
        400
      );
}
function Register2() {
  let data2 = (0, import_react105.useActionData)(),
    transition = useSignalTransition(),
    Toasts = useToasts();
  (0, import_react106.useEffect)(() => {
    transition.actionSuccess && Toasts.success("\u767B\u5F55\u6210\u529F");
  }, [transition.actionSuccess]);
  let password = (0, import_signals_react66.useSignal)("");
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: "\u767B\u5F55",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
          children:
            "\u7F51\u7AD9\u5185\u6D4B\u4E2D\uFF0C\u968F\u65F6\u5220\u6863\uFF0C\u8BF7\u4E0D\u8981\u4E0A\u4F20\u4EFB\u4F55\u8FDD\u53CD\u6CD5\u5F8B\u6CD5\u89C4\u7684\u5185\u5BB9\u3002",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react105.Form, {
          method: "post",
          className: "not-prose form-control w-full max-w-xs gap-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u7528\u6237\u540D",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered w-full max-w-xs",
                  type: "text",
                  name: "username",
                  required: !0,
                  disabled: transition.isRunning,
                  pattern: "\\w+",
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  type: "hidden",
                  name: "password",
                  value: passwordHash(password.value),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", {
                  className: "label",
                  children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "span",
                    {
                      className: "label-text",
                      children: "\u5BC6\u7801",
                    }
                  ),
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
                  className: "input input-bordered w-full max-w-xs",
                  type: "password",
                  value: password.value,
                  onChange: (event) =>
                    (password.value = event.currentTarget.value),
                  required: !0,
                  disabled: transition.isRunning,
                }),
              ],
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
              className: "form-control",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", {
                  className: "btn btn-primary",
                  type: "submit",
                  children: "\u767B\u5F55",
                }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", {
                  className: "label",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_react105.Link,
                      {
                        className: "link link-hover label-text-alt",
                        to: "/register",
                        children: "\u6CE8\u518C",
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                      import_react105.Link,
                      {
                        className: "link link-hover label-text-alt",
                        to: "/reset",
                        children: "\u5FD8\u8BB0\u5BC6\u7801",
                      }
                    ),
                  ],
                }),
              ],
            }),
            (data2 == null ? void 0 : data2.reason) &&
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
                className: "alert alert-error shadow-lg",
                children: data2.reason,
              }),
          ],
        }),
      ],
    }
  );
}

// app/routes/reset.tsx
var reset_exports = {};
__export(reset_exports, {
  default: () => ResetPassword,
  meta: () => meta43,
});
var import_jsx_runtime = require("react/jsx-runtime"),
  meta43 = () => ({
    title: "\u91CD\u7F6E\u5BC6\u7801 - HITwh OJ",
  });
function ResetPassword() {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    import_jsx_runtime.Fragment,
    {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", {
          children: "\u5FD8\u8BB0\u5BC6\u7801",
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", {
          children:
            "\u8BF7\uFF0C\u52AA\u529B\u5730\u56DE\u60F3\u8D77\u6765\uFF01",
        }),
      ],
    }
  );
}

// server-assets-manifest:@remix-run/dev/assets-manifest
var assets_manifest_default = {
  version: "d104f868",
  entry: {
    module: "/build/entry.client-3OBDVHJI.js",
    imports: [
      "/build/_shared/chunk-IYNQWWEV.js",
      "/build/_shared/chunk-P4KF3DFI.js",
      "/build/_shared/chunk-G5WX4PPA.js",
    ],
  },
  routes: {
    root: {
      id: "root",
      parentId: void 0,
      path: "",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/root-D52Q6SD3.js",
      imports: [
        "/build/_shared/chunk-ANJHU2RD.js",
        "/build/_shared/chunk-BQKSLDHG.js",
        "/build/_shared/chunk-F7TWK4YF.js",
        "/build/_shared/chunk-C6VOOSKL.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/admin/judge": {
      id: "routes/admin/judge",
      parentId: "root",
      path: "admin/judge",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/admin/judge-4XOFICO5.js",
      imports: [
        "/build/_shared/chunk-MDGTQBQV.js",
        "/build/_shared/chunk-M6DBAY7B.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/chat/events": {
      id: "routes/chat/events",
      parentId: "root",
      path: "chat/events",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/chat/events-W6CGYGKE.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/chat/room/$roomId/enter": {
      id: "routes/chat/room/$roomId/enter",
      parentId: "root",
      path: "chat/room/:roomId/enter",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/chat/room/$roomId/enter-ME3XUWQI.js",
      imports: ["/build/_shared/chunk-M6DBAY7B.js"],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/chat/room/$roomId/events": {
      id: "routes/chat/room/$roomId/events",
      parentId: "root",
      path: "chat/room/:roomId/events",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/chat/room/$roomId/events-QR5RVEIU.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/chat/room/$roomId/exit": {
      id: "routes/chat/room/$roomId/exit",
      parentId: "root",
      path: "chat/room/:roomId/exit",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/chat/room/$roomId/exit-OKZ2XX6H.js",
      imports: void 0,
      hasAction: !0,
      hasLoader: !1,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/chat/room/$roomId/index": {
      id: "routes/chat/room/$roomId/index",
      parentId: "root",
      path: "chat/room/:roomId",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/chat/room/$roomId/index-SREGSEOG.js",
      imports: [
        "/build/_shared/chunk-PUHPCD76.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-M6DBAY7B.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/chat/user": {
      id: "routes/chat/user",
      parentId: "root",
      path: "chat/user",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/chat/user-QUD5FJFH.js",
      imports: ["/build/_shared/chunk-PUHPCD76.js"],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/chat/user/$userId/events": {
      id: "routes/chat/user/$userId/events",
      parentId: "routes/chat/user",
      path: ":userId/events",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/chat/user/$userId/events-QEJHEI4P.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/chat/user/$userId/index": {
      id: "routes/chat/user/$userId/index",
      parentId: "routes/chat/user",
      path: ":userId",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/chat/user/$userId/index-LFZHEEYL.js",
      imports: [
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-BQKSLDHG.js",
        "/build/_shared/chunk-F7TWK4YF.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/chat/user/index": {
      id: "routes/chat/user/index",
      parentId: "routes/chat/user",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/chat/user/index-Z7WBC2MJ.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !1,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/contest/$contestId": {
      id: "routes/contest/$contestId",
      parentId: "root",
      path: "contest/:contestId",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/contest/$contestId-Y73CMWWH.js",
      imports: [
        "/build/_shared/chunk-WH23UYJB.js",
        "/build/_shared/chunk-4B3SKNWL.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/contest/$contestId/board/events": {
      id: "routes/contest/$contestId/board/events",
      parentId: "routes/contest/$contestId",
      path: "board/events",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/contest/$contestId/board/events-I6OZLYRO.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/contest/$contestId/board/index": {
      id: "routes/contest/$contestId/board/index",
      parentId: "routes/contest/$contestId",
      path: "board",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/contest/$contestId/board/index-YTE263RQ.js",
      imports: [
        "/build/_shared/chunk-QTGCURF2.js",
        "/build/_shared/chunk-BQKSLDHG.js",
        "/build/_shared/chunk-F7TWK4YF.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/contest/$contestId/clarification/$clarificationId": {
      id: "routes/contest/$contestId/clarification/$clarificationId",
      parentId: "routes/contest/$contestId",
      path: "clarification/:clarificationId",
      index: void 0,
      caseSensitive: void 0,
      module:
        "/build/routes/contest/$contestId/clarification/$clarificationId-FDCMCJ4K.js",
      imports: [
        "/build/_shared/chunk-PUHPCD76.js",
        "/build/_shared/chunk-QTGCURF2.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-F7TWK4YF.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/contest/$contestId/clarification/events/assign": {
      id: "routes/contest/$contestId/clarification/events/assign",
      parentId: "routes/contest/$contestId",
      path: "clarification/events/assign",
      index: void 0,
      caseSensitive: void 0,
      module:
        "/build/routes/contest/$contestId/clarification/events/assign-2KAJ2LYH.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/contest/$contestId/clarification/events/reply": {
      id: "routes/contest/$contestId/clarification/events/reply",
      parentId: "routes/contest/$contestId",
      path: "clarification/events/reply",
      index: void 0,
      caseSensitive: void 0,
      module:
        "/build/routes/contest/$contestId/clarification/events/reply-C23Q76FQ.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/contest/$contestId/clarification/events/resolve": {
      id: "routes/contest/$contestId/clarification/events/resolve",
      parentId: "routes/contest/$contestId",
      path: "clarification/events/resolve",
      index: void 0,
      caseSensitive: void 0,
      module:
        "/build/routes/contest/$contestId/clarification/events/resolve-V447QE6U.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/contest/$contestId/clarification/index": {
      id: "routes/contest/$contestId/clarification/index",
      parentId: "routes/contest/$contestId",
      path: "clarification",
      index: !0,
      caseSensitive: void 0,
      module:
        "/build/routes/contest/$contestId/clarification/index-GV7T2KKO.js",
      imports: [
        "/build/_shared/chunk-QTGCURF2.js",
        "/build/_shared/chunk-F7TWK4YF.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/contest/$contestId/clarification/submit": {
      id: "routes/contest/$contestId/clarification/submit",
      parentId: "routes/contest/$contestId",
      path: "clarification/submit",
      index: void 0,
      caseSensitive: void 0,
      module:
        "/build/routes/contest/$contestId/clarification/submit-TQE2AVF4.js",
      imports: [
        "/build/_shared/chunk-PUHPCD76.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/contest/$contestId/desc": {
      id: "routes/contest/$contestId/desc",
      parentId: "routes/contest/$contestId",
      path: "desc",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/contest/$contestId/desc-PUR6R2L5.js",
      imports: [
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/contest/$contestId/edit": {
      id: "routes/contest/$contestId/edit",
      parentId: "routes/contest/$contestId",
      path: "edit",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/contest/$contestId/edit-HCTVA6LJ.js",
      imports: [
        "/build/_shared/chunk-KU4RERCW.js",
        "/build/_shared/chunk-JCTKAXWK.js",
        "/build/_shared/chunk-2QKU57KM.js",
        "/build/_shared/chunk-55TVTKSM.js",
        "/build/_shared/chunk-KAFADMKS.js",
        "/build/_shared/chunk-XCRF7VPJ.js",
        "/build/_shared/chunk-C6VOOSKL.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-6WF7NKYL.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/contest/$contestId/index": {
      id: "routes/contest/$contestId/index",
      parentId: "routes/contest/$contestId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/contest/$contestId/index-HMUIXRPM.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/contest/$contestId/members": {
      id: "routes/contest/$contestId/members",
      parentId: "routes/contest/$contestId",
      path: "members",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/contest/$contestId/members-PWYS76XZ.js",
      imports: [
        "/build/_shared/chunk-JCTKAXWK.js",
        "/build/_shared/chunk-QTGCURF2.js",
        "/build/_shared/chunk-F7TWK4YF.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/contest/$contestId/problem/$rank": {
      id: "routes/contest/$contestId/problem/$rank",
      parentId: "routes/contest/$contestId",
      path: "problem/:rank",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/contest/$contestId/problem/$rank-L6HYJDL2.js",
      imports: [
        "/build/_shared/chunk-MDGTQBQV.js",
        "/build/_shared/chunk-MVNZUVNE.js",
        "/build/_shared/chunk-LGBCQJ4S.js",
        "/build/_shared/chunk-RE2DFUAK.js",
        "/build/_shared/chunk-PUHPCD76.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-ANJHU2RD.js",
        "/build/_shared/chunk-BQKSLDHG.js",
        "/build/_shared/chunk-XCRF7VPJ.js",
        "/build/_shared/chunk-C6VOOSKL.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/contest/$contestId/problem/index": {
      id: "routes/contest/$contestId/problem/index",
      parentId: "routes/contest/$contestId",
      path: "problem",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/contest/$contestId/problem/index-K7IQWYPO.js",
      imports: [
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/contest/$contestId/register": {
      id: "routes/contest/$contestId/register",
      parentId: "routes/contest/$contestId",
      path: "register",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/contest/$contestId/register-YC5FH7C6.js",
      imports: [
        "/build/_shared/chunk-JCTKAXWK.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/contest/index": {
      id: "routes/contest/index",
      parentId: "root",
      path: "contest",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/contest/index-NLNUKPWZ.js",
      imports: [
        "/build/_shared/chunk-IC4EQTIY.js",
        "/build/_shared/chunk-WH23UYJB.js",
        "/build/_shared/chunk-4B3SKNWL.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-TWYVBWDW.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/contest/new": {
      id: "routes/contest/new",
      parentId: "root",
      path: "contest/new",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/contest/new-PDDYGLHG.js",
      imports: [
        "/build/_shared/chunk-KU4RERCW.js",
        "/build/_shared/chunk-JCTKAXWK.js",
        "/build/_shared/chunk-KAFADMKS.js",
        "/build/_shared/chunk-XCRF7VPJ.js",
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-M6DBAY7B.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/contest/tag/$tag": {
      id: "routes/contest/tag/$tag",
      parentId: "root",
      path: "contest/tag/:tag",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/contest/tag/$tag-DPE6BI2V.js",
      imports: [
        "/build/_shared/chunk-IC4EQTIY.js",
        "/build/_shared/chunk-WH23UYJB.js",
        "/build/_shared/chunk-4B3SKNWL.js",
        "/build/_shared/chunk-7WG4REHK.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/docs/$": {
      id: "routes/docs/$",
      parentId: "root",
      path: "docs/*",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/docs/$-36EXMMSV.js",
      imports: [
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/file/$fileId": {
      id: "routes/file/$fileId",
      parentId: "root",
      path: "file/:fileId",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/file/$fileId-7MBFLNQ3.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/file/$fileId/$filename": {
      id: "routes/file/$fileId/$filename",
      parentId: "routes/file/$fileId",
      path: ":filename",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/file/$fileId/$filename-TGUP5JGC.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/file/$fileId/index": {
      id: "routes/file/$fileId/index",
      parentId: "routes/file/$fileId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/file/$fileId/index-2ICYIGYR.js",
      imports: [
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/index": {
      id: "routes/index",
      parentId: "root",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/index-CO3D2UP4.js",
      imports: [
        "/build/_shared/chunk-WH23UYJB.js",
        "/build/_shared/chunk-4B3SKNWL.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-6WF7NKYL.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/login": {
      id: "routes/login",
      parentId: "root",
      path: "login",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/login-EWCKUCKU.js",
      imports: [
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-M6DBAY7B.js",
      ],
      hasAction: !0,
      hasLoader: !1,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/logout": {
      id: "routes/logout",
      parentId: "root",
      path: "logout",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/logout-T5DL3XUN.js",
      imports: void 0,
      hasAction: !0,
      hasLoader: !1,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/playground": {
      id: "routes/playground",
      parentId: "root",
      path: "playground",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/playground-57M7SI5A.js",
      imports: [
        "/build/_shared/chunk-PUHPCD76.js",
        "/build/_shared/chunk-XCRF7VPJ.js",
        "/build/_shared/chunk-NPZ34MRD.js",
      ],
      hasAction: !1,
      hasLoader: !1,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/problem/$problemId": {
      id: "routes/problem/$problemId",
      parentId: "root",
      path: "problem/:problemId",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problem/$problemId-4W7WXX4P.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problem/$problemId/board": {
      id: "routes/problem/$problemId/board",
      parentId: "routes/problem/$problemId",
      path: "board",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problem/$problemId/board-HXI5GFRU.js",
      imports: [
        "/build/_shared/chunk-RE2DFUAK.js",
        "/build/_shared/chunk-QTGCURF2.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-ANJHU2RD.js",
        "/build/_shared/chunk-F7TWK4YF.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/problem/$problemId/data": {
      id: "routes/problem/$problemId/data",
      parentId: "routes/problem/$problemId",
      path: "data",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problem/$problemId/data-7PXQAGKF.js",
      imports: [
        "/build/_shared/chunk-H2W53GLY.js",
        "/build/_shared/chunk-RGCNEZEZ.js",
        "/build/_shared/chunk-LGBCQJ4S.js",
        "/build/_shared/chunk-PUHPCD76.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problem/$problemId/desc": {
      id: "routes/problem/$problemId/desc",
      parentId: "routes/problem/$problemId",
      path: "desc",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problem/$problemId/desc-PLUMU4PV.js",
      imports: [
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problem/$problemId/edit": {
      id: "routes/problem/$problemId/edit",
      parentId: "routes/problem/$problemId",
      path: "edit",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problem/$problemId/edit-LSOPYPHF.js",
      imports: [
        "/build/_shared/chunk-QTGCURF2.js",
        "/build/_shared/chunk-F7TWK4YF.js",
        "/build/_shared/chunk-55TVTKSM.js",
        "/build/_shared/chunk-KAFADMKS.js",
        "/build/_shared/chunk-XCRF7VPJ.js",
        "/build/_shared/chunk-C6VOOSKL.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problem/$problemId/index": {
      id: "routes/problem/$problemId/index",
      parentId: "routes/problem/$problemId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/problem/$problemId/index-H5STCRMS.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/problem/$problemId/submit": {
      id: "routes/problem/$problemId/submit",
      parentId: "routes/problem/$problemId",
      path: "submit",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problem/$problemId/submit-MKELBJOW.js",
      imports: [
        "/build/_shared/chunk-MDGTQBQV.js",
        "/build/_shared/chunk-LGBCQJ4S.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problem/data": {
      id: "routes/problem/data",
      parentId: "root",
      path: "problem/data",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problem/data-XFHDL2AB.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/problem/index": {
      id: "routes/problem/index",
      parentId: "root",
      path: "problem",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/problem/index-F36WECF3.js",
      imports: [
        "/build/_shared/chunk-TWYVBWDW.js",
        "/build/_shared/chunk-6WF7NKYL.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problem/new": {
      id: "routes/problem/new",
      parentId: "root",
      path: "problem/new",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problem/new-LVXMLGHW.js",
      imports: ["/build/_shared/chunk-M6DBAY7B.js"],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problem/tag/$tag": {
      id: "routes/problem/tag/$tag",
      parentId: "root",
      path: "problem/tag/:tag",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problem/tag/$tag-ZXFRWE63.js",
      imports: ["/build/_shared/chunk-6WF7NKYL.js"],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problemset/$problemSetId": {
      id: "routes/problemset/$problemSetId",
      parentId: "root",
      path: "problemset/:problemSetId",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problemset/$problemSetId-JDRLA6RO.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problemset/$problemSetId/edit": {
      id: "routes/problemset/$problemSetId/edit",
      parentId: "routes/problemset/$problemSetId",
      path: "edit",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problemset/$problemSetId/edit-RFEJCJT4.js",
      imports: [
        "/build/_shared/chunk-2QKU57KM.js",
        "/build/_shared/chunk-55TVTKSM.js",
        "/build/_shared/chunk-KAFADMKS.js",
        "/build/_shared/chunk-XCRF7VPJ.js",
        "/build/_shared/chunk-C6VOOSKL.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-6WF7NKYL.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problemset/$problemSetId/index": {
      id: "routes/problemset/$problemSetId/index",
      parentId: "routes/problemset/$problemSetId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/problemset/$problemSetId/index-MA624AXY.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/problemset/$problemSetId/problem": {
      id: "routes/problemset/$problemSetId/problem",
      parentId: "routes/problemset/$problemSetId",
      path: "problem",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problemset/$problemSetId/problem-GUYIVAOD.js",
      imports: [
        "/build/_shared/chunk-TWYVBWDW.js",
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-6WF7NKYL.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problemset/index": {
      id: "routes/problemset/index",
      parentId: "root",
      path: "problemset",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/problemset/index-KKDBXNR2.js",
      imports: [
        "/build/_shared/chunk-VA6CUZ65.js",
        "/build/_shared/chunk-TWYVBWDW.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problemset/new": {
      id: "routes/problemset/new",
      parentId: "root",
      path: "problemset/new",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problemset/new-KWROGHFW.js",
      imports: ["/build/_shared/chunk-M6DBAY7B.js"],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/problemset/tag/$tag": {
      id: "routes/problemset/tag/$tag",
      parentId: "root",
      path: "problemset/tag/:tag",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/problemset/tag/$tag-4RDDYYJN.js",
      imports: ["/build/_shared/chunk-VA6CUZ65.js"],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/record/$recordId/events": {
      id: "routes/record/$recordId/events",
      parentId: "root",
      path: "record/:recordId/events",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/record/$recordId/events-224XXBTJ.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/record/$recordId/index": {
      id: "routes/record/$recordId/index",
      parentId: "root",
      path: "record/:recordId",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/record/$recordId/index-PD3PLIAK.js",
      imports: [
        "/build/_shared/chunk-RGCNEZEZ.js",
        "/build/_shared/chunk-IC4EQTIY.js",
        "/build/_shared/chunk-MVNZUVNE.js",
        "/build/_shared/chunk-LGBCQJ4S.js",
        "/build/_shared/chunk-RE2DFUAK.js",
        "/build/_shared/chunk-4B3SKNWL.js",
        "/build/_shared/chunk-QTGCURF2.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-6WF7NKYL.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/record/index": {
      id: "routes/record/index",
      parentId: "root",
      path: "record",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/record/index-DQ6M3HUO.js",
      imports: [
        "/build/_shared/chunk-RE2DFUAK.js",
        "/build/_shared/chunk-QTGCURF2.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-TWYVBWDW.js",
        "/build/_shared/chunk-6WF7NKYL.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/register": {
      id: "routes/register",
      parentId: "root",
      path: "register",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/register-Y5SQOIBW.js",
      imports: ["/build/_shared/chunk-7WG4REHK.js"],
      hasAction: !0,
      hasLoader: !1,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/reset": {
      id: "routes/reset",
      parentId: "root",
      path: "reset",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/reset-PTAENZBF.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !1,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/team/$teamId": {
      id: "routes/team/$teamId",
      parentId: "root",
      path: "team/:teamId",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId-SFODJPLN.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/contest/index": {
      id: "routes/team/$teamId/contest/index",
      parentId: "routes/team/$teamId",
      path: "contest",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/contest/index-53RONNMH.js",
      imports: [
        "/build/_shared/chunk-IC4EQTIY.js",
        "/build/_shared/chunk-WH23UYJB.js",
        "/build/_shared/chunk-4B3SKNWL.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-ANJHU2RD.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/contest/new": {
      id: "routes/team/$teamId/contest/new",
      parentId: "routes/team/$teamId",
      path: "contest/new",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/contest/new-5GK2IN43.js",
      imports: [
        "/build/_shared/chunk-KU4RERCW.js",
        "/build/_shared/chunk-JCTKAXWK.js",
        "/build/_shared/chunk-KAFADMKS.js",
        "/build/_shared/chunk-XCRF7VPJ.js",
        "/build/_shared/chunk-C6VOOSKL.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/index": {
      id: "routes/team/$teamId/index",
      parentId: "routes/team/$teamId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/index-XWVMTDOO.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/team/$teamId/members": {
      id: "routes/team/$teamId/members",
      parentId: "routes/team/$teamId",
      path: "members",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/members-JCMOG4ZH.js",
      imports: [
        "/build/_shared/chunk-JCTKAXWK.js",
        "/build/_shared/chunk-F7TWK4YF.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/problem/data": {
      id: "routes/team/$teamId/problem/data",
      parentId: "routes/team/$teamId",
      path: "problem/data",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/problem/data-H6JGCRTC.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/team/$teamId/problem/index": {
      id: "routes/team/$teamId/problem/index",
      parentId: "routes/team/$teamId",
      path: "problem",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/problem/index-IYUGWEYE.js",
      imports: [
        "/build/_shared/chunk-TWYVBWDW.js",
        "/build/_shared/chunk-6WF7NKYL.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/problem/new": {
      id: "routes/team/$teamId/problem/new",
      parentId: "routes/team/$teamId",
      path: "problem/new",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/problem/new-N3OPXJKF.js",
      imports: [
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/problemset/$problemSetId": {
      id: "routes/team/$teamId/problemset/$problemSetId",
      parentId: "routes/team/$teamId",
      path: "problemset/:problemSetId",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/problemset/$problemSetId-RYUFUZDT.js",
      imports: [
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/problemset/$problemSetId/edit": {
      id: "routes/team/$teamId/problemset/$problemSetId/edit",
      parentId: "routes/team/$teamId/problemset/$problemSetId",
      path: "edit",
      index: void 0,
      caseSensitive: void 0,
      module:
        "/build/routes/team/$teamId/problemset/$problemSetId/edit-6LQOAIMB.js",
      imports: [
        "/build/_shared/chunk-55TVTKSM.js",
        "/build/_shared/chunk-KAFADMKS.js",
        "/build/_shared/chunk-XCRF7VPJ.js",
        "/build/_shared/chunk-C6VOOSKL.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-6WF7NKYL.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-M6DBAY7B.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/problemset/$problemSetId/index": {
      id: "routes/team/$teamId/problemset/$problemSetId/index",
      parentId: "routes/team/$teamId/problemset/$problemSetId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module:
        "/build/routes/team/$teamId/problemset/$problemSetId/index-RA5TMWM4.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/team/$teamId/problemset/$problemSetId/problem": {
      id: "routes/team/$teamId/problemset/$problemSetId/problem",
      parentId: "routes/team/$teamId/problemset/$problemSetId",
      path: "problem",
      index: void 0,
      caseSensitive: void 0,
      module:
        "/build/routes/team/$teamId/problemset/$problemSetId/problem-PIXKODVF.js",
      imports: [
        "/build/_shared/chunk-TWYVBWDW.js",
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-6WF7NKYL.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/problemset/index": {
      id: "routes/team/$teamId/problemset/index",
      parentId: "routes/team/$teamId",
      path: "problemset",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/problemset/index-Z3SUL5GN.js",
      imports: [
        "/build/_shared/chunk-J7GTACQU.js",
        "/build/_shared/chunk-TWYVBWDW.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/problemset/new": {
      id: "routes/team/$teamId/problemset/new",
      parentId: "routes/team/$teamId",
      path: "problemset/new",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/problemset/new-TFXWXYBE.js",
      imports: [
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/problemset/tag/$tag": {
      id: "routes/team/$teamId/problemset/tag/$tag",
      parentId: "routes/team/$teamId",
      path: "problemset/tag/:tag",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/problemset/tag/$tag-Y466E7HT.js",
      imports: [
        "/build/_shared/chunk-J7GTACQU.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/profile": {
      id: "routes/team/$teamId/profile",
      parentId: "routes/team/$teamId",
      path: "profile",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/profile-IDFBDDV5.js",
      imports: [
        "/build/_shared/chunk-JCTKAXWK.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/$teamId/settings": {
      id: "routes/team/$teamId/settings",
      parentId: "routes/team/$teamId",
      path: "settings",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/team/$teamId/settings-ZYY2EGJA.js",
      imports: [
        "/build/_shared/chunk-JCTKAXWK.js",
        "/build/_shared/chunk-KAFADMKS.js",
        "/build/_shared/chunk-XCRF7VPJ.js",
        "/build/_shared/chunk-C6VOOSKL.js",
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-KUDQOE27.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-5CMXDJBZ.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/index": {
      id: "routes/team/index",
      parentId: "root",
      path: "team",
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/team/index-6S3TI7O5.js",
      imports: ["/build/_shared/chunk-TWYVBWDW.js"],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/team/new": {
      id: "routes/team/new",
      parentId: "root",
      path: "team/new",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/team/new-MIGUUOB2.js",
      imports: [
        "/build/_shared/chunk-JCTKAXWK.js",
        "/build/_shared/chunk-M6DBAY7B.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/user/$userId": {
      id: "routes/user/$userId",
      parentId: "root",
      path: "user/:userId",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/user/$userId-7QQTMJ25.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/user/$userId/admin": {
      id: "routes/user/$userId/admin",
      parentId: "routes/user/$userId",
      path: "admin",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/user/$userId/admin-SZZMODQQ.js",
      imports: [
        "/build/_shared/chunk-JCTKAXWK.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/user/$userId/edit": {
      id: "routes/user/$userId/edit",
      parentId: "routes/user/$userId",
      path: "edit",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/user/$userId/edit-PRAWIISM.js",
      imports: [
        "/build/_shared/chunk-WF674727.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/user/$userId/files": {
      id: "routes/user/$userId/files",
      parentId: "routes/user/$userId",
      path: "files",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/user/$userId/files-OSNWPGJS.js",
      imports: [
        "/build/_shared/chunk-H2W53GLY.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-M6DBAY7B.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !0,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/user/$userId/index": {
      id: "routes/user/$userId/index",
      parentId: "routes/user/$userId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: "/build/routes/user/$userId/index-ZSVJHWCI.js",
      imports: void 0,
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !1,
      hasErrorBoundary: !1,
    },
    "routes/user/$userId/profile": {
      id: "routes/user/$userId/profile",
      parentId: "routes/user/$userId",
      path: "profile",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/user/$userId/profile-32R2IZ2X.js",
      imports: [
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
    "routes/user/$userId/statistics": {
      id: "routes/user/$userId/statistics",
      parentId: "routes/user/$userId",
      path: "statistics",
      index: void 0,
      caseSensitive: void 0,
      module: "/build/routes/user/$userId/statistics-4JH7DG5G.js",
      imports: [
        "/build/_shared/chunk-IC4EQTIY.js",
        "/build/_shared/chunk-4B3SKNWL.js",
        "/build/_shared/chunk-7WG4REHK.js",
        "/build/_shared/chunk-ANJHU2RD.js",
        "/build/_shared/chunk-C6VOOSKL.js",
        "/build/_shared/chunk-YFBG3YAE.js",
        "/build/_shared/chunk-NPZ34MRD.js",
        "/build/_shared/chunk-ZPF2YCTJ.js",
        "/build/_shared/chunk-33FVQFAB.js",
        "/build/_shared/chunk-ASHX7EDV.js",
        "/build/_shared/chunk-KLFOMCVP.js",
        "/build/_shared/chunk-XIHPQXCX.js",
      ],
      hasAction: !1,
      hasLoader: !0,
      hasCatchBoundary: !0,
      hasErrorBoundary: !0,
    },
  },
  url: "/build/manifest-D104F868.js",
};

// server-entry-module:@remix-run/dev/server-build
var assetsBuildDirectory = "public\\build",
  publicPath = "/build/",
  entry = { module: entry_server_exports },
  routes = {
    root: {
      id: "root",
      parentId: void 0,
      path: "",
      index: void 0,
      caseSensitive: void 0,
      module: root_exports,
    },
    "routes/chat/room/$roomId/events": {
      id: "routes/chat/room/$roomId/events",
      parentId: "root",
      path: "chat/room/:roomId/events",
      index: void 0,
      caseSensitive: void 0,
      module: events_exports,
    },
    "routes/problemset/$problemSetId": {
      id: "routes/problemset/$problemSetId",
      parentId: "root",
      path: "problemset/:problemSetId",
      index: void 0,
      caseSensitive: void 0,
      module: problemSetId_exports,
    },
    "routes/problemset/$problemSetId/problem": {
      id: "routes/problemset/$problemSetId/problem",
      parentId: "routes/problemset/$problemSetId",
      path: "problem",
      index: void 0,
      caseSensitive: void 0,
      module: problem_exports,
    },
    "routes/problemset/$problemSetId/index": {
      id: "routes/problemset/$problemSetId/index",
      parentId: "routes/problemset/$problemSetId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: problemSetId_exports2,
    },
    "routes/problemset/$problemSetId/edit": {
      id: "routes/problemset/$problemSetId/edit",
      parentId: "routes/problemset/$problemSetId",
      path: "edit",
      index: void 0,
      caseSensitive: void 0,
      module: edit_exports,
    },
    "routes/chat/room/$roomId/enter": {
      id: "routes/chat/room/$roomId/enter",
      parentId: "root",
      path: "chat/room/:roomId/enter",
      index: void 0,
      caseSensitive: void 0,
      module: enter_exports,
    },
    "routes/chat/room/$roomId/index": {
      id: "routes/chat/room/$roomId/index",
      parentId: "root",
      path: "chat/room/:roomId",
      index: !0,
      caseSensitive: void 0,
      module: roomId_exports,
    },
    "routes/record/$recordId/events": {
      id: "routes/record/$recordId/events",
      parentId: "root",
      path: "record/:recordId/events",
      index: void 0,
      caseSensitive: void 0,
      module: events_exports2,
    },
    "routes/chat/room/$roomId/exit": {
      id: "routes/chat/room/$roomId/exit",
      parentId: "root",
      path: "chat/room/:roomId/exit",
      index: void 0,
      caseSensitive: void 0,
      module: exit_exports,
    },
    "routes/record/$recordId/index": {
      id: "routes/record/$recordId/index",
      parentId: "root",
      path: "record/:recordId",
      index: !0,
      caseSensitive: void 0,
      module: recordId_exports,
    },
    "routes/problemset/tag/$tag": {
      id: "routes/problemset/tag/$tag",
      parentId: "root",
      path: "problemset/tag/:tag",
      index: void 0,
      caseSensitive: void 0,
      module: tag_exports,
    },
    "routes/contest/$contestId": {
      id: "routes/contest/$contestId",
      parentId: "root",
      path: "contest/:contestId",
      index: void 0,
      caseSensitive: void 0,
      module: contestId_exports,
    },
    "routes/contest/$contestId/clarification/$clarificationId": {
      id: "routes/contest/$contestId/clarification/$clarificationId",
      parentId: "routes/contest/$contestId",
      path: "clarification/:clarificationId",
      index: void 0,
      caseSensitive: void 0,
      module: clarificationId_exports,
    },
    "routes/contest/$contestId/clarification/events/resolve": {
      id: "routes/contest/$contestId/clarification/events/resolve",
      parentId: "routes/contest/$contestId",
      path: "clarification/events/resolve",
      index: void 0,
      caseSensitive: void 0,
      module: resolve_exports,
    },
    "routes/contest/$contestId/clarification/events/assign": {
      id: "routes/contest/$contestId/clarification/events/assign",
      parentId: "routes/contest/$contestId",
      path: "clarification/events/assign",
      index: void 0,
      caseSensitive: void 0,
      module: assign_exports,
    },
    "routes/contest/$contestId/clarification/events/reply": {
      id: "routes/contest/$contestId/clarification/events/reply",
      parentId: "routes/contest/$contestId",
      path: "clarification/events/reply",
      index: void 0,
      caseSensitive: void 0,
      module: reply_exports,
    },
    "routes/contest/$contestId/clarification/submit": {
      id: "routes/contest/$contestId/clarification/submit",
      parentId: "routes/contest/$contestId",
      path: "clarification/submit",
      index: void 0,
      caseSensitive: void 0,
      module: submit_exports,
    },
    "routes/contest/$contestId/clarification/index": {
      id: "routes/contest/$contestId/clarification/index",
      parentId: "routes/contest/$contestId",
      path: "clarification",
      index: !0,
      caseSensitive: void 0,
      module: clarification_exports,
    },
    "routes/contest/$contestId/problem/$rank": {
      id: "routes/contest/$contestId/problem/$rank",
      parentId: "routes/contest/$contestId",
      path: "problem/:rank",
      index: void 0,
      caseSensitive: void 0,
      module: rank_exports,
    },
    "routes/contest/$contestId/problem/index": {
      id: "routes/contest/$contestId/problem/index",
      parentId: "routes/contest/$contestId",
      path: "problem",
      index: !0,
      caseSensitive: void 0,
      module: problem_exports2,
    },
    "routes/contest/$contestId/board/events": {
      id: "routes/contest/$contestId/board/events",
      parentId: "routes/contest/$contestId",
      path: "board/events",
      index: void 0,
      caseSensitive: void 0,
      module: events_exports3,
    },
    "routes/contest/$contestId/board/index": {
      id: "routes/contest/$contestId/board/index",
      parentId: "routes/contest/$contestId",
      path: "board",
      index: !0,
      caseSensitive: void 0,
      module: board_exports,
    },
    "routes/contest/$contestId/register": {
      id: "routes/contest/$contestId/register",
      parentId: "routes/contest/$contestId",
      path: "register",
      index: void 0,
      caseSensitive: void 0,
      module: register_exports,
    },
    "routes/contest/$contestId/members": {
      id: "routes/contest/$contestId/members",
      parentId: "routes/contest/$contestId",
      path: "members",
      index: void 0,
      caseSensitive: void 0,
      module: members_exports,
    },
    "routes/contest/$contestId/index": {
      id: "routes/contest/$contestId/index",
      parentId: "routes/contest/$contestId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: contestId_exports2,
    },
    "routes/contest/$contestId/desc": {
      id: "routes/contest/$contestId/desc",
      parentId: "routes/contest/$contestId",
      path: "desc",
      index: void 0,
      caseSensitive: void 0,
      module: desc_exports,
    },
    "routes/contest/$contestId/edit": {
      id: "routes/contest/$contestId/edit",
      parentId: "routes/contest/$contestId",
      path: "edit",
      index: void 0,
      caseSensitive: void 0,
      module: edit_exports2,
    },
    "routes/problem/$problemId": {
      id: "routes/problem/$problemId",
      parentId: "root",
      path: "problem/:problemId",
      index: void 0,
      caseSensitive: void 0,
      module: problemId_exports,
    },
    "routes/problem/$problemId/submit": {
      id: "routes/problem/$problemId/submit",
      parentId: "routes/problem/$problemId",
      path: "submit",
      index: void 0,
      caseSensitive: void 0,
      module: submit_exports2,
    },
    "routes/problem/$problemId/board": {
      id: "routes/problem/$problemId/board",
      parentId: "routes/problem/$problemId",
      path: "board",
      index: void 0,
      caseSensitive: void 0,
      module: board_exports2,
    },
    "routes/problem/$problemId/index": {
      id: "routes/problem/$problemId/index",
      parentId: "routes/problem/$problemId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: problemId_exports2,
    },
    "routes/problem/$problemId/data": {
      id: "routes/problem/$problemId/data",
      parentId: "routes/problem/$problemId",
      path: "data",
      index: void 0,
      caseSensitive: void 0,
      module: data_exports,
    },
    "routes/problem/$problemId/desc": {
      id: "routes/problem/$problemId/desc",
      parentId: "routes/problem/$problemId",
      path: "desc",
      index: void 0,
      caseSensitive: void 0,
      module: desc_exports2,
    },
    "routes/problem/$problemId/edit": {
      id: "routes/problem/$problemId/edit",
      parentId: "routes/problem/$problemId",
      path: "edit",
      index: void 0,
      caseSensitive: void 0,
      module: edit_exports3,
    },
    "routes/contest/tag/$tag": {
      id: "routes/contest/tag/$tag",
      parentId: "root",
      path: "contest/tag/:tag",
      index: void 0,
      caseSensitive: void 0,
      module: tag_exports2,
    },
    "routes/problem/tag/$tag": {
      id: "routes/problem/tag/$tag",
      parentId: "root",
      path: "problem/tag/:tag",
      index: void 0,
      caseSensitive: void 0,
      module: tag_exports3,
    },
    "routes/problemset/index": {
      id: "routes/problemset/index",
      parentId: "root",
      path: "problemset",
      index: !0,
      caseSensitive: void 0,
      module: problemset_exports,
    },
    "routes/problemset/new": {
      id: "routes/problemset/new",
      parentId: "root",
      path: "problemset/new",
      index: void 0,
      caseSensitive: void 0,
      module: new_exports,
    },
    "routes/contest/index": {
      id: "routes/contest/index",
      parentId: "root",
      path: "contest",
      index: !0,
      caseSensitive: void 0,
      module: contest_exports,
    },
    "routes/problem/index": {
      id: "routes/problem/index",
      parentId: "root",
      path: "problem",
      index: !0,
      caseSensitive: void 0,
      module: problem_exports3,
    },
    "routes/file/$fileId": {
      id: "routes/file/$fileId",
      parentId: "root",
      path: "file/:fileId",
      index: void 0,
      caseSensitive: void 0,
      module: fileId_exports,
    },
    "routes/file/$fileId/$filename": {
      id: "routes/file/$fileId/$filename",
      parentId: "routes/file/$fileId",
      path: ":filename",
      index: void 0,
      caseSensitive: void 0,
      module: filename_exports,
    },
    "routes/file/$fileId/index": {
      id: "routes/file/$fileId/index",
      parentId: "routes/file/$fileId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: fileId_exports2,
    },
    "routes/problem/data": {
      id: "routes/problem/data",
      parentId: "root",
      path: "problem/data",
      index: void 0,
      caseSensitive: void 0,
      module: data_exports2,
    },
    "routes/record/index": {
      id: "routes/record/index",
      parentId: "root",
      path: "record",
      index: !0,
      caseSensitive: void 0,
      module: record_exports,
    },
    "routes/team/$teamId": {
      id: "routes/team/$teamId",
      parentId: "root",
      path: "team/:teamId",
      index: void 0,
      caseSensitive: void 0,
      module: teamId_exports,
    },
    "routes/team/$teamId/problemset/$problemSetId": {
      id: "routes/team/$teamId/problemset/$problemSetId",
      parentId: "routes/team/$teamId",
      path: "problemset/:problemSetId",
      index: void 0,
      caseSensitive: void 0,
      module: problemSetId_exports3,
    },
    "routes/team/$teamId/problemset/$problemSetId/problem": {
      id: "routes/team/$teamId/problemset/$problemSetId/problem",
      parentId: "routes/team/$teamId/problemset/$problemSetId",
      path: "problem",
      index: void 0,
      caseSensitive: void 0,
      module: problem_exports4,
    },
    "routes/team/$teamId/problemset/$problemSetId/index": {
      id: "routes/team/$teamId/problemset/$problemSetId/index",
      parentId: "routes/team/$teamId/problemset/$problemSetId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: problemSetId_exports4,
    },
    "routes/team/$teamId/problemset/$problemSetId/edit": {
      id: "routes/team/$teamId/problemset/$problemSetId/edit",
      parentId: "routes/team/$teamId/problemset/$problemSetId",
      path: "edit",
      index: void 0,
      caseSensitive: void 0,
      module: edit_exports4,
    },
    "routes/team/$teamId/problemset/tag/$tag": {
      id: "routes/team/$teamId/problemset/tag/$tag",
      parentId: "routes/team/$teamId",
      path: "problemset/tag/:tag",
      index: void 0,
      caseSensitive: void 0,
      module: tag_exports4,
    },
    "routes/team/$teamId/problemset/index": {
      id: "routes/team/$teamId/problemset/index",
      parentId: "routes/team/$teamId",
      path: "problemset",
      index: !0,
      caseSensitive: void 0,
      module: problemset_exports2,
    },
    "routes/team/$teamId/problemset/new": {
      id: "routes/team/$teamId/problemset/new",
      parentId: "routes/team/$teamId",
      path: "problemset/new",
      index: void 0,
      caseSensitive: void 0,
      module: new_exports2,
    },
    "routes/team/$teamId/contest/index": {
      id: "routes/team/$teamId/contest/index",
      parentId: "routes/team/$teamId",
      path: "contest",
      index: !0,
      caseSensitive: void 0,
      module: contest_exports2,
    },
    "routes/team/$teamId/problem/index": {
      id: "routes/team/$teamId/problem/index",
      parentId: "routes/team/$teamId",
      path: "problem",
      index: !0,
      caseSensitive: void 0,
      module: problem_exports5,
    },
    "routes/team/$teamId/problem/data": {
      id: "routes/team/$teamId/problem/data",
      parentId: "routes/team/$teamId",
      path: "problem/data",
      index: void 0,
      caseSensitive: void 0,
      module: data_exports3,
    },
    "routes/team/$teamId/contest/new": {
      id: "routes/team/$teamId/contest/new",
      parentId: "routes/team/$teamId",
      path: "contest/new",
      index: void 0,
      caseSensitive: void 0,
      module: new_exports3,
    },
    "routes/team/$teamId/problem/new": {
      id: "routes/team/$teamId/problem/new",
      parentId: "routes/team/$teamId",
      path: "problem/new",
      index: void 0,
      caseSensitive: void 0,
      module: new_exports4,
    },
    "routes/team/$teamId/settings": {
      id: "routes/team/$teamId/settings",
      parentId: "routes/team/$teamId",
      path: "settings",
      index: void 0,
      caseSensitive: void 0,
      module: settings_exports,
    },
    "routes/team/$teamId/members": {
      id: "routes/team/$teamId/members",
      parentId: "routes/team/$teamId",
      path: "members",
      index: void 0,
      caseSensitive: void 0,
      module: members_exports2,
    },
    "routes/team/$teamId/profile": {
      id: "routes/team/$teamId/profile",
      parentId: "routes/team/$teamId",
      path: "profile",
      index: void 0,
      caseSensitive: void 0,
      module: profile_exports,
    },
    "routes/team/$teamId/index": {
      id: "routes/team/$teamId/index",
      parentId: "routes/team/$teamId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: teamId_exports2,
    },
    "routes/user/$userId": {
      id: "routes/user/$userId",
      parentId: "root",
      path: "user/:userId",
      index: void 0,
      caseSensitive: void 0,
      module: userId_exports,
    },
    "routes/user/$userId/statistics": {
      id: "routes/user/$userId/statistics",
      parentId: "routes/user/$userId",
      path: "statistics",
      index: void 0,
      caseSensitive: void 0,
      module: statistics_exports,
    },
    "routes/user/$userId/profile": {
      id: "routes/user/$userId/profile",
      parentId: "routes/user/$userId",
      path: "profile",
      index: void 0,
      caseSensitive: void 0,
      module: profile_exports2,
    },
    "routes/user/$userId/admin": {
      id: "routes/user/$userId/admin",
      parentId: "routes/user/$userId",
      path: "admin",
      index: void 0,
      caseSensitive: void 0,
      module: admin_exports,
    },
    "routes/user/$userId/files": {
      id: "routes/user/$userId/files",
      parentId: "routes/user/$userId",
      path: "files",
      index: void 0,
      caseSensitive: void 0,
      module: files_exports,
    },
    "routes/user/$userId/index": {
      id: "routes/user/$userId/index",
      parentId: "routes/user/$userId",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: userId_exports2,
    },
    "routes/user/$userId/edit": {
      id: "routes/user/$userId/edit",
      parentId: "routes/user/$userId",
      path: "edit",
      index: void 0,
      caseSensitive: void 0,
      module: edit_exports5,
    },
    "routes/admin/judge": {
      id: "routes/admin/judge",
      parentId: "root",
      path: "admin/judge",
      index: void 0,
      caseSensitive: void 0,
      module: judge_exports,
    },
    "routes/chat/events": {
      id: "routes/chat/events",
      parentId: "root",
      path: "chat/events",
      index: void 0,
      caseSensitive: void 0,
      module: events_exports4,
    },
    "routes/contest/new": {
      id: "routes/contest/new",
      parentId: "root",
      path: "contest/new",
      index: void 0,
      caseSensitive: void 0,
      module: new_exports5,
    },
    "routes/problem/new": {
      id: "routes/problem/new",
      parentId: "root",
      path: "problem/new",
      index: void 0,
      caseSensitive: void 0,
      module: new_exports6,
    },
    "routes/playground": {
      id: "routes/playground",
      parentId: "root",
      path: "playground",
      index: void 0,
      caseSensitive: void 0,
      module: playground_exports,
    },
    "routes/team/index": {
      id: "routes/team/index",
      parentId: "root",
      path: "team",
      index: !0,
      caseSensitive: void 0,
      module: team_exports,
    },
    "routes/chat/user": {
      id: "routes/chat/user",
      parentId: "root",
      path: "chat/user",
      index: void 0,
      caseSensitive: void 0,
      module: user_exports,
    },
    "routes/chat/user/$userId/events": {
      id: "routes/chat/user/$userId/events",
      parentId: "routes/chat/user",
      path: ":userId/events",
      index: void 0,
      caseSensitive: void 0,
      module: events_exports5,
    },
    "routes/chat/user/$userId/index": {
      id: "routes/chat/user/$userId/index",
      parentId: "routes/chat/user",
      path: ":userId",
      index: !0,
      caseSensitive: void 0,
      module: userId_exports3,
    },
    "routes/chat/user/index": {
      id: "routes/chat/user/index",
      parentId: "routes/chat/user",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: user_exports2,
    },
    "routes/register": {
      id: "routes/register",
      parentId: "root",
      path: "register",
      index: void 0,
      caseSensitive: void 0,
      module: register_exports2,
    },
    "routes/team/new": {
      id: "routes/team/new",
      parentId: "root",
      path: "team/new",
      index: void 0,
      caseSensitive: void 0,
      module: new_exports7,
    },
    "routes/docs/$": {
      id: "routes/docs/$",
      parentId: "root",
      path: "docs/*",
      index: void 0,
      caseSensitive: void 0,
      module: __exports,
    },
    "routes/logout": {
      id: "routes/logout",
      parentId: "root",
      path: "logout",
      index: void 0,
      caseSensitive: void 0,
      module: logout_exports,
    },
    "routes/index": {
      id: "routes/index",
      parentId: "root",
      path: void 0,
      index: !0,
      caseSensitive: void 0,
      module: routes_exports,
    },
    "routes/login": {
      id: "routes/login",
      parentId: "root",
      path: "login",
      index: void 0,
      caseSensitive: void 0,
      module: login_exports,
    },
    "routes/reset": {
      id: "routes/reset",
      parentId: "root",
      path: "reset",
      index: void 0,
      caseSensitive: void 0,
      module: reset_exports,
    },
  };
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    assets,
    assetsBuildDirectory,
    entry,
    publicPath,
    routes,
  });
//! THIS IS A BACKEND API FOR /src/problem/ProblemEditor.tsx
